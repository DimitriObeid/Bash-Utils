#!/usr/bin/env bash

## VARIABLE DECLARATION

# These status variables can be changed anywhere in the main script, except for the following variables :
#   - PROJECT_STATUS_DEBUG      -> This variable is used as (...).

# Project's debug variable --> This variable only accepts "true" or "false" as values.
# Default value : "false"
# shellcheck disable=SC2034
__STAT_DEBUG="false"

# Project's error handling --> This variable accepts "fatal" or nothing as value.
# Default value : "" (no value)
# shellcheck disable=SC2034
__STAT_ERROR=""

# Project's main log file informations --> This variable only accepts "true" or "false" as values.
# Default value : "true"
# shellcheck disable=SC2034
__STAT_LOG="true"

# Project's main log file redirections status --> This variables accepts "log", "tee" or nothing as value.
# Default value : "" (no value)
# shellcheck disable=SC2034
__STAT_LOG_REDIRECT=""

# Project's messages display time --> This variable accepts any integer of floating number.
# Default value : ".5"
# shellcheck disable=SC2034
__STAT_TIME_TXT=".5"

# User's operating system (getting user's OS is important for OS-dependent processings, like package management)
# --> This variable will be completed with the "CheckSupportedOSType" function.
# Default value : "" (no value)
# shellcheck disable=SC2034
__STAT_USER_OS=""


# -----------------------------------------------

## VARIABLES VALUES CHECKING

# Checking if the variables color file is sourced.
function CheckColorCodesAndTextTabVariablesInitialized
{
    # Redefining the color variables here if the color variables file is not yet sourced.
    __COL_CYAN="$(tput setaf 6)"
    __COL_ORANGE="$(tput setaf 166)"
    __COL_RED="$(tput setaf 196)"
    __COL_RESET="$(tput sgr0)"
    __COL_YELLOW="$(tput setaf 226)"

    # Redefining the text variables here if the text variables file is not yet sourced.
    __TXT_TAB=">>>>"
}

# Easy writing text function.
function ConfEcho
{
    #***** Parameters *****
    local p_file=$1;
    local p_lineno=$2;
    local p_badVal=$3;
    local p_varVal=$4
    
    # Shifting the same number of time as the former arguments number
    # to avoid including these arguments values in the allowed values array.
    shift 4


    #***** Variables *****
    local arr=("$@")
    local i=0

    #***** Code *****
    if [ -z "$__TXT_TAB" ] || [ -z "$__TXT_IS_INITIALIZED" ]; then
        CheckColorCodesAndTextTabVariablesInitialized
    fi

    echo >&2; echo -n "$__COL_RED$__TXT_TAB$__TXT_TAB In$__COL_CYAN $p_file$__COL_RED, line$__COL_CYAN $p_lineno$__COL_RED --> " >&2
    echo "Error : the$__COL_CYAN $p_varVal$__COL_RED variable's value is incorrect$__COL_RESET" >&2

    if [ -z "$p_badVal" ]; then
        echo >&2; echo "$__COL_RED$__TXT_TAB$__TXT_TAB Bad value :$__COL_YELLOW An empty string$__COL_RESET" >&2
    else
        echo >&2; echo "$__COL_RED$__TXT_TAB$__TXT_TAB Bad value :$__COL_CYAN $p_badVal$__COL_RESET" >&2
    fi

    echo >&2; echo "$__COL_RED$__TXT_TAB$__TXT_TAB The allowed values are :$__COL_RESET" >&2

    # Displaying the list of every allowed arguments.
    for val in "${arr[@]}"; do
        i=$(( i+1 ))

        # If an empty argument is allowed.
        if [ -z "$val" ]; then
            echo -e "${__COL_RED}$i/${#arr[@]}  --> ${__COL_ORANGE}An empty argument$__COL_RESET" >&2
        else
            echo -e "${__COL_RED}$i/${#arr[@]}  --> $__COL_CYAN$val$__COL_RESET" >&2
        fi
    done

    echo >&2; exit 1
}

# Checking the "$STAT_DEBUG" variable's value.
function CheckSTAT_DEBUG
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("true" "false")

    #***** Code *****
    if [ "$__STAT_DEBUG" != "true" ] && [ "$__STAT_DEBUG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_DEBUG" "__STAT_DEBUG" "${array[@]}"
    fi
}

# Checking the "$STAT_ERROR" variable's value.
function CheckSTAT_ERROR
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("" "fatal")

    #***** Code *****
    if [ -n "$__STAT_ERROR" ] && [ "$__STAT_ERROR" != "fatal" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_ERROR" "__STAT_ERROR" "${array[@]}"
    fi
}

# Checking the "$STAT_LOG" variable's value.
function CheckSTAT_LOG
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("true" "false")

    #***** Code *****
    if [ "$__STAT_LOG" != "true" ] && [ "$__STAT_LOG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_LOG" "__STAT_LOG" "${array[@]}"
    fi
}

# Checking the "$STAT_LOG_REDIRECT" variable's value.
function CheckSTAT_LOG_REDIRECT
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("" "true" "false")

    #***** Code *****
    if [ -n "$__STAT_LOG_REDIRECT" ] && [ "$__STAT_LOG_REDIRECT" != 'log' ] && [ "$__STAT_LOG_REDIRECT" != 'tee' ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_LOG_REDIRECT" "__STAT_LOG_REDIRECT" "${array[@]}"
    fi
}

# Checking the "$STAT_TIME_TXT" variable's value.
function CheckSTAT_TIME_TXT
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("$COL_ORANGE An integer or a floating number")

    #***** Code *****
    # If the status variable's value is not a float or an integer.
    if [[ ! "$__STAT_TIME_TXT" =~ ^([0-9]+\.?|[0-9]*\.[0-9]+)$ ]]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_TIME_TXT" "__STAT_TIME_TXT" "${array[@]}" >&2
    fi
}

# Checking the "$STAT_USER_OS" variable's value.
# This function is empty now, as the OS handling is still in work.
function CheckSTAT_USER_OS
{
    return
}


# Checking all the project's status variables values if multiple values had been modified.
function CheckProjectStatusVars
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Code *****
    # Processing first the "STAT_LOG_REDIRECT" variable, to make sure the following error messages will be correctly displayed if another error happened.
    CheckSTAT_LOG_REDIRECT  "$p_file" "$p_lineno"
    CheckSTAT_DEBUG         "$p_file" "$p_lineno"
    CheckSTAT_ERROR         "$p_file" "$p_lineno"
    CheckSTAT_LOG           "$p_file" "$p_lineno"
    CheckSTAT_TIME_TXT      "$p_file" "$p_lineno"
}

# Checking the project's status variables before switching back to the project's script.
# This function will be executed during the sourcing of this file in the initializer script.
# There's no need to call it in the forementionned script.
CheckProjectStatusVars "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
