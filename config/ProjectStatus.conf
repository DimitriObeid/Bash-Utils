#!/usr/bin/env bash

## VARIABLE DECLARATION

# These status variables can be changed anywhere in the main script, except for the following variables :
#   - PROJECT_STATUS_DEBUG      -> This variable is used as (...).

# Project's debug variable --> This variable only accepts "true" or "false" as values.
# Default value : "false"
# shellcheck disable=SC2034
STAT_DEBUG="false"

# Project's error handling --> This variable accepts "fatal" or nothing as value.
# Default value : "" (no value)
# shellcheck disable=SC2034
STAT_ERROR=""

# Project's main log file informations --> This variable only accepts "true" or "false" as values.
# Default value : "true"
# shellcheck disable=SC2034
STAT_LOG="true"

# Project's main log file redirections status --> This variables accepts "log", "tee" or nothing as value.
# Default value : "" (no value)
# shellcheck disable=SC2034
STAT_LOG_REDIRECT=""

# Project's messages display time --> This variable accepts any integer of floating number.
# Default value : ".5"
# shellcheck disable=SC2034
STAT_TIME_TXT=".5"

# User's operating system (getting user's OS is important for OS-dependent processings, like package management)
# --> This variable will be completed with the "CheckSupportedOSType" function.
# Default value : "" (no value)
# shellcheck disable=SC2034
STAT_USER_OS=""


# -----------------------------------------------

## VARIABLES VALUES CHECKING

# Checking if the variables color file is sourced.
function CheckColorCodeVariablesInitialized
{
    if [ -z "$__COL_IS_INITIALIZED" ]; then
        COL_CYAN="6"
        COL_ORANGE="166"
        COL_RED="196"
    fi
}

# Easy writing text function.
function ConfEcho
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2
    local var=$3; shift
    local arr=("$@")

    #***** Variables *****
    i=0

    #***** Code *****
    CheckColorCodeVariablesInitialized
    
    echo >&2; echo "$(tput setaf "$COL_RED")In $(tput setaf "$COL_CYAN")$p_file$(tput setaf "$COL_RED"), line $(tput setaf "$COL_CYAN")$p_lineno$(tput setaf "$COL_RED") --> Error : the $(tput setaf "$COL_CYAN")$var$(tput setaf "$COL_RED") variable's value is incorrect$(tput sgr0)" >&2
    echo >&2; echo "$(tput setaf "$COL_RED")The allowed values are :$(tput sgr0)" >&2
    
    # Displaying the list of every allowed arguments.
    for val in "${arr[@]}"; do
        i=$(( i+1 ))

        # If an empty argument is allowed.
        if [ -z "$val" ]; then
            echo "$(tput setaf "$COL_RED")$i/${#arr[@]}  --> $(tput setaf "$COL_ORANGE")An empty argument$(tput sgr0)" >&2
        else
            echo "$(tput setaf "$COL_RED")$i/${#arr[@]}  --> $(tput setaf "$COL_CYAN")$val$(tput sgr0)" >&2
        fi
    done
    
    echo >&2; exit 1
}

# Checking the "$STAT_DEBUG" variable's value.
function CheckSTAT_DEBUG
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("true" "false")

    #***** Code *****
    if [ "$STAT_DEBUG" != "true" ] && [ "$STAT_DEBUG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "STAT_DEBUG" "${array[@]}"
    fi
}

# Checking the "$STAT_ERROR" variable's value.
function CheckSTAT_ERROR
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("" "fatal")

    #***** Code *****
    if [ -n "$STAT_ERROR" ] && [ "$STAT_ERROR" != "fatal" ]; then
        ConfEcho "$p_file" "$p_lineno" "STAT_ERROR" "${array[@]}"
    fi
}

# Checking the "$STAT_LOG" variable's value.
function CheckSTAT_LOG
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("true" "false")

    #***** Code *****
    if [ "$STAT_LOG" != "true" ] && [ "$STAT_LOG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "STAT_LOG" "${array[@]}"
    fi
}

# Checking the "$STAT_LOG_REDIRECT" variable's value.
function CheckSTAT_LOG_REDIRECT
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("" "true" "false")

    #***** Code *****
    if [ -n "$STAT_LOG_REDIRECT" ] && [ "$STAT_LOG_REDIRECT" != 'log' ] && [ "$STAT_LOG_REDIRECT" != 'tee' ]; then
        ConfEcho "$p_file" "$p_lineno" "STAT_LOG_REDIRECT" "${array[@]}"
    fi
}

# Checking the "$STAT_TIME_TXT" variable's value.
function CheckSTAT_TIME_TXT
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local array=("$(tput setaf "$COL_ORANGE")An integer or a floating number")

    #***** Code *****
    # If the status variable's value is not a float or an integer.
    if [[ ! "$STAT_TIME_TXT" =~ ^([0-9]+\.?|[0-9]*\.[0-9]+)$ ]]; then
        ConfEcho "$p_file" "$p_lineno" "STAT_TIME_TXT" "${array[@]}" >&2
    fi
}

# Checking the "$STAT_USER_OS" variable's value.
# This function is empty now, as the OS handling is still in work.
function CheckSTAT_USER_OS
{
    return
}


# Checking all the project's status variables values if multiple values had been modified.
function CheckProjectStatusVars
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Code *****
    # Processing first the "STAT_LOG_REDIRECT" variable, to make sure the following error messages will be correctly displayed if another error happened.
    CheckSTAT_LOG_REDIRECT  "$p_file" "$p_lineno"
    CheckSTAT_DEBUG         "$p_file" "$p_lineno"
    CheckSTAT_ERROR         "$p_file" "$p_lineno"
    CheckSTAT_LOG           "$p_file" "$p_lineno"
    CheckSTAT_TIME_TXT      "$p_file" "$p_lineno"
}

# Checking the project's status variables before switching back to the project's script.
# This function will be executed during the sourcing of this file in the initializer script.
# There's no need to call it in the forementionned script.
CheckProjectStatusVars "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
