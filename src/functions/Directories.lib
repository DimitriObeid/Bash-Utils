#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

## PROCESSING FUNCTIONS

# Overwriting an existing directory's content
function OverwriteDir()
{
    #***** Parameters *****
    path=$1

    #***** Code *****
    EchoNewstep "$MSG_MKDIR_NONEMPTY_1." "$sleep_txt"
	EchoNewstep "$MSG_MKDIR_NONEMPTY_2." "$sleep_txt"
	Newline
	
	# WARNING ! DO NOT MODIFY THE FOLLOWING COMMAND, UNLESS YOU KNOW EXACTLY WHAT YOU DO !!!
	# Check this link for more informations about this command --> https://github.com/koalaman/shellcheck/wiki/SC2115
	if rm -rfv "${path/:?}/"*; then
		EchoSuccess "$MSG_MKDIR_NONEMPTY_SUCC." "$sleep_txt"
        Newline

        EchoSuccess "$MSG_MKDIR_PROCESSING_END_SUCC." "$sleep_txt"
        Newline

    else
        EchoError "$MSG_MKDIR_NONEMPTY_FAIL_1." "$sleep_txt";
        EchoError "$MSG_MKDIR_NONEMPTY_FAIL_2" "$sleep_txt"
		Newline

        EchoError "$MSG_MKDIR_PROCESSING_END_FAIL." "$sleep_txt"
        Newline
    fi
}



# Folder creation AND recursively assigning read and write rights to the user.
# When this function is called, if a log file is used in the project, the output of this function must be redirected either to the terminal AND the log file (2>&1 | tee -a "$FILE_LOG_PATH"), or to the log file only (>> "$FILE_LOG_PATH") after passing all the mandatory arguments. Otherwise, leave everything blank after passing the arguments.

# Required files and functions :
#   - Echo.sh       -> EchoErrorTimer
#   - Echo.sh       -> EchoNewstepTimer
#   - Echo.sh       -> EchoSuccessTimer
#   - Headers.sh    -> DrawLine   
#   - Headers.sh    -> HandleErrors
function Makedir()
{
	#***** Parameters *****
	local parent=$1		# Emplacement depuis la racine du dossier parent du dossier à traiter.
	local name=$2		# Nom du dossier à traiter (dans son dossier parent).
	local sleep_blk=$3	# Temps de pause du script avant et après la création d'une ligne d'un bloc d'informations sur le traitement du dossier.
	local sleep_txt=$4	# Temps d'affichage des messages de passage à une nouvelle sous-étape, d'échec ou de succès lors du traitement du dossier.

	#***** Variables *****
	local path="$parent/$name"	# Chemin du dossier à traiter.
	local block_char='"'		# Caractère composant la ligne (c'est un double quote (")).
    local cmd="mkdir -pv $path"

	#***** Code *****
	# On commence par dessiner la première ligne du bloc.
	sleep "$sleep_blk"
	DrawLine "$COL_RESET" "$block_char"

	EchoNewstep "$MSG_MKDIR_PROCESSING_BEGIN." "$sleep_txt"
    Newline

	# Si le dossier à traiter n'existe pas, alors le script le crée.
	if [ ! -d "$path" ]; then
		EchoNewstep "$MSG_MKDIR_CREATE." "$sleep_txt"
		Newline

		# On crée une variable nommée "lineno". Elle enregistre la valeur de la variable globale "$LINENO", qui enregistre le numéro de la ligne dans laquelle est est appelée dans un script.
		local lineno=$LINENO; for _ in $cmd; do
            eval "${!cmd}"
            # On vérifie si le dossier a bien été créé en vérifiant le code de retour de la commande "mkdir" via la fonction "HandleErrors"
            HandleErrors "$?" "$MSG_MKDIR_CREATE_FAIL." "$MSG_MKDIR_CREATE_FAIL_ADV" "$lineno"
        done; Newline

        EchoSuccess "$MSG_MKDIR_CREATE_SUCC." "$sleep_txt"
        Newline

		# On change les droits du dossier nouvellement créé par le script
		# Comme ce dernier est exécuté en mode super-utilisateur, tout dossier ou fichier créé appartient à l'utilisateur root.
		# Pour attribuer récursivement la propriété du dossier à l'utilisateur normal, on appelle la commande chown avec pour arguments :
		#		- Le nom de l'utilisateur à qui donner les droits
		#		- Le chemin du dossier cible

		EchoNewstep "$MSG_MKDIR_CHMOD." "$sleep_txt"
		Newline

		lineno=$LINENO; if chown -Rv "${ARG_USERNAME}" "$path"; then
			EchoSuccess "$MSG_MKDIR_CHMOD_SUCC." "$sleep_txt"
			Newline

			EchoSuccess "$MSG_MKDIR_PROCESSING_END_SUCC." "$sleep_txt"
			DrawLine "$COL_RESET" "$block_char"
			sleep "$sleep_blk"
			Newline

			return
		else
			EchoError "$MSG_MKDIR_CHMOD_FAIL_1." "$sleep_txt"
			EchoError "$MSG_MKDIR_CHMOD_FAIL_2 :" "$sleep_txt"
			echo "	chown -R ${ARG_USERNAME} $path"
			Newline

			EchoError "$MSG_MKDIR_PROCESSING_END_FAIL." "$sleep_txt"
			DrawLine "$COL_RESET" "$block_char"		# On dessine la deuxième et dernière ligne du bloc.
			sleep "$sleep_blk"
			Newline

			return
        fi
	
    # Sinon, si le dossier à créer existe déjà dans son dossier parent ET que ce dossier contient AU MOINS un fichier ou dossier.
	elif [ -d "$path" ] && [ "$(ls -A "$path")" ]; then
        OverwriteDir
		return

	# Sinon, si le dossier à créer existe déjà dans son dossier parent ET que ce dossier est vide.
	elif [ -d "$path" ] && [ ! "$(ls -A "$path")" ]; then
		EchoSuccess "$MSG_MKDIR_EMPTY." "$sleep_txt"
		Newline

		EchoSuccess "$MSG_MKDIR_PROCESSING_END_SUCC." "$sleep_txt"
		DrawLine "$COL_RESET" "$block_char"
		sleep "$sleep_blk"
		Newline

		return
    fi
}
