#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

## PROCESSING FUNCTIONS

# Separate processing steps displays from the rest of the main script with a line.

# Featured functions and files from the "functions" folder :
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function ProcessingDir
{
    #***** Parameters *****
    function=$1
    
    #***** Variables *****
    char='"'
    
    #***** Code *****
    # On commence par dessiner la première ligne du bloc.
	sleep "$PROJECT_STATUS_SLEEP_LINE"
    DrawLine "$COL_RESET" "$char"
    
    EchoNewstep "$MSG_DIR_PROCESSING_BEGIN"
    Newline
    
    if $("$function"); then
        EchoSuccess "$MSG_DIR_PROCESSING_END_SUCC"
		DrawLine "$COL_RESET" "$char"
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    else
        EchoError "$MSG_DIR_PROCESSING_END_FAIL"
		DrawLine "$COL_RESET" "$char"
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    fi
}

# Overwriting an existing directory's content

# Featured functions and files from the "functions" folder :
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
function OverwriteDir
{
    #***** Parameters *****
    path=$1

    #***** Code *****
    EchoNewstep "$MSG_MKDIR_NONEMPTY_1."
	EchoNewstep "$MSG_MKDIR_NONEMPTY_2."
	Newline
	
	# WARNING ! DO NOT MODIFY THE FOLLOWING COMMAND, UNLESS YOU KNOW EXACTLY WHAT YOU DO !!!
	# Check this link for more informations about this command --> https://github.com/koalaman/shellcheck/wiki/SC2115
	if rm -rfv "${path/:?}/"*; then
	HandleErrors "$?" "" "" ""
        EchoSuccess "$MSG_MKDIR_NONEMPTY_SUCC."
        Newline

        return 0
    else
        EchoError "$MSG_MKDIR_NONEMPTY_FAIL_1."
        EchoError "$MSG_MKDIR_NONEMPTY_FAIL_2"
        Newline

        return 1
	fi
    EchoError "$MSG_MKDIR_PROCESSING_END_FAIL."
    Newline
}



# Folder creation AND recursively assigning read and write rights to the user.
# When this function is called, if a log file is used in the project, the output of this function must be redirected either to the terminal AND the log file (2>&1 | tee -a "$FILE_LOG_PATH"), or to the log file only (>> "$FILE_LOG_PATH") after passing all the mandatory arguments. Otherwise, leave everything blank after passing the arguments.

# Required files and functions :
#   - Echo.sh       -> EchoErrorTimer
#   - Echo.sh       -> EchoNewstepTimer
#   - Echo.sh       -> EchoSuccessTimer
#   - Headers.sh    -> DrawLine   
#   - Headers.sh    -> HandleErrors
function Makedir
{
	#***** Parameters *****
	local parent=$1		# Emplacement depuis la racine du dossier parent du dossier à traiter.
	local name=$2		# Nom du dossier à traiter (dans son dossier parent).

	#***** Variables *****
	local path="$parent/$name"	# Chemin du dossier à traiter.
	local block_char='"'		# Caractère composant la ligne (c'est un double quote (")).
    local cmd="mkdir -pv $path"

	#***** Code *****
	EchoNewstep "$MSG_DIR_MKDIR"
    Newline

	# Si le dossier à traiter n'existe pas, alors le script le crée.
	if [ ! -d "$path" ]; then
		EchoNewstep "$MSG_DIR_MKDIR_CREATE"
		Newline

		# On crée une variable nommée "lineno". Elle enregistre la valeur de la variable globale "$LINENO", qui enregistre le numéro de la ligne dans laquelle est est appelée dans un script.
		local lineno=$LINENO; for _ in $cmd; do
            if eval "${!cmd}"; then
                EchoSuccess "$MSG_DIR_MKDIR_CREATE_SUCC"
                Newline
            else
            
                return 1
            fi
            # On vérifie si le dossier a bien été créé en vérifiant le code de retour de la commande "mkdir" via la fonction "HandleErrors"
            HandleErrors "$?" "$MSG_DIR_MKDIR_CREATE_FAIL" "$MSG_MKDIR_CREATE_FAIL_ADV" "$lineno"
        done;
	
    # Sinon, si le dossier à créer existe déjà dans son dossier parent ET que ce dossier contient AU MOINS un fichier ou dossier.
	elif [ -d "$path" ] && [ "$(ls -A "$path")" ]; then
        if OverwriteDir "$path"; then
            return 0
		else
            return 1
		fi

	# Sinon, si le dossier à créer existe déjà dans son dossier parent ET que ce dossier est vide.
	elif [ -d "$path" ] && [ ! "$(ls -A "$path")" ]; then
		EchoSuccess "$MSG_DIR_MKDIR_EMPTY."
		Newline

		return 0
    fi
}
