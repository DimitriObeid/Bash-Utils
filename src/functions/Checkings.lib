#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CHECKING FOR EFFECTIVE USER IDENTIFIANT (EUID)

## CHECKING FOR SUPER-USER PRIVILEGES

# Checking if the current effective UID is not equal to 0 (root user's account)

# Required functions and files :
#   - HandleErrors      -> Bash-Utils/src/functions/Headers.lib
function CheckRootEUID
{
    if [ "$EUID" -ne 0 ]; then
        HandleErrors "" "" "" "" ""
    fi
}


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CHECKING VARIABLES STATUS

## STATUS VARIABLES MODIFICATIONS

# This function modifies the status variables for each value passed as argument,
# to change variables status faster than calling the variables to modify their values.
function ModVarStatus
{
    #***** Parameters *****
    b_debug=$1
    b_log=$2
    s_redirect=$3
    f_time_line=$4
    f_time_txt=$5
    
    #***** Code *****
    
    CheckVarStatus
}

# This function, which checks the status variables values, has to be called inside the "ModStatus" function, right at the end of the function.
function CheckVarStatus
{
    if [ "$PROJECT_STATUS_DEBUG" != "true" ] && [ "$PROJECT_STATUS_DEBUG" != "false" ]; then
        EchoError "$MSG_CHECK_VARSTAT_DEBUG_FAIL"; exit 1
        
    elif [ "$PROJECT_STATUS_LOG" != "true" ] && [ "$PROJECT_STATUS_LOG" != "false" ]; then
        EchoError "$MSG_CHECK_VARSTAT_LOG_FAIL"; exit 1
        
    elif [ "$PROJECT_STATUS_LOG_REDIRECT" != "log" ] && [ "$PROJECT_STATUS_LOG_REDIRECT" != "tee" ] \
        && [ "$PROJECT_STATUS_LOG_REDIRECT" != "" ]; then
        # On définit quand même la variable PROJECT_STATUS_LOG_REDIRECT à "tee"
        # pour afficher sans problèmes le contenu de la chaîne de caractères en rouge.
        PROJECT_STATUS_LOG_REDIRECT="tee"
        EchoError "$MSG_CHECK_VARSTAT_LOGREDIRECT_FAIL"; exit 1
    
    # If the status variable's value is not a float or an integer.
    elif [[ ! "$PROJECT_STATUS_TIME_LINE" =~ ^([0-9]+\.?|[0-9]*\.[0-9]+)$ ]]; then
        EchoError "$MSG_CHECK_VARSTAT_TIMELINE_NAN"; exit 1
    
    elif [[ ! "$PROJECT_STATUS_TIME_TXT" =~ ^([0-9]+\.?|[0-9]*\.[0-9]+)$ ]]; then
        EchoError "$MSG_CHECK_VARSTAT_TIMETXT_NAN"; exit 1
    
    fi
}


# -----------------------------------------------

## CHECKING FOR FILES AND FOLDERS

# Checking for "$PROJECT_LOG_PATH"
function CheckProjectLogPath
{
    if [ -z "$PROJECT_LOG_PATH" ]; then
        EchoError "$MSG_CHECK_LOG_PATH_FAIL"; exit 1
    fi
}

# Checking for project's log file's status, then write
function CheckProjectLogStatus
{
    #***** Parameters *****
    string=$1
    
    #***** Variables *****

    #**** Code *****
    CheckProjectLogPath
    
    if [ "$PROJECT_STATUS_LOG" = "true" ]; then
        if [ -n "$PROJECT_STATUS_LOG_REDIRECT" ]; then
            if [ "$PROJECT_STATUS_LOG_REDIRECT" = "log" ] || [ "$PROJECT_STATUS_LOG_REDIRECT" -eq 1 ]; then
                echo "[$TIME_DATE] $string" >> "$PROJECT_LOG_PATH" || { echo "" ; exit 1; }
            elif [ "$PROJECT_STATUS_LOG_REDIRECT" = "tee" ] || [ "$PROJECT_STATUS_LOG_REDIRECT" -eq 2 ]; then
                echo "$string"
                echo "[$TIME_DATE] $string" >> "$PROJECT_LOG_PATH" || { echo ""; exit 1; }
            else
                echo "$MSG_CHECK_LOG_STATUS_FAIL"; echo
                exit 1
            fi
        else
            echo "$string"
        fi
    else
        echo "$string"
    fi
}

# -----------------------------------------------

## CHECKING FOR TIME STATUS
