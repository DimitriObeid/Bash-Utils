#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### RECURSIVE PERMISSION AND OWNERSHIP PROCESSING

## RECURSIVE OWNERSHIP SWAPPING

# Calling the "chown" command to change recursively directory ownership

# Required functions and files into the "Bash-Utils/src/functions" folder :
#	- CheckRootEUID		-> Checkings.lib
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
#	- HandleErrors		-> Headers.lib
function ChownRec
{
    #***** Paramètres *****
    current_owner=$1    # This parameter is used in the translated messages, stored into their own variables.
    new_owner=$2
    path=$3

    #***** Code *****
    # The "chown" command has to be used with super-user privileges,
    CheckRootEUID

    # If the path passed as argument doesn't exists.
    if [ ! -d "$path" ]; then
        HandleError "" "" "" ""
    fi

    EchoNewstep "$MSG_PERM_CHOWNREC."
	Newline

    # On change les droits du fichier créé par le script.
	# Comme il est exécuté en mode super-utilisateur, tout dossier ou fichier créé appartient à l'utilisateur root.
	# Pour attribuer les droits de lecture, d'écriture et d'exécution (rwx) à l'utilisateur normal, on appelle
	# la commande chown avec pour arguments :
	#		- Le nom de l'utilisateur à qui donner les droits.
	#		- Le chemin du dossier cible.
	if chown -Rv "$new_owner" "$path"; then
		EchoSuccess "$MSG_PERM_CHOWNREC_SUCCESS."
		Newline

		return
	else
        EchoError "$MSG_PERM_CHOWNREC_FAIL."
		EchoError "$MSG_PERM_CHOWNREC_FAIL_ADVICE :"
		echo '	chown -R $current_owner $path'
		Newline

		return
    fi
}


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### NON-RECURSIVE PERMISSION AND OWNERSHIP PROCESSING

## NON-RECURSIVE OWNERSHIP SWAPPING

# Fonctions d'attribution de propriété de fichier à l'utilisateur.

# Required functions and files into the "Bash-Utils/src/functions" folder :
#   - CheckRootEUID -> Checkings.lib
#   - EchoError     -> Echo.lib
#   - EchoNewstep   -> Echo.lib
#   - EchoSuccess   -> Echo.lib
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function Chown
{
    #***** Parameters *****
    current_owner=$1    # This parameter is used in the translated messages, stored into their own variables.
    new_owner=$2
    path=$3
    
    #***** Code *****
    # The "chown" command has to be used with super-user privileges,
    CheckRootEUID
    
    # If the path passed as argument doesn't exists.
    if [ -d "$path" ]; then
        EchoNewstep "$MSG_PERMISSIONS_CHOWN_PROCESSING_DIR"
        Newline
    else
        # Checking first if the path is a filepath. If not, then no correct path is passed as argument.
        if [ -f "$path" ]; then
            EchoNewstep "$MSG_PERMISSIONS_CHOWN_PROCESSING_FILE"
            Newline
        else
            HandleError "" "" "" ""
        fi

    fi

    # Changing ownership
    if chown -v "$new_owner" "$path"; then
        EchoSuccess "$MSG_PERMISSIONS_CHOWN_FILE_SUCCESS"
        Newline

        EchoSuccess "$MSG_MKFILE_PROCESSING_END_SUCC."
        sleep "$PROJECT_STATUS_TIME_HEADER"
        Newline

        return
    else

        EchoError "$MSG_PERMISSIONS_CHOWN_FILE_FAIL"
        EchoError "$MSG_PERMISSIONS_CHOWN_FILE_FAIL_ADVICE"
        echo '	chown $username $path'

        EchoError "$MSG_MKFILE_PROCESSING_END_FAIL."
		sleep "$PROJECT_STATUS_TIME_HEADER"
        Newline

        return
    fi
}

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #
