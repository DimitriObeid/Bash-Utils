#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### RECURSIVE PERMISSION AND OWNERSHIP PROCESSING

## RECURSIVE OWNERSHIP SWAPPING

# Calling the "chown" command to change recursively directory ownership

# Required functions and files into "Bash-Utils/src/functions" folder :
#   - CheckRootEUID -> Checkings.lib
#   - EchoError     -> Echo.lib         ->  CheckProjectLogStatus   -> Checkings.lib
#   - EchoNewstep   -> Echo.lib         ->  CheckProjectLogStatus   -> Checkings.lib
#   - EchoSuccess   -> Echo.lib         ->  CheckProjectLogStatus   -> Checkings.lib
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib      ->  EchoError
function ChownRec
{
    #***** Paramètres *****
    current_owner=$1    # This parameter is used in the translated messages, stored into their own variables.
    new_owner=$2
    path=$3
    
    #***** Variables *****
    timer="$PROJECT_PAUSE"

    #***** Code *****
    # The "chown" command has to be used with super-user privileges,
    CheckRootEUID
    
    # If the path passed as argument doesn't exists.
    if [ ! -d "$path" ]; then
        HandleError "" "" "" ""
    fi
    
    EchoNewstep "$MSG_PERM_CHOWNREC." "$timer"
	Newline

    # On change les droits du fichier créé par le script.
	# Comme il est exécuté en mode super-utilisateur, tout dossier ou fichier créé appartient à l'utilisateur root.
	# Pour attribuer les droits de lecture, d'écriture et d'exécution (rwx) à l'utilisateur normal, on appelle
	# la commande chown avec pour arguments :
	#		- Le nom de l'utilisateur à qui donner les droits.
	#		- Le chemin du dossier cible.
	if chown -Rv "$new_owner" "$path"; then
		EchoSuccess "$MSG_PERM_CHOWNREC_SUCCESS." "$timer"
		Newline

		return
	else
        EchoError "$MSG_PERM_CHOWNREC_FAIL." "$timer"
		EchoError "$MSG_PERM_CHOWNREC_FAIL_ADVICE :" "$timer"
		Newline "	chown -R $current_owner $path"
		Newline

		return
    fi
}


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### NON-RECURSIVE PERMISSION AND OWNERSHIP PROCESSING

## NON-RECURSIVE OWNERSHIP SWAPPING

# Fonctions d'attribution de propriété de fichier à l'utilisateur.

# Required functions and files :
#   - EchoError    -> Bash-Utils/src/functions/Echo.lib
#   - EchoNewstep  -> Bash-Utils/src/functions/Echo.lib
#   - EchoSuccess  -> Bash-Utils/src/functions/Echo.lib
#   - DrawLine     -> Bash-Utils/src/functions/Headers.lib
#   - HandleErrors -> Bash-Utils/src/functions/Headers.lib
function Chown
{
    #***** Parameters *****
    current_owner=$1    # This parameter is used in the translated messages, stored into their own variables.
    new_owner=$2
    path=$3
    timer=$4
    
    #***** Code *****
    # The "chown" command has to be used with super-user privileges,
    CheckRootEUID
    
    # If the path passed as argument doesn't exists.
    if [ -d "$path" ]; then
        EchoNewstep "$MSG_PERMISSIONS_CHOWN_PROCESSING_DIR" "$timer"
        Newline
    else
        # Checking first if the path is a filepath. If not, then no correct path is passed as argument.
        if [ -f "$path" ]; then
            EchoNewstep "$MSG_PERMISSIONS_CHOWN_PROCESSING_FILE" "$timer"
            Newline
        else
            HandleError "" "" "" ""
        fi

    fi
    
    # Defining a timer for pausing script after displaying text.
    if test -z "$timer"; then
        timer=".5"
    fi

    if chown -v "$new_owner" "$path"; then
        EchoSuccess "$MSG_PERMISSIONS_CHOWN_FILE_SUCCESS" "$timer"
        Newline

        EchoSuccess "$MSG_MKFILE_PROCESSING_END_SUCC." "$timer"
        DrawLine "$COL_RESET" "$block_char"
        sleep "$sleep_blk"
        echo

        return
    else

        EchoError "$MSG_PERMISSIONS_CHOWN_FILE_FAIL" "$timer"
        EchoError "$MSG_PERMISSIONS_CHOWN_FILE_FAIL_ADVICE" "$sleep_txt"
        echo '	chown $username $path'

        EchoError "$MSG_MKFILE_PROCESSING_END_FAIL." "$sleep_txt"
        DrawLine "$COL_RESET" "$block_char"
        sleep "$sleep_blk"
        echo

        return
    fi
}

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #
