#!/usr/bin/env bash

# Disabling the SC2034 warning from Shellcheck (SC2034: <Variable name> appears unused. Verify use (or export if used externally)), because of the huge number of global variables declared in the configuration files, but only used in the library files.
# shellcheck disable=SC2034

# This configuration file stores every global variables storing informations related about the user's current operating system.

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

################################## DEFINING RESOURCES - FUNCTIONS #################################

####

##

# ······························································································································
# Getting the user's current operating system, and storing the information in the "${__BU_SOFTWARE_CURRENT_OS}" global variable.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid()    -> Main -> OS.lib
#   - BU.Main.OS.IsBSD()        -> Main -> OS.lib
#   - BU.Main.OS.IsChrome()     -> Main -> OS.lib
#   - BU.Main.OS.IsHaiku()      -> Main -> OS.lib
#   - BU.Main.OS.IsLinux()      -> Main -> OS.lib
#   - BU.Main.OS.IsOSX()        -> Main -> OS.lib
#   - BU.Main.OS.IsWindows()    -> Main -> OS.lib

# shellcheck disable=
function BU.Software.ModConfig.OSMgr.GetCurrentOS()
{
    #**** Parameters ****
    local p_useLinuxFunctions=${1:-$'\0'};  # ARG TYPE : String     - OPTIONAL | DEFAULT VAL : NULL     - DESC : Determines if the user wants to use Linux functions for Android or Chrome OS.

    #**** Code ****
    # TODO : Checking if the user wants to use Linux functions for Android or Chrome OS, since both operating systems are based on Linux.

    ## ---------------------------------------------------------------------------------------------------------------------------------------------------
    # CASE MATTERS, DO NOT MODIFY ANY VALUES, AS THE THE FUNCTIONS NAMES ARE CASE SENSITIVE (OPERATING SYSTEMS NAMES WRITTEN IN THE FUNCTIONS NAMES) !!!!!

    # The "${__BU_SOFTWARE_CURRENT_OS}" variable is declared as constants, as its value must not be changed during the script's execution.
    BU.Main.OS.IsBSD        && { declare -r __BU_SOFTWARE_CURRENT_OS='BSD';     };
    BU.Main.OS.IsHaiku      && { declare -r __BU_SOFTWARE_CURRENT_OS='Haiku';   };
    BU.Main.OS.IsOSX        && { declare -r __BU_SOFTWARE_CURRENT_OS='OSX';     };
    BU.Main.OS.IsWindows    && { declare -r __BU_SOFTWARE_CURRENT_OS='Windows'; };

    BU.Main.OS.IsAndroid    && { if [ -z "${p_useLinuxFunctions}" ]; then   declare -r __BU_SOFTWARE_CURRENT_OS='Android';  else declare -r __BU_SOFTWARE_CURRENT_OS='Linux'; fi };
    BU.Main.OS.IsChrome     && { if [ -z "${p_useLinuxFunctions}" ]; then   declare -r __BU_SOFTWARE_CURRENT_OS='Chrome';   else declare -r __BU_SOFTWARE_CURRENT_OS='Linux'; fi };
    BU.Main.OS.IsLinux      && { [ -z "${__BU_SOFTWARE_CURRENT_OS}" ]  &&   declare -r __BU_SOFTWARE_CURRENT_OS='Linux';    };
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

######################################## DEFINING VARIABLES #######################################

####

##

BU.Software.ModConfig.OSMgr.GetCurrentOS "";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #