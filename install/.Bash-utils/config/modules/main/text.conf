#!/usr/bin/env bash

# Disabling the SC2034 warning from Shellcheck (SC2034: <Variable name> appears unused. Verify use (or export if used externally)), because of the huge number of global variables declared in the configuration files, but only used in the library files.
# shellcheck disable=SC2034

# This configuration file stores text-related global variables.

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

################################## DEFINING RESOURCES - FUNCTIONS #################################

#### TEXT MODE PROCESSING

## COLUMNS AND LINES

# ······································································
# Writing the command substitution text when the text mode is processed.

# shellcheck disable=SC2059,SC2154
function BU.Main.ModConfig.Text.PrintTextModeCmdSubs()  { printf "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__PrintTextModeCmdSubs__FNCT}" "${1}" "${1}"; }

## ----------------------------------------------

## TEXT FORMATTING

# ···································································
# Writing the command substitution text when a formatting is defined.

# shellcheck disable=SC2059,SC2154
function BU.Main.ModConfig.Text.PrintFormatCmdSubs()    { printf "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__PrintFormatCmdSubs__FNCT}" "${1}"; }

# ··································································
# Writing the command substitution text when a resetting is defined.

# shellcheck disable=SC2059,SC2154
function BU.Main.ModConfig.Text.PrintResetCmdSubs()     { printf "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__PrintResetCmdSubs__FNCT}" "${1}"; }

# ········································································
# Writing the command substitution text when a total resetting is defined.

# shellcheck disable=SC2059,SC2154
function BU.Main.ModConfig.Text.PrintAllResetCmdSubs()  { printf "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__PrintAllResetCmdSubs__FNCT}"; }

## ----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### OTHER FUNCTIONS

## ERROR FUNCTIONS

# ······························································································
# Writing the name of the variable that could not be initialized with it's command substitution.

function BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize() {
    # ${1} -> Variable's name | ${2} -> "$(basename "${BASH_SOURCE[0]}")" | ${3} -> LINENO (line number)
    BU.ModuleInit.PrintLogError "${BASH_SOURCE[0]}" "$(( LINENO - 2 ))" 'E_BUINIT__BU_MAIN_MODCONFIG__TEXT_VAR_NOT_INIT';

    # shellcheck disable=SC2059
    printf "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__PrintVariableNameFailedToInitialize__FNCT}\n" "${2}" "${3}" "${1}";
}

## ----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Feel free to define any other needed resources (functions, etc...) here.

## ----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

######################################## DEFINING VARIABLES #######################################

#### TEXT MODE PROCESSING

## COLUMNS AND LINES

# ·····················································································
# Getting the columns number on the current text mode according to its window's length.

__BU_MAIN_TXT_COLS="$(tput cols || stty size | cut -d " " -f2)";

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_COLS' "${__BU_MAIN_TXT_COLS}" 'CMD' "$(BU.Main.ModConfig.Text.PrintTextModeCmdSubs 'cols')" "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "$(( LINENO - 2 ))";

# ···················································································
# Getting the lines number on the current text mode according to its window's height.

__BU_MAIN_TXT_LINES="$(tput lines || stty size | cut -d " " -f1)";

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_LINES' "${__BU_MAIN_TXT_LINES}" 'CMD' "$(BU.Main.ModConfig.Text.PrintTextModeCmdSubs 'lines')" "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "$(( LINENO - 2 ))";

## ----------------------------------------------

## PRINTING CHARACTERS

# ············································································································································································
# Caractère utilisé pour dessiner les lignes des headers. Si vous souhaitez mettre un autre caractère à la place d'un tiret, changez le caractère entre les double guillemets.
# Ne mettez pas plus d'un caractère si vous ne souhaitez pas voir le texte de chaque header apparaître entre plusieurs lignes (une ligne de chaque caractère).

# Caractère à afficher en boucle pour créer une ligne des headers de changement d'étapes.

__BU_MAIN_TXT_CHAR_HEADER_LINE="-";

# ··········································································································································································
# Since the color global variables are defined in the "Colors.conf" file, AND since this file is already sourced before this file, it's safe to call these global variables.

# shellcheck disable=SC2059
BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_CHAR_HEADER_LINE' "${__BU_MAIN_TXT_CHAR_HEADER_LINE}" 'Char' "$(printf "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__BU_MAIN_TXT_CHAR_HEADER_LINE__VAR}" "${__BU_MAIN_COLOR_TXT_FUNCTION}BU.Main.Headers.DrawLine${__BU_MAIN_COLOR_TXT_RESET}")" "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "$(( LINENO - 5 ))";

# ···································································
# Affichage de chevrons avant une chaîne de caractères (par exemple).

__BU_MAIN_TXT_PRINT_TAB=">>>>";

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_PRINT_TAB' "${__BU_MAIN_TXT_PRINT_TAB}" 'String' "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__BU_MAIN_TXT_PRINT_TAB__VAR}" "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "$(( LINENO - 2 ))";

## ----------------------------------------------

## STORING TEXT

# Storing a string got from a specific line (with a function like "BU.Main.Files.GetLineFromTextFile()", from "main/Files.lib" source file).
__BU_MAIN_TXT_STORE_LINE="";

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_STORE_LINE' "${__BU_MAIN_TXT_STORE_LINE}" 'String' "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__BU_MAIN_TXT_STORE_LINE__VAR}" "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "$(( LINENO - 2 ))";

# ·····························································································
# Getting the messages printed with the "${__BU_MAIN_STAT_ECHO}='true'" global status variable.

# Note : since this variable is an array, please leave empty the second argument of the "BU.ModuleInit.DisplayInitGlobalVarsInfos()" function.

__BU_MAIN_TXT_STORE_ECHO_TRUE_MESSAGES_ARRAY=();

# shellcheck disable=SC2059
BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_STORE_ECHO_TRUE_MESSAGES_ARRAY' "" 'Array' "$(printf "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__BU_MAIN_TXT_STORE_ECHO_TRUE_MESSAGES_ARRAY__ARRAY}" "${__BU_MAIN_COLOR_TXT_VAR}\${__BU_MAIN_STAT_ECHO}${__BU_MAIN_COLOR_TXT_RESET}" "${__BU_MAIN_COLOR_TXT_VAR}true${__BU_MAIN_COLOR_TXT_RESET}")" "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "$(( LINENO - 3 ))";

## ----------------------------------------------

## SUBSTRINGS

# ···································
# Splitting a string into substrings.

__BU_MAIN_TXT_ERR_SUBSTR_DELIM=' [/|\] ';

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_ERR_SUBSTR_DELIM' "${__BU_MAIN_TXT_ERR_SUBSTR_DELIM}" "String" "${__BU_MODULE_INIT_MSG__BU_MAIN_MODCONFIG__TEXT__BU_MAIN_TXT_ERR_SUBSTR_DELIM__VAR}" "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "$(( LINENO - 2 ))";

## ----------------------------------------------

## TEXT FORMATTING

# ····································································································································
# Wrapping the code in a function to prevent the command substitutions from being executed, so that bugs are not ignored when sourcing
# configuration files in the loop of the "BU.Main.Initializer.SourceConfig()" function of the main module's initializer file.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - Feel free to call a function if it is needed for your contribution.

function BU.Main.ModConfig.Text.WrapTextFormattingSubSection()
{
    #**** Variables ****

    # The "declare" command automatically makes the variable local.
    declare -i __bu_main_txt_fmt_blink_lineno;
    declare -i __bu_main_txt_fmt_blink_reset_lineno;

    declare -i __bu_main_txt_fmt_bold_lineno;
    declare -i __bu_main_txt_fmt_bold_reset_lineno;

    declare -i __bu_main_txt_fmt_dim_lineno;
    declare -i __bu_main_txt_fmt_dim_reset_lineno;

    declare -i __bu_main_txt_fmt_hidden_lineno;
    declare -i __bu_main_txt_fmt_hidden_reset_lineno;

    declare -i __bu_main_txt_fmt_italic_lineno;
    declare -i __bu_main_txt_fmt_italic_reset_lineno;

    declare -i __bu_main_txt_fmt_reset_lineno;

    declare -i __bu_main_txt_fmt_strikethrough_lineno;
    declare -i __bu_main_txt_fmt_strikethrough_reset_lineno;

    declare -i __bu_main_txt_fmt_underline_lineno;
    declare -i __bu_main_txt_fmt_underline_reset_lineno;

    #**** Code ****

    ## ---------------------------------------------------------------------------------------------------------------------
    # Blink
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_blink_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_BLINK="$(BU.Main.TextFormat.SetTextFormat 'blink' '5' '--no-function')" || {
        printf "\e[25m"; printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_BLINK' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_blink_lineno}";

        BU.ModuleInit.MsgAbort;

        BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_BLINK}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_BLINK' "${__BU_MAIN_TXT_FMT_BLINK}" 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs "blink")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_blink_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Blink reset
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_blink_reset_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_BLINK_RESET="$(BU.Main.TextFormat.SetTextFormat 'sgr0' '25' '--no-function')" || {
        printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_BLINK_RESET' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_blink_reset_lineno}";

        BU.ModuleInit.MsgAbort;

        BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_BLINK_RESET}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_BLINK_RESET' "${__BU_MAIN_TXT_FMT_BLINK_RESET}" 'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs "blink")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_blink_reset_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Bold
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_bold_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_BOLD="$(BU.Main.TextFormat.SetTextFormat 'bold' '1' '--no-function')" || {
        printf "\e[1m"; printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_BOLD' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_bold_lineno}";

        BU.ModuleInit.MsgAbort;

        BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_BOLD}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_BOLD' "${__BU_MAIN_TXT_FMT_BOLD}" 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs "bold")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_bold_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Bold reset
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_bold_reset_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_BOLD_RESET="$(BU.Main.TextFormat.SetTextFormat '' '0' '--no-function')" || {
        printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_BOLD_RESET' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_bold_reset_lineno}";

        BU.ModuleInit.MsgAbort;

        BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_BOLD_RESET}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_BOLD_RESET' "${__BU_MAIN_TXT_FMT_BOLD_RESET}" 'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs "bold")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_bold_reset_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Dim
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_dim_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_DIM="$(BU.Main.TextFormat.SetTextFormat 'dim' '2' '--no-function')" || {
        printf "\e[2m"; printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_DIM' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_dim_lineno}";

        BU.ModuleInit.MsgAbort;

        BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_DIM}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_DIM' "${__BU_MAIN_TXT_FMT_DIM}" 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs  "dim")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_dim_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Dim reset
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_dim_reset_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_DIM_RESET="$(BU.Main.TextFormat.SetTextFormat '' '22' '--no-function')" || {
        printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_DIM_RESET' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_dim_reset_lineno}";

        BU.ModuleInit.MsgAbort;

        BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_DIM_RESET}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_DIM_RESET' "${__BU_MAIN_TXT_FMT_DIM_RESET}" 'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs "dim")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_dim_reset_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Hidden (useful for password typing).
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_hidden_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_HIDDEN="$(BU.Main.TextFormat.SetTextFormat '' '8' '--no-function')" || {
        printf "\e[8m"; printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_HIDDEN' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_hidden_lineno}";

        BU.ModuleInit.MsgAbort; BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_HIDDEN}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_HIDDEN' "${__BU_MAIN_TXT_FMT_HIDDEN}" 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs "hidden")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_hidden_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Hidden reset (DO NOT USE THIS FORMAT BEFORE TYPING A PASSWORD !!!!!)
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_hidden_reset_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_HIDDEN_RESET="$(BU.Main.TextFormat.SetTextFormat '' '28' '--no-function')" || {
        printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_HIDDEN_RESET' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_hidden_reset_lineno}";

        BU.ModuleInit.MsgAbort;

        BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_HIDDEN_RESET}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_HIDDEN_RESET' "${__BU_MAIN_TXT_FMT_HIDDEN_RESET}" 'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs "hidden")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_hidden_reset_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Italic
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_italic_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_ITALIC="$(BU.Main.TextFormat.SetTextFormat 'sitm' '3' '--no-function')" || {
        printf "\e[3m"; printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_ITALIC' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_italic_lineno}";

        BU.ModuleInit.MsgAbort; BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_ITALIC}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_ITALIC' "${__BU_MAIN_TXT_FMT_ITALIC}" 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs "italic")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_italic_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Italic reset
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_italic_reset_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_ITALIC_RESET="$(BU.Main.TextFormat.SetTextFormat 'ritm' '23' '--no-function')" || {
        printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_ITALIC_RESET' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_italic_reset_lineno}";

        BU.ModuleInit.MsgAbort; BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_ITALIC_RESET}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_ITALIC_RESET' "${__BU_MAIN_TXT_FMT_ITALIC_RESET}" 'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs "italic")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_italic_reset_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Reset (total)
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_reset_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_RESET="$(BU.Main.TextFormat.SetTextFormat 'sgr0' '0' '--no-function')" || {
        printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_RESET' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_reset_lineno}";

        BU.ModuleInit.MsgAbort; BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_RESET}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_RESET' "${__BU_MAIN_TXT_FMT_RESET}" 'CMD' "$(BU.Main.ModConfig.Text.PrintAllResetCmdSubs)" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_reset_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Strikethrough
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_strikethrough_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_STRIKETHROUGH="$(BU.Main.TextFormat.SetTextFormat '' '9' '--no-function')" || {
        printf "\e[9m"; printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_STRIKETHROUGH' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_strikethrough_lineno}";

        BU.ModuleInit.MsgAbort; BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi


    };

    printf "%s" "${__BU_MAIN_TXT_FMT_STRIKETHROUGH}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_STRIKETHROUGH' "${__BU_MAIN_TXT_FMT_STRIKETHROUGH}" 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs "strikethrough")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_strikethrough_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Strikethrough reset
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_strikethrough_reset_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET="$(BU.Main.TextFormat.SetTextFormat '' '29' '--no-function')" || {
        printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_strikethrough_reset_lineno}";

        BU.ModuleInit.MsgAbort; BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET' "${__BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET}" 'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs "strikethrough")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_strikethrough_reset_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Underline
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_underline_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_UNDERLINE="$(BU.Main.TextFormat.SetTextFormat 'smul' '4' '--no-function')" || {
        printf "\e[4m"; printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_UNDERLINE' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_underline_lineno}";

        BU.ModuleInit.MsgAbort; BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_UNDERLINE}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_UNDERLINE' "${__BU_MAIN_TXT_FMT_UNDERLINE}" 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs "Underline")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_underline_lineno}";


    ## ---------------------------------------------------------------------------------------------------------------------
    # Underline reset
    ## ---------------------------------------------------------------------------------------------------------------------

    __bu_main_txt_fmt_underline_reset_lineno="$(( LINENO + 2 ))";

    __BU_MAIN_TXT_FMT_UNDERLINE_RESET="$(BU.Main.TextFormat.SetTextFormat 'rmul' '24' '--no-function')" || {
        printf "\n";

        BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_UNDERLINE_RESET' "$(basename "${BASH_SOURCE[0]}")" "${__bu_main_txt_fmt_underline_reset_lineno}";

        BU.ModuleInit.MsgAbort; BU.ModuleInit.AskPrintLog >&2 || { if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi };

        if BU.ModuleInit.IsInScript; then BU.ModuleInit.Exit 1; else return 1; fi
    };

    printf "%s" "${__BU_MAIN_TXT_FMT_UNDERLINE_RESET}";

    BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_FMT_UNDERLINE_RESET' "${__BU_MAIN_TXT_FMT_UNDERLINE_RESET}" 'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs "Underline")" \
        "${__BU_MODULE_INIT_MSG__DISP_INIT_GLOB_VARS_INFO__IS_VAR_DEF_IN_INITIALIZER__MAIN_MODULE_CONF}" "${BASH_SOURCE[0]}" "${FUNCNAME[0]}" "${__bu_main_txt_fmt_underline_reset_lineno}";
}

BU.Main.ModConfig.Text.WrapTextFormattingSubSection || return 1;

## ----------------------------------------------
