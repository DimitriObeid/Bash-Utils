#!/usr/bin/env bash

# Disabling the SC2034 warning from Shellcheck (SC2034: <Variable name> appears unused. Verify use (or export if used externally)), because of the huge number of global variables declared in the configuration files, but only used in the library files.
# shellcheck disable=SC2034

# This configuration file stores text-related global variables.

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

################################## DEFINING RESOURCES - FUNCTIONS #################################

#### TEXT MODE PROCESSING

## COLUMNS AND LINES

# Writing the command substitution text when the text mode is processed.
function BU.Main.ModConfig.Text.PrintTextModeCmdSubs()  { printf "This command substitution executes the « tput $1 » OR the « stty size » commands in order to get the total number of « %s » on the current text mode" "$1"; }

# -----------------------------------------------

## TEXT FORMATTING

# Writing the command substitution text when a formatting is defined.
function BU.Main.ModConfig.Text.PrintFormatCmdSubs()    { printf "This command substitution executes the « BU.Main.Checkings.CheckTextFormat() » function in order to format the text with the defined « %s » text formatting" "$1"; }

# Writing the command substitution text when a resetting is defined.
function BU.Main.ModConfig.Text.PrintResetCmdSubs()     { printf "This command substitution executes the « BU.Main.Checkings.CheckTextFormat() » function in order to reset the text from the « %s » text formatting" "$1"; }

# Writing the command substitution text when a total resetting is defined.
function BU.Main.ModConfig.Text.PrintAllResetCmdSubs()  { printf "This command substitution executes the « BU.Main.Checkings.CheckTextFormat() » function in order to reset the text from the every text formatting"; }

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### OTHER FUNCTIONS

## ERROR FUNCTIONS

# Writing the name of the variable that could not be initialized with it's command substitution.
function BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize() { printf "The « %s » text global variable cannot be initialized because of a problem happening during the call of the associated command substitution" "$2" "$3" "$1"; }

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Feel free to define any other needed resources (functions, etc...) here.

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

######################################## DEFINING VARIABLES #######################################

#### TEXT MODE PROCESSING

## COLUMNS AND LINES

# Getting the columns number on the current text mode according to its window's length.
__BU_MAIN_TXT_COLS="$(tput cols || stty size | cut -d " " -f2)"

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_COLS' "$__BU_MAIN_TXT_COLS" 'CMD' "$(BU.Main.ModConfig.Text.PrintTextModeCmdSubs 'cols')" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))";

# Getting the lines number on the current text mode according to its window's height.
__BU_MAIN_TXT_LINES="$(tput lines || stty size | cut -d " " -f1)"

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_LINES' "$__BU_MAIN_TXT_LINES" 'CMD' "$(BU.Main.ModConfig.Text.PrintTextModeCmdSubs 'lines')" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))";

# -----------------------------------------------

## PRINTING CHARACTERS

# Caractère utilisé pour dessiner les lignes des headers. Si vous souhaitez mettre un autre caractère à la place d'un tiret, changez le caractère entre les double guillemets.
# Ne mettez pas plus d'un caractère si vous ne souhaitez pas voir le texte de chaque header apparaître entre plusieurs lignes (une ligne de chaque caractère).
__BU_MAIN_TXT_CHAR_HEADER_LINE="-"		# Caractère à afficher en boucle pour créer une ligne des headers de changement d'étapes.

# Since the color global variables are defined in the "Colors.conf" file, AND since this file is already sourced before this file, it's safe to call these global variables.
BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_CHAR_HEADER_LINE' "$__BU_MAIN_TXT_CHAR_HEADER_LINE" 'Char' "This global variable stores the default character that composes each lines drawn by the ${__BU_MAIN_COLOR_TXT_FUNCTION}BU.Main.Headers.DrawLine${__BU_MAIN_COLOR_TXT_RESET} function" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-3 ))";

# Affichage de chevrons avant une chaîne de caractères (par exemple).
__BU_MAIN_TXT_PRINT_TAB=">>>>"

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_PRINT_TAB' "$__BU_MAIN_TXT_PRINT_TAB" 'String' "This global variable stores the string which better showcases a string" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))";

# -----------------------------------------------

## STORING TEXT

# Storing a string got from a specific line (with a function like "BU.Main.Files.GetLineFromTextFile()", from "main/Files.lib" source file).
__BU_MAIN_TXT_STORE_LINE=""

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_STORE_LINE' "$__BU_MAIN_TXT_STORE_LINE" 'String' "This global variable stores a string extracted from a line in a file" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))";

# Getting the messages printed with the "$__BU_MAIN_STAT_ECHO='true'" status ?
__BU_MAIN_TXT_STORE_ECHO_TRUE_MESSAGES_ARRAY=();    # Note : since this variable is an array, please leave empty the second argument of the "BU.ModuleInit.DisplayInitGlobalVarsInfos()" function.

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_STORE_ECHO_TRUE_MESSAGES_ARRAY' "" 'Array' "This array stores each error message displayed when the ${__BU_MAIN_COLOR_TXT_VAR}\$__BU_MAIN_STAT_ECHO${__BU_MAIN_COLOR_TXT_RESET} global status variable's value is set to ${__BU_MAIN_COLOR_TXT_VAR}true${__BU_MAIN_COLOR_TXT_RESET}" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))";

# -----------------------------------------------

## SUBSTRINGS

# Splitting a string into substrings.
__BU_MAIN_TXT_ERR_SUBSTR_DELIM=' [/|\] ';

BU.ModuleInit.DisplayInitGlobalVarsInfos '__BU_MAIN_TXT_ERR_SUBSTR_DELIM' "$__BU_MAIN_TXT_ERR_SUBSTR_DELIM" "String" "This global variable stores the string which serves as a delimiter for separating a string into substrings" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))";

# -----------------------------------------------

## TEXT FORMATTING

# Wrapping the code in a function to prevent the command substitutions from being executed, so that bugs are not ignored when sourcing configuration files in the loop of the "BU.Main.Initializer.SourceConfig()" function of the main module's initializer file.
function BU.Main.ModConfig.Text.WrapTextFormattingSubSection()
{
    # Blink
    __BU_MAIN_TXT_FMT_BLINK="$(BU.Main.Checkings.CheckTextFormat                'blink' '5'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_BLINK'                 "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_blink_lineno="$LINENO";
    __BU_MAIN_TXT_FMT_BLINK_RESET="$(BU.Main.Checkings.CheckTextFormat          'sgr0'  '25'            '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_BLINK_RESET'           "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_blink_reset_lineno="$LINENO";

    # Bold
    __BU_MAIN_TXT_FMT_BOLD="$(BU.Main.Checkings.CheckTextFormat                 'bold'  '1'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_BOLD'                  "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_bold_lineno="$LINENO";
    __BU_MAIN_TXT_FMT_BOLD_RESET="$(BU.Main.Checkings.CheckTextFormat           ''      '0'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_BOLD_RESET'            "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_bold_reset_lineno="$LINENO";

    # Dim
    __BU_MAIN_TXT_FMT_DIM="$(BU.Main.Checkings.CheckTextFormat                  'dim'   '2'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_DIM'                   "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_dim_lineno="$LINENO";
    __BU_MAIN_TXT_FMT_DIM_RESET="$(BU.Main.Checkings.CheckTextFormat            ''      '22'            '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_DIM_RESET'             "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_dim_reset_lineno="$LINENO";

    # Hidden (useful for password typing).
    __BU_MAIN_TXT_FMT_HIDDEN="$(BU.Main.Checkings.CheckTextFormat               ''      '8'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_HIDDEN'                "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_hidden_lineno="$LINENO";
    __BU_MAIN_TXT_FMT_HIDDEN_RESET="$(BU.Main.Checkings.CheckTextFormat         ''      '28'            '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_HIDDEN_RESET'          "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_hidden_reset_lineno="$LINENO";

    # Italic
    __BU_MAIN_TXT_FMT_ITALIC="$(BU.Main.Checkings.CheckTextFormat               'sitm' '3'              '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_ITALIC'                "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_italic_lineno="$LINENO";
    __BU_MAIN_TXT_FMT_ITALIC_RESET="$(BU.Main.Checkings.CheckTextFormat         'ritm' '23'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_ITALIC_RESET'          "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_italic_reset_lineno="$LINENO";

    # Reset
    __BU_MAIN_TXT_FMT_RESET="$(BU.Main.Checkings.CheckTextFormat                'sgr0'  '0'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_RESET'                 "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_reset_lineno="$LINENO";

    # Strikethrough
    __BU_MAIN_TXT_FMT_STRIKETHROUGH="$(BU.Main.Checkings.CheckTextFormat        ''      '9'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_STRIKETHROUGH'         "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_strikethrough_lineno="$LINENO";
    __BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET="$(BU.Main.Checkings.CheckTextFormat  ''      '29'            '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET'   "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_strikethrough_reset_lineno="$LINENO";


    # Underline
    __BU_MAIN_TXT_FMT_UNDERLINE="$(BU.Main.Checkings.CheckTextFormat            'smul'  '4'             '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_UNDERLINE'             "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_underline_lineno="$LINENO";
    __BU_MAIN_TXT_FMT_UNDERLINE_RESET="$(BU.Main.Checkings.CheckTextFormat      'rmul'  '24'            '--no-function';)"  || { printf "%s\n" "";  BU.Main.ModConfig.Text.PrintVariableNameFailedToInitialize '__BU_MAIN_TXT_FMT_UNDERLINE_RESET'       "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; return 1; }; local __bu_main_txt_fmt_underline_reset_lineno="$LINENO";


    # Blink
    printf "%s" "$__BU_MAIN_TXT_FMT_BLINK";                 BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_BLINK'                   "$__BU_MAIN_TXT_FMT_BLINK"                  'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs  "blink")"           "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_blink_lineno";
    printf "%s" "$__BU_MAIN_TXT_FMT_BLINK_RESET";           BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_BLINK_RESET'             "$__BU_MAIN_TXT_FMT_BLINK_RESET"            'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs   "blink")"           "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_blink_reset_lineno";

    # Bold
    printf "%s" "$__BU_MAIN_TXT_FMT_BOLD";                  BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_BOLD'                    "$__BU_MAIN_TXT_FMT_BOLD"                   'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs  "bold")"            "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_bold_lineno";
    printf "%s" "$__BU_MAIN_TXT_FMT_BOLD_RESET";            BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_BOLD_RESET'              "$__BU_MAIN_TXT_FMT_BOLD_RESET"             'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs   "bold")"            "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_bold_reset_lineno";

    # Dim
    printf "%s" "$__BU_MAIN_TXT_FMT_DIM";                   BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_DIM'                     "$__BU_MAIN_TXT_FMT_DIM"                    'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs  "dim")"             "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_dim_lineno";
    printf "%s" "$__BU_MAIN_TXT_FMT_DIM_RESET";             BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_DIM_RESET'               "$__BU_MAIN_TXT_FMT_DIM_RESET"              'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs   "dim")"             "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_dim_reset_lineno";

    # Hidden (useful for password typing).
    printf "%s" "$__BU_MAIN_TXT_FMT_HIDDEN";                BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_HIDDEN'                  "$__BU_MAIN_TXT_FMT_HIDDEN"                 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs  "hidden")"          "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_hidden_lineno";
    printf "%s" "$__BU_MAIN_TXT_FMT_HIDDEN_RESET";          BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_HIDDEN_RESET'            "$__BU_MAIN_TXT_FMT_HIDDEN_RESET"           'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs   "hidden")"          "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_hidden_reset_lineno";

    # Italic
    printf "%s" "$__BU_MAIN_TXT_FMT_ITALIC";                BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_ITALIC'                  "$__BU_MAIN_TXT_FMT_ITALIC"                 'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs  "italic")"          "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_italic_lineno";
    printf "%s" "$__BU_MAIN_TXT_FMT_ITALIC_RESET";          BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_ITALIC_RESET'            "$__BU_MAIN_TXT_FMT_ITALIC_RESET"           'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs   "italic")"          "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_italic_reset_lineno";

    # Reset
    printf "%s" "$__BU_MAIN_TXT_FMT_RESET";                 BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_RESET'                   "$__BU_MAIN_TXT_FMT_RESET"                  'CMD' "$(BU.Main.ModConfig.Text.PrintAllResetCmdSubs)"                  "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_reset_lineno";

    # Strikethrough
    printf "%s" "$__BU_MAIN_TXT_FMT_STRIKETHROUGH";         BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_STRIKETHROUGH'           "$__BU_MAIN_TXT_FMT_STRIKETHROUGH"          'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs  "strikethrough")"   "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_strikethrough_lineno";
    printf "%s" "$__BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET";   BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET'     "$__BU_MAIN_TXT_FMT_STRIKETHROUGH_RESET"    'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs   "strikethrough")"   "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_strikethrough_reset_lineno";

    # Underline
    printf "%s" "$__BU_MAIN_TXT_FMT_UNDERLINE";             BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_UNDERLINE'               "$__BU_MAIN_TXT_FMT_UNDERLINE"              'CMD' "$(BU.Main.ModConfig.Text.PrintFormatCmdSubs  "Underline")"       "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_underline_lineno";
    printf "%s" "$__BU_MAIN_TXT_FMT_UNDERLINE_RESET";       BU.ModuleInit.DisplayInitGlobalVarsInfos    '__BU_MAIN_TXT_FMT_UNDERLINE_RESET'         "$__BU_MAIN_TXT_FMT_UNDERLINE_RESET"        'CMD' "$(BU.Main.ModConfig.Text.PrintResetCmdSubs   "Underline")"       "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__bu_main_txt_fmt_underline_reset_lineno";
}

BU.Main.ModConfig.Text.WrapTextFormattingSubSection || return 1;

# -----------------------------------------------
