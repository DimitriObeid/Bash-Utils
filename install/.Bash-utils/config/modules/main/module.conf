#!/usr/bin/env bash

# Disabling the SC2034 warning from Shellcheck (SC2034: <Variable name> appears unused. Verify use (or export if used externally)), because of the huge number of variables declared in the configuration files, but only used in the library files.
# shellcheck disable=SC2034

# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BASH-UTILS VARIABLES

## BASH-UTILS DIRECTORIES PATHS

# Bash Utils root directory.

# For a better environment integration, it is highly advised to store the path in a file
# in the configurations directory, and to call the "cat" command to display its value.

if [ -f "$__BU_MODULE_UTILS_LIB_ROOT_DIR_FILE_PATH" ]; then
	__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH="$__BU_MODULES_UTILS_LIB_ROOT_DIR_FILE_PATH";

# Including the same file, if it was generated by the "install_and_update.sh" file when executed with root privileges
# (failsafe for the users who cannot execute this file with these privileges, if the same file than the one above exists
# and is (still) owned by the super-user or its group, which means that this file cannot be modified normally, and may not be readable).
elif [ -f "$__BU_MODULES_UTILS_LIB_ROOT_DIR_ROOT_FILE_PATH" ]; then
	__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH="$__BU_MODULES_UTILS_LIB_ROOT_DIR_ROOT_FILE_PATH";

# The possible absence of this file is managed below.
fi

# Checking if the "Bash-utils-root-val.path" file exists AND if this file contains a string (the wanted string here is the library's root folder path).
if [ -f "$__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH" ] && [ -s "$__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH" ]; then
	__BU_MAIN_ROOT_DIR_PATH="$(cat "$__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH")";

	# Checking if the library's root folder path written in this file is valid.
	if [ ! -d "$__BU_MAIN_ROOT_DIR_PATH" ]; then
		echo >&2; echo "IN « ${BASH_SOURCE[0]} », LINE $LINENO --> ERROR !" >&2; echo >&2

		echo "The Bash Utils library's root folder's path written in the « $__BU_MODULES_UTILS_LIB_FILE_PATH » file was not found in your hard drive." >&2; echo >&2;
		echo "The currently written path is « $__BU_MAIN_ROOT_DIR_PATH »" >&2; echo >&2

		echo "Please check the path recorded in this file for typos if you typed it by yourself, or verify where you've stored this root folder." >&2; echo >&2;

		BU::ModuleInit::MsgAbort;

		BU::ModuleInit::AskPrintLog;

		exit 1;
	fi

# Checking if the "Bash-utils-root-val.path" exists AND if this file is empty (no library's path specified).
elif [ -f "$__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH" ] && [ ! -s "$__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH" ]; then
	echo >&2; echo "IN « ${BASH_SOURCE[0]} », LINE $LINENO --> WARNING !" >&2; echo >&2

	echo "The Bash Utils's root folder's path storage file « $__BU_MAIN_ROOT_DIR_PATH » exists, but is empty." >&2; echo >&2;
	echo "Please write the path of the library's root folder inside this file, manually or with the installer file." >&2; echo >&2;

	BU::ModuleInit::MsgAbort;

	BU::ModuleInit::AskPrintLog;

	exit 1

# Checking if the current user cannot read the "Bash-utils-root-val.path" (file owned by the "root" user).
elif [ -f "$__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH" ] && [ ! -r "$__BU_MODULES_UTILS_LIB_ROOT_DIR_FILE_PATH" ]; then
    echo >&2; echo "IN « ${BASH_SOURCE[0]} », LINE $LINENO --> ERROR !" >&2; echo >&2;

    echo "You don't have the right to read the Bash Utils's root folder's path storage file « $__BU_MAIN_ROOT_DIR_PATH »" >&2;
    echo "It means that you've created this file with the super-user privileges, by hand or with the installation script (in this case, something may have be wrong)" >&2;  echo >&2;

    echo "Please execute this script as root user, or change the ownership of the « $__BU_MAIN_ROOT_DIR_PATH » file, or create a new file, and rename the file to find in the « $__BU_MODULE_UTILS_INITALIZER_PATH » file";
    echo "If you opt for the last solution, please find the line containing the string « __BU_MODULES_UTILS_LIB_ROOT_DIR_FILE_NAME= » in the « DEFINING GLOBAL VARIABLES » subsection"; echo >&2;

    BU::ModuleInit::MsgAbort;

	BU::ModuleInit::AskPrintLog;

    exit 1;

# Handling the absence of the "Bash-utils-root-val.path" file.
elif [ ! -f "$__BU_MAIN_ROOT_DIR_PATH_STORAGE_FILE_PATH" ]; then
	echo >&2; echo "IN « ${BASH_SOURCE[0]} », LINE $LINENO --> ERROR !" >&2; echo >&2;

	echo "The Bash Utils's root folder's path storage file « $__BU_MAIN_ROOT_DIR_PATH » doesn't exists" >&2; echo >&2;
	echo "Please create this file and write the path of the library's root folder inside this file, manually or with the installer file." >&2; echo >&2;

	BU::ModuleInit::MsgAbort;

	BU::ModuleInit::AskPrintLog;

	exit 1;
fi

# Bash Utils sub-folders paths.
__BU_MAIN_MODULE_BIN_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_ROOT_DIR_PATH" "bin")";				# Bash Utils binary files folder            |	Default parent folder --> "$__BU_MAIN_ROOT_DIR_PATH/"
__BU_MAIN_MODULE_CONF_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MODULE_UTILS_CONFIG_MODULES_DIR" "$(BU::ModuleInit::GetModuleName "${BASH_SOURCE[0]}")")";	# Bash Utils configuration files folder		|	Default parent folder --> "$__BU_MAIN_ROOT_DIR_PATH"
__BU_MAIN_MODULE_DOCS_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_ROOT_DIR_PATH" "docs")";			# Bash Utils documentation folder			|	Default parent folder --> "$__BU_MAIN_ROOT_DIR_PATH/"
__BU_MAIN_MODULE_LIB_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_ROOT_DIR_PATH" "lib")";				# Bash Utils library root directory	        |	Default parent folder --> "$__BU_MAIN_ROOT_DIR_PATH/"
__BU_MAIN_MODULE_RES_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_ROOT_DIR_PATH" "res")";				# Bash Utils resources directory            |   Default parent folder --> "$__BU_MAIN_ROOT_DIR_PATH/"

# Bash Utils dev-tools paths.
__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_RES_DIR_PATH" "dev-tools")"              # Bash Utils development tools root directory          	|	Default parent folder --> "$__BU_MAIN_MODULE_RES_DIR_PATH/"
__BU_MAIN_MODULE_DEVTOOLS_BIN="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH" "dev-bin")"				# Bash Utils development tools binary files folder		|	Default parent folder --> "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH/"
__BU_MAIN_MODULE_DEVTOOLS_DSK="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH" "dev-desktop")"			# Bash Utils development tools desktop files folder		|	Default parent folder --> "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH/"
__BU_MAIN_MODULE_DEVTOOLS_IMG="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH" "dev-img")"				# Bash Utils development tools desktop icons folder		|	Default parent folder --> "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH/"
__BU_MAIN_MODULE_DEVTOOLS_SRC="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH" "dev-src")"				# Bash Utils development tools source files             |	Default parent folder --> "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH/"
__BU_MAIN_MODULE_DEVTOOLS_TRANSL="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH" "dev-translations")"	# Bash Utils development tools translation files folder |	Default parent folder --> "$__BU_MAIN_MODULE_DEVTOOLS_ROOT_DIR_PATH/"

# "lib" folder's content.
__BU_MAIN_MODULE_LIB_FUNCTS_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_LIB_DIR_PATH" "functions")"				# Bash Utils functions directory			|	Default parent folder --> "$__BU_MAIN_ROOT_DIR_PATH/"
__BU_MAIN_MODULE_LIB_MOD_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_LIB_FUNCTS_DIR_PATH" "$(BU::ModuleInit::GetModuleName "${BASH_SOURCE[0]}")")"			# Bash Utils library module's directory	|	Default parent folder --> "$__BU_MAIN_MODULE_LIB_FUNCTS_DIR_PATH/"
__BU_MAIN_MODULE_LIB_LANG_DIR_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_LIB_DIR_PATH" "lang")"						# Bash Utils translations files directory	|   Default parent folder --> "$__BU_MAIN_MODULE_LIB_DIR_PATH/"

# -----------------------------------------------

## BASH UTIILS FILES PATHS

# "config" folder's content.
__BU_MAIN_MODULE_CONF_COLORS_FILE_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_CONF_DIR_PATH" "Colors.conf")"			# Bash Utils color encoding variables configuration file.
__BU_MAIN_MODULE_CONF_INIT_FILE_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_CONF_DIR_PATH" "Project.conf")"			# Project's initialization variables.
__BU_MAIN_MODULE_CONF_LANG_ISO_CODE_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_CONF_DIR_PATH" "LangISOCode.conf")"	# Project's language code, overriding the language detection.
__BU_MAIN_MODULE_CONF_LANG_CSV_CODE_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_CONF_DIR_PATH" "LangCSVCode.conf")"	# Project's translation CSV file language row code
__BU_MAIN_MODULE_CONF_STATUS_FILE_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_CONF_DIR_PATH" "Status.conf")"			# Bash Utils status variables configuration file.
__BU_MAIN_MODULE_CONF_TEXT_FILE_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_CONF_DIR_PATH" "Text.conf")"				# Bash Utils text variables configuration file.
__BU_MAIN_MODULE_CONF_TIME_FILE_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_CONF_DIR_PATH" "Time.conf")"				# Bash Utils time variables configuration file.

# Bash Utils initializer path.
__BU_MAIN_MODULE_LIB_FILE_INITIALIZER_FILE_PATH="$(BU::ModuleInit::FindPath "$__BU_MODULE_UTILS_MODULES_DIR" "Initializer.sh")"	# Module's initializer file.

# Bash Utils translations path.
__BU_MAIN_MODULE_TRANSLATION_FILE_PATH="$(BU::ModuleInit::FindPath "$__BU_MAIN_MODULE_LIB_LANG_DIR_PATH" "lang.csv")"				# Bash Utils translations file.

# "functions" folder's sub-folders content.
__BU_MAIN_MODULE_FUNCTIONS_FILES_PATH=("$__BU_MAIN_MODULE_LIB_MOD_DIR_PATH/"*.lib)

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### INITALIZATION VARIABLES

## INITIALIZATION VARIABLES DECLARATIONS

# Array of strings, to display in the log file with the date.
__BU_MAIN_MODULE_STR_ARRAY_LOG_DATE=()
__BU_MAIN_MODULE_STR_ARRAY_LOG_NODATE="$(for val in "${__BU_MAIN_MODULE_STR_ARRAY_LOG_DATE[@]}"; do v_cutstr="${val##*] }" && echo "$v_cutstr"; done)"

# -----------------------------------------------

## LIBRARY INITALIZATION VARIABLES DECLARATIONS

# Defining an associative array to store each sourced library file's path.
__BU_MAIN_MODULE_LIB_FILES_PATH_ARRAY=()

# -----------------------------------------------

## CONFIGURATION FILES INITALIZATION VARIABLES DECLARATIONS

# Defining an associative array to store each sourced configuration file's path.
__BU_MAIN_MODULE_CONFIG_FILES_PATH_ARRAY=()

# Storing the configuration files path variable values into an array to source, print and add easier into the "a_config_files_path" associative array.
# Those files are, respectly, the :
#   - Project's and initialization process global variable
#   - Project's status variable
#   - Text color
#   - Text decoration, formatting and printing variable
#   - Time variable

# The "ProjectInit.conf" file MUST be sourced first, then the "ProjectStatus.conf" file MUST be sourced in the second.
# Unless otherwise stated, the other configuration files may be sourced in any order.

__BU_MAIN_MODULE_LIST_CONFIG_FILES_PATH_ARRAY=("$__BU_MAIN_MODULE_CONF_INIT_FILE_PATH" \
    "$__BU_MAIN_MODULE_CONF_STATUS_FILE_PATH" \
    "$__BU_MAIN_MODULE_CONF_COLORS_FILE_PATH" \
    "$__BU_MAIN_MODULE_CONF_TEXT_FILE_PATH" \
    "$__BU_MAIN_MODULE_CONF_TIME_FILE_PATH")

# -----------------------------------------------

## END OF Bash-utils GLOBAL VARIABLES DEFINITION
