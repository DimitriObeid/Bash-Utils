#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Mouse.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's mouse with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a mouse is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Mouse.IsMousePlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's mouse-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Mouse.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Printer.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about a printer with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :



## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Audio.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the audio-related hardware functionalities of Windows.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_HARDWARE_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's audio-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Audio.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : FloppyDisk.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's floppy disk(s) with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·························································································
# Getting every informations about the computer's floppy disks-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.FloppyDisk.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : USB.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's USB port(s) and stick(s) with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's USB-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.USB.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Mouse.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's mouse with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a mouse is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Mouse.IsMousePlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's mouse-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Mouse.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Ports.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's physical ports with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's ports-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.GetHardwareInfos()
{
    return 0;
}

# ······································
# Getting the total number of USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.GetUSBPortsNumber()
{
    return 0;
}

# ··········································
# Getting the number of available USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.GetAvailableUSBPortsNumber()
{
    return 0;
}

# ·····································
# Getting the number of used USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.GetUsedUSBPortsNumber()
{
    return 0;
}

# ················································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfOpticalDiscDriveExists()
{
    return 0;
}

# ········································································
# Checking if an optical disc drive is mounted, and if no disc is .

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfOpticalDiscDriveIsEmpty()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ················································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfOpticalDiscDriveTrayIsClosed()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······················································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfOpticalDiscDriveTrayIsOpen()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······················································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfOpticalDiscDriveContainsdisc()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······················································
# Checking if an SD card port is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfSDCardReaderIsMounted()
{
    return 0;
}

# ······························
# Checking if a VGA port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfVGAPortExists()
{
    return 0;
}

# ···············································
# Checking if the existing VGA port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfVGAPortAvailable()
{
    return 0;
}

# ································
# Checking if an HDMI port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfHDMIPortExists()
{
    return 0;
}

# ················································
# Checking if the existing HDMI port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfHDMIPortAvailable()
{
    return 0;
}

# ··································
# Checking if a joystick is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Ports.CheckIfJoystickIsPlugged()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Ports.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's hard drive with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······················································································
# Getting every informations about the computer's hard drive-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetHardwareInfos()
{
    return 0;
}

# ·································
# Getting the size of a hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetDriveSize()
{
    return 0;
}

# ······································································
# Getting the total size by adding up several or every hard drives size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.AddUpDrivesSizes()
{
    return 0;
}

# ··················································································································
# Creating a new partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.CreateNewPartition()
{
    return 0;
}

# ··············································································································
# Deleting a partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.DeletePartition()
{
    return 0;
}

# ··········································
# Getting the number of existing partitions.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetPartitionsNumber()
{
    return 0;
}

# ·····················································································
# Getting the number of existing partitions by size (more or less than a defined size).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetPartitionsNumberBySize()
{
    return 0;
}

# ·········································································
# Getting the number of existing partitions according to their file system.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetPartitionsNumberByFS()
{
    return 0;
}

# ································
# Getting the size of a partition.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetPartitionSize()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HARD DRIVES (HDDs / SSDs)

## CHECKING THE HARD DRIVE(S) INFORMATIONS

# ·············································
# Checking if the targeted hard drive is a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.IsHDD()
{
    return 0;
}

# ·············································
# Checking if the targeted hard drive is a SDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.IsSSD()
{
    return 0;
}

# ········································
# Checking how many hard drives are plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.CountPluggedDrives()
{
    return 0;
}

# ··························································
# Counting the number of HDDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.CountHDD()
{
    return 0;
}

# ··························································
# Counting the number of SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.CountSSD()
{
    return 0;
}

# ···································································
# Counting the number of HDDs and SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.CountHDD+SSD()
{
    return 0;
}

## ==============================================

## GETTING THE HARD DRIVE(S) INFORMATIONS

# ····································
# Getting the rotation speed of a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetRotationSpeed()
{
    return 0;
}

# ·····································
# Getting the vendor of the hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetVendor()
{
    return 0;
}

# ····································
# Getting the disk's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Drive.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Memory.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's memory with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

## CHECKING THE COMPUTER'S MEMORY HARDWARE DATA

# ································································
# Checking if the type of the currently used memory stick is DDR4.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Memory.CheckIfMemoryDDR4()
{
    BU.Hardware.Windows.Memory.GetMemoryType 'DDR4' || return "${?}"; return 0;
}

## ==============================================

## GETTING THE COMPUTER'S MEMORY HARDWARE DATA

# ···················································································
# Getting every informations about the computer's memory-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Memory.GetHardwareInfos()
{
    return 0;
}

# ·······································
# Getting the number of RAM slots in use.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Memory.GetUsedRAMSlotsNumber()
{
    return 0;
}

# ················································
# Getting the number of RAM slots available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Memory.GetAvailableRamSlotsNumber()
{
    return 0;
}

# ····························
# Getting memory max capacity.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Memory.GetMaxMemoryCapacity()
{
    return 0;
}

# ····················
# Getting memory type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Memory.GetMemoryType()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : VGA.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's VGA port with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's VGA-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.VGA.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : HDMI.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's HDMI port with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·················································································
# Getting every informations about the computer's HDMI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.HDMI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Screen.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's monitor with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Screen.IsMonitorPlugged()
{
    return 0;
}

# ········································
# Checking if an extra monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Screen.IsExtraMonitorPlugged()
{
    return 0;
}

## ==============================================

## GETTING THE SCREEN'S DATA

# ···················································································
# Getting every informations about the computer's screen-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Screen.GetHardwareInfos()
{
    return 0;
}

# ······························
# Getting the screen resolution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Screen.GetResolution()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : General.Windows.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

#


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···············································
# Getting every computer's hardware informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.Windows.Audio.GetHardwareInfos()          -> Hardware -> Audio.Windows.lib
#   - BU.Hardware.Windows.Battery.GetHardwareInfos()        -> Hardware -> Battery.Windows.lib
#   - BU.Hardware.Windows.Bluetooth.GetHardwareInfos()      -> Hardware -> Bluetooth.Windows.lib
#   - BU.Hardware.Windows.CPU.GetHardwareInfos()            -> Hardware -> CPU.Windows.lib
#   - BU.Hardware.Windows.Drive.GetHardwareInfos()          -> Hardware -> Drive.Windows.lib
#   - BU.Hardware.Windows.Fan.GetHardwareInfos()            -> Hardware -> Fan.Windows.lib
#   - BU.Hardware.Windows.FloppyDisk.GetHardwareInfos()     -> Hardware -> FloppyDisk.Windows.lib
#   - BU.Hardware.Windows.General.GetHardwareInfos()        -> Hardware -> General.Windows.lib (this file)
#   - BU.Hardware.Windows.GPU.GetHardwareInfos()            -> Hardware -> GPU.Windows.lib
#   - BU.Hardware.Windows.HDMI.GetHardwareInfos()           -> Hardware -> HDMI.Windows.lib
#   - BU.Hardware.Windows.Keyboard.GetHardwareInfos()       -> Hardware -> Keyboard.Windows.lib
#   - BU.Hardware.Windows.Memory.GetHardwareInfos()         -> Hardware -> Memory.Windows.lib
#   - BU.Hardware.Windows.Motherboard.GetHardwareInfos()    -> Hardware -> Motherboard.Windows.lib
#   - BU.Hardware.Windows.Mouse.GetHardwareInfos()          -> Hardware -> Mouse.Windows.lib
#   - BU.Hardware.Windows.PCI.GetHardwareInfos()            -> Hardware -> PCI.Windows.lib
#   - BU.Hardware.Windows.Ports.GetHardwareInfos()          -> Hardware -> Ports.Windows.lib
#   - BU.Hardware.Windows.Screen.GetHardwareInfos()         -> Hardware -> Screen.Windows.lib
#   - BU.Hardware.Windows.SDCard.GetHardwareInfos()         -> Hardware -> SDCard.Windows.lib
#   - BU.Hardware.Windows.Touchpad.GetHardwareInfos()       -> Hardware -> Touchpad.Windows.lib
#   - BU.Hardware.Windows.USB.GetHardwareInfos()            -> Hardware -> USB.Windows.lib
#   - BU.Hardware.Windows.VGA.GetHardwareInfos()            -> Hardware -> VGA.Windows.lib

# shellcheck disable=
function BU.Hardware.Windows.General.GetAllHardwareInfos()
{
    BU.Hardware.Windows.Audio.GetHardwareInfos;
    BU.Hardware.Windows.Battery.GetHardwareInfos;
    BU.Hardware.Windows.Bluetooth.GetHardwareInfos;

    BU.Hardware.Windows.CPU.GetHardwareInfos;
    BU.Hardware.Windows.Drive.GetHardwareInfos;
    BU.Hardware.Windows.Fan.GetHardwareInfos;

    BU.Hardware.Windows.FloppyDisk.GetHardwareInfos;
    BU.Hardware.Windows.General.GetHardwareInfos;
    BU.Hardware.Windows.GPU.GetHardwareInfos;

    BU.Hardware.Windows.HDMI.GetHardwareInfos;
    BU.Hardware.Windows.Keyboard.GetHardwareInfos;
    BU.Hardware.Windows.Memory.GetHardwareInfos;

    BU.Hardware.Windows.Motherboard.GetHardwareInfos;
    BU.Hardware.Windows.Mouse.GetHardwareInfos;
    BU.Hardware.Windows.PCI.GetHardwareInfos;

    BU.Hardware.Windows.Ports.GetHardwareInfos;
    BU.Hardware.Windows.Screen.GetHardwareInfos;
    BU.Hardware.Windows.SDCard.GetHardwareInfos;

    BU.Hardware.Windows.Touchpad.GetHardwareInfos;
    BU.Hardware.Windows.USB.GetHardwareInfos;
    BU.Hardware.Windows.VGA.GetHardwareInfos;

    return 0;
}

# ················································································
# Getting every general hardware components (like the computer's chassis, etc...).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.Windows.General.GetChassis()      -> Hardware -> General.Windows.lib (this file)
#   - BU.Hardware.Windows.General.GetChassisType()  -> Hardware -> General.Windows.lib (this file)
#   - BU.Hardware.Windows.General.GetMachineID()    -> Hardware -> General.Windows.lib (this file)
#   - BU.Hardware.Windows.General.GetBootID()       -> Hardware -> General.Windows.lib (this file)

# shellcheck disable=
function BU.Hardware.Windows.General.GetHardwareInfos()
{
    BU.Hardware.Windows.General.GetChassis;
    BU.Hardware.Windows.General.GetChassisType;
    BU.Hardware.Windows.General.GetMachineID;
    BU.Hardware.Windows.General.GetBootID;

    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······························
# Getting the computer's chassis.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.General.GetChassis()
{
    return 0;
}

# ····································
# Getting the computer's chassis type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.General.GetChassisType()
{
    return 0;
}

# ·························
# Getting the machine's ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.General.GetMachineID()
{
    return 0;
}

# ····················
# Getting the boot ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.General.GetBootID()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Bluetooth.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's Bluetooth module with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

## ==============================================

##
## DEBUG ID :

# ······················································································
# Getting every informations about the computer's Bluetooth-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Bluetooth.GetHardwareInfos()
{
    return 0;
}
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : PCI.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's PCI(e) expansion buses with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's PCI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.PCI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Battery.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's battery with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### BATTERY CHECKINGS

##

# ···········································
# Checking if the computer is not AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.IsNotOnAC()
{
    return 0;
}

# ·······································
# Checking if the computer is AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.IsOnAC()
{
    return 0;
}

# ····································
# Checking if the battery has history.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.HasHistory()
{
    return 0;
}

# ··········································
# Checking if the computer has power supply.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.HasPowerSupply()
{
    return 0;
}

# ·······································
# Checking if the battery has statistics.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.HasStatistics()
{
    return 0;
}

# ···································
# Checking if the battery is present.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.IsPresent()
{
    return 0;
}

# ·········································
# Checking if the computer is rechargeable.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.IsRechargeable()
{
    return 0;
}

# ····················································································
# Getting every informations about the computer's battery-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetHardwareInfos()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetCapacity()
{
    return 0;
}

# ···························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetEnergy()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetEnergyEmpty()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetEnergyFull()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetEnergyFullDesign()
{
    return 0;
}

# ··································
# Getting the battery's energy rate.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetEnergyRate()
{
    return 0;
}

# ····························
# Getting the battery's model.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetModel()
{
    return 0;
}

# ························
# Getting the battery's

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetNativePath()
{
    return 0;
}

# ·································
# Getting the battery's percentage.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetPercentage()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetSerialNumber()
{
    return 0;
}

# ····························
# Getting the battery's state.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetState()
{
    return 0;
}

# ·································
# Getting the battery's technology.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetTechnology()
{
    return 0;
}

# ·················································
# Getting the time remaining until the full charge.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetTimeBeforeFullCharge()
{
    return 0;
}

# ·····························
# Getting the battery's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetVendor()
{
    return 0;
}

# ··································
# Getting the battery serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetVoltage()
{
    return 0;
}

# ··································
# Getting the battery warning level.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Battery.GetWarningLevel()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : SDCard.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's SD card(s) with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's SD cards-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.SDCard.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Touchpad.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's touchpad with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··································
# Checking if a touchpad is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Touchpad.IsTouchpadPlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's touchpad-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Touchpad.GetHardwareInfos()
{
    return 0;
}

# ···································
# Getting the vendor of the touchpad.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Touchpad.GetVendor()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : GPU.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's GPU with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GPU'S GENERAL INFORMATIONS

##

# ················································································
# Getting every informations about the computer's GPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.GPU.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's CPU with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE



## ==============================================

## GETTING GENERAL DATA

# ················································································
# Getting every informations about the computer's CPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetHardwareInfos()
{
    return 0;
}

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetInfos()                 { if BU.Main.CMDS.GetCommandPath 'lscpu'; then lscpu; fi }

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetVendor()                { if BU.Main.CMDS.GetCommandPath 'lshw'; then BU.Main.Echo.Msg "$(lshw -class processor | grep )" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE

## CHECKING THE ARCHITECTURE OF THE CPU(s)

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.Is32Bits()
{
    return 0;
}

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.Is64Bits()
{
    return 0;
}

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchAArch32()
{
    return 0;
}

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchAArch64()
{
    return 0;
}

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchARM32()
{
    return 0;
}

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchARM64()
{
    return 0;
}

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchAMD64()
{
    return 0;
}

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchi386()
{
    return 0;
}

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchPPC()
{
    return 0;
}

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchMIPS()
{
    return 0;
}

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsArchRISCV()
{
    return 0;
}

## ==============================================

## GETTING THE CPU(s) ARCHITECTURE'S DATA

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetArch()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES

## CHECKING THE CPU(s) CORES DATA

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.IsMonocore()
{
    return 0;
}

## ==============================================

## GETTING THE CPU(s) CORES DATA

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetCoresNumber()
{
    return 0;
}

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetLogicalCoresNumber()
{
    return 0;
}

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetPhysicalCoresNumber()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK

## CHECKING THE CPU'S CLOCK INFORMATIONS

## ==============================================

## GETTING THE CPU'S CLOCK DATA

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetClockFrequency()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :




## ==============================================

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetAdressSizes()
{
    return 0;
}

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.CPU.GetSocketsNumber()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Keyboard.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's keyboard with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····································
# Checking if the keyboard is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Keyboard.IsKeyboardPlugged()
{
    return 0;
}

# ·····················································································
# Getting every informations about the computer's keyboard-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Keyboard.GetHardwareInfos()
{
    return 0;
}

# ·············································
# Getting the current layout (AZERTY | QWERTY).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Keyboard.GetLayout()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Motherboard.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's motherboard with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····························································
# Getting every informations about the computer's motherboard.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Motherboard.GetHardwareInfos()
{
    return 0;
}

# ···········································
# Getting the motherboard's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Motherboard.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Fan.Windows.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the PC's fan with the help of the WSL / Windows system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's fan-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Windows.Fan.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Audio.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the audio-related hardware functionalities of each supported operating systems.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_HARDWARE_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's audio-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Audio.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Bluetooth.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's Bluetooth module with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ······················································································
# Getting every informations about the computer's Bluetooth-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Bluetooth.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : HDMI.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's HDMI port with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·················································································
# Getting every informations about the computer's HDMI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.HDMI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : FloppyDisk.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's floppy disk(s) with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·························································································
# Getting every informations about the computer's floppy disks-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.FloppyDisk.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : SDCard.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's SD card(s) with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

## ==============================================

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's SD cards-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.SDCard.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : GPU.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's GPU with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GPU'S GENERAL INFORMATIONS

##

# ·································
# Checking if the GPU is a AMD GPU.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.IsAMD()
{
    return 0;
}

# ····································
# Checking if the GPU is a Nvidia GPU.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.IsNvidia()
{
    return 0;
}

# ········································
# Checking if the GPU is a Nvidia GTX GPU.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.IsNvidiaGTX()
{
    return 0;
}

# ········································
# Checking if the GPU is a Nvidia RTX GPU.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.IsNvidiaRTX()
{
    return 0;
}

# ····················································
# Checking if the GPU has a VGA compatible controller.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.IsVGACompatible()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's GPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetHardwareInfos()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ··································
# Getting the CPU's bus information.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetBusInfo()
{
    return 0;
}

# ·······························
# Getting the CPU's capabilities.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetCapabilities()
{
    return 0;
}

# ··································
# Getting the CPU's clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetClockFrequency()
{
    return 0;
}

# ································
# Getting the CPU's configuration.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetConfiguration()
{
    return 0;
}

# ······························
# Getting the CPU's description.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetDescription()
{
    return 0;
}

# ·······························
# Getting the CPU's logical name.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetLogicalName()
{
    return 0;
}

# ······························
# Getting the CPU's physical ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetPhysicalID()
{
    return 0;
}

# ·······························
# Getting the CPU's product type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetProductType()
{
    return 0;
}

# ····························
# Getting the CPU's resources.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetResources()
{
    return 0;
}

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetVendor()
{
    return
}

# ·······································
# Getting the CPU's width (32 / 64 bits).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.GPU.GetWidth()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's CPU with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE



## ==============================================

## GETTING GENERAL DATA

# ················································································
# Getting every informations about the computer's CPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetHardwareInfos()
{
    return 0;
}

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetInfos()
{
    return 0;
}

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetVendor()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE

## CHECKING THE ARCHITECTURE OF THE CPU(s)

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.Is32Bits()
{
    return 0;
}

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.Is64Bits()
{
    return 0;
}

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchAArch32()
{
    return 0;
}

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchAArch64()
{
    return 0;
}

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchARM32()
{
    return 0;
}

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchARM64()
{
    return 0;
}

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchAMD64()
{
    return 0;
}

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchi386()
{
    return 0;
}

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchPPC()
{
    return 0;
}

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchMIPS()
{
    return 0;
}

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchRISCV()
{
    return 0;
}

## ==============================================

## GETTING THE CPU(s) ARCHITECTURE'S DATA

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetArch()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES

## CHECKING THE CPU(s) CORES DATA

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsMonocore()
{
    return 0;
}

## ==============================================

## GETTING THE CPU(s) CORES DATA

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetCoresNumber()
{
    return 0;
}

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetLogicalCoresNumber()
{
    return 0;
}

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetPhysicalCoresNumber()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK

## CHECKING THE CPU'S CLOCK INFORMATIONS

## ==============================================

## GETTING THE CPU'S CLOCK DATA

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetClockFrequency()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :




## ==============================================

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetAdressSizes()
{
    return 0;
}

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetSocketsNumber()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Memory.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's memory with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

## CHECKING THE COMPUTER'S MEMORY HARDWARE DATA

# ································································
# Checking if the type of the currently used memory stick is DDR4.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Memory.CheckIfMemoryDDR4()
{
    BU.Hardware.Memory.GetMemoryType 'DDR4' || return "${?}"; return 0;
}

## ==============================================

## GETTING THE COMPUTER'S MEMORY HARDWARE DATA

# ···················································································
# Getting every informations about the computer's memory-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Memory.GetHardwareInfos()
{
    BU.Hardware."${}".Memory.GetHardwareInfos || return "${?}"; return 0;
}

# ·······································
# Getting the number of RAM slots in use.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetUsedRAMSlotsNumber()
{
    return 0;
}

# ················································
# Getting the number of RAM slots available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetAvailableRamSlotsNumber()
{
    return 0;
}

# ····························
# Getting memory max capacity.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetMaxMemoryCapacity()
{
    return 0;
}

# ····················
# Getting memory type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetMemoryType()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Fan.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's fan with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's fan-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Fan.GetHardwareInfos()
{
    return 0;
}


## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Touchpad.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the laptop's monitor with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··································
# Checking if a touchpad is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Touchpad.IsTouchpadPlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's touchpad-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Touchpad.GetHardwareInfos()
{
    return 0;
}

# ···································
# Getting the vendor of the touchpad.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Touchpad.GetVendor()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : General.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

#


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···············································
# Getting every computer's hardware informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.${}.General.GetAllHardwareInfos() -> Hardware -> General.${}.lib

# shellcheck disable=
function BU.Hardware.General.GetAllHardwareInfos()
{
    BU.Hardware."${}".General.GetAllHardwareInfos;

    return 0;
}

# ················································································
# Getting every general hardware components (like the computer's chassis, etc...).

#   - BU.Hardware.General.GetChassis()      -> Hardware -> General.lib (this file)
#   - BU.Hardware.General.GetChassisType()  -> Hardware -> General.lib (this file)
#   - BU.Hardware.General.GetMachineID()    -> Hardware -> General.lib (this file)
#   - BU.Hardware.General.GetBootID()       -> Hardware -> General.lib (this file)

# shellcheck disable=
function BU.Hardware.General.GetHardwareInfos()
{
    BU.Hardware.General.GetChassis;
    BU.Hardware.General.GetChassisType;
    BU.Hardware.General.GetMachineID;
    BU.Hardware.General.GetBootID;

    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······························
# Getting the computer's chassis.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.General.GetChassis()
{
    return 0;
}

# ····································
# Getting the computer's chassis type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.General.GetChassisType()
{
    return 0;
}

# ·························
# Getting the machine's ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.General.GetMachineID()
{
    return 0;
}

# ····················
# Getting the boot ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.General.GetBootID()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Touchpad.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the laptop's touchpad with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··································
# Checking if a touchpad is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Touchpad.IsTouchpadPlugged()
{
    return 0;
}

# ·····················································································
# Getting every informations about the computer's touchpad-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Touchpad.GetHardwareInfos()
{
    return 0;
}

# ···································
# Getting the vendor of the touchpad.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Touchpad.GetVendor()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Fan.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's fan with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's fan-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Fan.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : SDCard.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's SD card(s) with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's SD cards-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.SDCard.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Audio.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the audio-related hardware functionalities of a Linux-based operating systems.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_HARDWARE_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's audio-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Audio.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : PCI.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's PCI(e) expansion buses with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's PCI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.PCI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : GPU.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's GPU with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GPU'S GENERAL INFORMATIONS

##

# ················································································
# Getting every informations about the computer's GPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.GPU.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : HDMI.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's HDMI port with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·················································································
# Getting every informations about the computer's HDMI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.HDMI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Mouse.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's mouse with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a mouse is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Mouse.IsMousePlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's mouse-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Mouse.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : FloppyDisk.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's floppy disk(s) with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ························································································
# Getting every informations about the computer's floppy disk-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.FloppyDisk.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : USB.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's USB port(s) and stick(s) with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's USB-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.USB.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Drive.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's hard drive with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·············································
# Checking if the targeted hard drive is a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.IsHDD()
{
    return 0;
}

# ·············································
# Checking if the targeted hard drive is a SDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.IsSSD()
{
    return 0;
}

# ··········································
# Checking how many hard drives are plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CountPluggedDrives()
{
    return 0;
}

# ··························································
# Counting the number of HDDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CountHDD()
{
    return 0;
}

# ··························································
# Counting the number of SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CountSSD()
{
    return 0;
}

# ···································································
# Counting the number of HDDs and SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CountHDD+SSD()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ·······················································································
# Getting every informations about the computer's hard drive-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetHardwareInfos()
{
    return 0;
}

# ·································
# Getting the size of a hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetDriveSize()
{
    return 0;
}

# ······································································
# Getting the total size by adding up several or every hard drives size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.AddUpDrivesSizes()
{
    return 0;
}

# ····································
# Getting the rotation speed of a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetRotationSpeed()
{
    return 0;
}

# ·····································
# Getting the vendor of the hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetVendor()
{
    return 0;
}

# ····································
# Getting the disk's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetFirmwareVersion()
{
    return 0;
}

# ··················································································································
# Creating a new partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CreateNewPartition()
{
    return 0;
}

# ··············································································································
# Deleting a partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.DeletePartition()
{
    return 0;
}

# ··········································
# Getting the number of existing partitions.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetPartitionsNumber()
{
    return 0;
}

# ·····················································································
# Getting the number of existing partitions by size (more or less than a defined size).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetPartitionsNumberBySize()
{
    return 0;
}

# ·········································································
# Getting the number of existing partitions according to their file system.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetPartitionsNumberByFS()
{
    return 0;
}

# ································
# Getting the size of a partition.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetPartitionSize()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HARD DRIVES (HDDs / SSDs)

## CHECKING THE HARD DRIVE(S) INFORMATIONS

# ·············································
# Checking if the targeted hard drive is a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.IsHDD()
{
    return 0;
}

# ·············································
# Checking if the targeted hard drive is a SDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.IsSSD()
{
    return 0;
}

# ········································
# Checking how many hard drives are plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CountPluggedDrives()
{
    return 0;
}

# ··························································
# Counting the number of HDDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CountHDD()
{
    return 0;
}

# ··························································
# Counting the number of SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CountSSD()
{
    return 0;
}

# ···································································
# Counting the number of HDDs and SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.CountHDD+SSD()
{
    return 0;
}

## ==============================================

## GETTING THE HARD DRIVE(S) INFORMATIONS

# ····································
# Getting the rotation speed of a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetRotationSpeed()
{
    return 0;
}

# ·····································
# Getting the vendor of the hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetVendor()
{
    return 0;
}

# ····································
# Getting the disk's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Drive.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's CPU with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE



## ==============================================

## GETTING GENERAL DATA

# ················································································
# Getting every informations about the computer's CPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetHardwareInfos()
{
    return 0;
}

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetInfos()                 { if BU.Main.CMDS.GetCommandPath 'lscpu'; then lscpu; fi }

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetVendor()                { if BU.Main.CMDS.GetCommandPath 'lshw'; then BU.Main.Echo.Msg "$(lshw -class processor | grep )" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE

## CHECKING THE ARCHITECTURE OF THE CPU(s)

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.Is32Bits()
{
    if BU.Main.CMDS.GetCommandPath 'lshw'; then
        if BU.Main.Checkings.IsRoot; then
            if [ "$(BU.Main.Echo.Msg "$(lshw -class processor | awk 'FNR == 12 {print $2}')" '-n')" -eq 32 ]; then return 0; fi
        else
            if [ "$(BU.Main.Echo.Msg "$(sudo lshw -class processor | awk 'FNR == 12 {print $2}')" '-n')" -eq 32 ]; then return 0; fi
        fi;
    else
        return 1;
    fi
}

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.Is64Bits()
{
    if BU.Main.CMDS.GetCommandPath 'lshw'; then
        if BU.Main.Checkings.IsRoot; then
            if [ "$(BU.Main.Echo.Msg "$(lshw -class processor | awk 'FNR == 12 {print $2}')" '-n')" -eq 64 ]; then return 0; fi
        else
            if [ "$(BU.Main.Echo.Msg "$(sudo lshw -class processor | awk 'FNR == 12 {print $2}')" '-n')" -eq 64 ]; then return 0; fi
        fi;
    else
        return 1;
    fi
}

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchAArch32()          { true; }

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchAArch64()          { true; }

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchARM32()            { true; }

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchARM64()            { true; }

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchAMD64()            { true; }

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchi386()             { true; }

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchPPC()              { true; }

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchMIPS()             { true; }

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsArchRISCV()            { true; }

## ==============================================

## GETTING THE CPU(s) ARCHITECTURE'S DATA

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetArch()                { if BU.Main.CMDS.GetCommandPath 'uname'; then BU.Main.Echo.Msg "$(uname -m)" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES

## CHECKING THE CPU(s) CORES DATA

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.IsMonocore()             { return 0; }

## ==============================================

## GETTING THE CPU(s) CORES DATA

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetCoresNumber()         { if BU.Main.CMDS.GetCommandPath 'nproc'; then BU.Main.Echo.Msg "$(nproc)" '-n'; return 0; else return 1; fi; }

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetLogicalCoresNumber()  { return 0; }

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetPhysicalCoresNumber() { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK

## CHECKING THE CPU'S CLOCK INFORMATIONS

## ==============================================

## GETTING THE CPU'S CLOCK DATA

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetClockFrequency()      { if BU.Main.CMDS.GetCommandPath 'lshw'; then if BU.Main.Checkings.CheckRootEUID; then BU.Main.Echo.Msg "$(lshw -class processor | awk 'FNR == 13 {print $2}' )" '-n'; return 0; else return 1; fi; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :




## ==============================================

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetAdressSizes()         { return 0; }

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.CPU.GetSocketsNumber()       { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Keyboard.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's keyboard with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····································
# Checking if the keyboard is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Keyboard.IsKeyboardPlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's keyboard-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Keyboard.GetHardwareInfos()
{
    return 0;
}

# ·············································
# Getting the current layout (AZERTY | QWERTY).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Keyboard.GetLayout()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : VGA.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's VGA port with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's VGA-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.VGA.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : General.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

#


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···············································
# Getting every computer's hardware informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.Linux.Audio.GetHardwareInfos()        -> Hardware -> Audio.Linux.lib
#   - BU.Hardware.Linux.Battery.GetHardwareInfos()      -> Hardware -> Battery.Linux.lib
#   - BU.Hardware.Linux.Bluetooth.GetHardwareInfos()    -> Hardware -> Bluetooth.Linux.lib
#   - BU.Hardware.Linux.CPU.GetHardwareInfos()          -> Hardware -> CPU.Linux.lib
#   - BU.Hardware.Linux.Drive.GetHardwareInfos()        -> Hardware -> Drive.Linux.lib
#   - BU.Hardware.Linux.Fan.GetHardwareInfos()          -> Hardware -> Fan.Linux.lib
#   - BU.Hardware.Linux.FloppyDisk.GetHardwareInfos()   -> Hardware -> FloppyDisk.Linux.lib
#   - BU.Hardware.Linux.General.GetHardwareInfos()      -> Hardware -> General.Linux.lib (this file)
#   - BU.Hardware.Linux.GPU.GetHardwareInfos()          -> Hardware -> GPU.Linux.lib
#   - BU.Hardware.Linux.HDMI.GetHardwareInfos()         -> Hardware -> HDMI.Linux.lib
#   - BU.Hardware.Linux.Keyboard.GetHardwareInfos()     -> Hardware -> Keyboard.Linux.lib
#   - BU.Hardware.Linux.Memory.GetHardwareInfos()       -> Hardware -> Memory.Linux.lib
#   - BU.Hardware.Linux.Motherboard.GetHardwareInfos()  -> Hardware -> Motherboard.Linux.lib
#   - BU.Hardware.Linux.Mouse.GetHardwareInfos()        -> Hardware -> Mouse.Linux.lib
#   - BU.Hardware.Linux.PCI.GetHardwareInfos()          -> Hardware -> PCI.Linux.lib
#   - BU.Hardware.Linux.Ports.GetHardwareInfos()        -> Hardware -> Ports.Linux.lib
#   - BU.Hardware.Linux.Screen.GetHardwareInfos()       -> Hardware -> Screen.Linux.lib
#   - BU.Hardware.Linux.SDCard.GetHardwareInfos()       -> Hardware -> SDCard.Linux.lib
#   - BU.Hardware.Linux.Touchpad.GetHardwareInfos()     -> Hardware -> Touchpad.Linux.lib
#   - BU.Hardware.Linux.USB.GetHardwareInfos()          -> Hardware -> USB.Linux.lib
#   - BU.Hardware.Linux.VGA.GetHardwareInfos()          -> Hardware -> VGA.Linux.lib

# shellcheck disable=
function BU.Hardware.Linux.General.GetAllHardwareInfos()
{
    BU.Hardware.Linux.Audio.GetHardwareInfos;
    BU.Hardware.Linux.Battery.GetHardwareInfos;
    BU.Hardware.Linux.Bluetooth.GetHardwareInfos;

    BU.Hardware.Linux.CPU.GetHardwareInfos;
    BU.Hardware.Linux.Drive.GetHardwareInfos;
    BU.Hardware.Linux.Fan.GetHardwareInfos;

    BU.Hardware.Linux.FloppyDisk.GetHardwareInfos;
    BU.Hardware.Linux.General.GetHardwareInfos;
    BU.Hardware.Linux.GPU.GetHardwareInfos;

    BU.Hardware.Linux.HDMI.GetHardwareInfos;
    BU.Hardware.Linux.Keyboard.GetHardwareInfos;
    BU.Hardware.Linux.Memory.GetHardwareInfos;

    BU.Hardware.Linux.Motherboard.GetHardwareInfos;
    BU.Hardware.Linux.Mouse.GetHardwareInfos;
    BU.Hardware.Linux.PCI.GetHardwareInfos;

    BU.Hardware.Linux.Ports.GetHardwareInfos;
    BU.Hardware.Linux.Screen.GetHardwareInfos;
    BU.Hardware.Linux.SDCard.GetHardwareInfos;

    BU.Hardware.Linux.Touchpad.GetHardwareInfos;
    BU.Hardware.Linux.USB.GetHardwareInfos;
    BU.Hardware.Linux.VGA.GetHardwareInfos;

    return 0;
}

# ················································································
# Getting every general hardware components (like the computer's chassis, etc...).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.Linux.General.GetChassis()        -> Hardware -> General.Linux.lib (this file)
#   - BU.Hardware.Linux.General.GetChassisType()    -> Hardware -> General.Linux.lib (this file)
#   - BU.Hardware.Linux.General.GetMachineID()      -> Hardware -> General.Linux.lib (this file)
#   - BU.Hardware.Linux.General.GetBootID()         -> Hardware -> General.Linux.lib (this file)

# shellcheck disable=
function BU.Hardware.Linux.General.GetHardwareInfos()
{
    BU.Hardware.Linux.General.GetChassis;
    BU.Hardware.Linux.General.GetChassisType;
    BU.Hardware.Linux.General.GetMachineID;
    BU.Hardware.Linux.General.GetBootID;

    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······························
# Getting the computer's chassis.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.General.GetChassis()        { if BU.Main.CMDS.GetCommandPath 'hostnamectl';  then hostnamectl | awk 'FNR == 3 {print $2}'; return 0; else return 1; fi; }

# ····································
# Getting the computer's chassis type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.General.GetChassisType()
{
    if BU.Main.CMDS.GetCommandPath 'dmidecode'; then
        if BU.Main.Checkings.CheckRootEUID; then
            BU.Main.Echo.msg "$(dmidecode -s chassis-type)" 'n';

            return 0;
        else
            BU.Main.Echo.Msg "$(sudo dmidecode -s chassis-type)" 'n';

            return 1;
        fi
    fi
}

# ·························
# Getting the machine's ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.General.GetMachineID()      { if BU.Main.CMDS.GetCommandPath 'hostnamectl';  then hostnamectl | awk 'FNR == 4 {print $3}'; return 0; else return 1; fi; }

# ····················
# Getting the boot ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.General.GetBootID()         { if BU.Main.CMDS.GetCommandPath 'hostnamectl';  then hostnamectl | awk 'FNR == 5 {print $3}'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Memory.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's memory with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

## CHECKING THE COMPUTER'S MEMORY HARDWARE DATA

# ································································
# Checking if the type of the currently used memory stick is DDR4.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Memory.CheckIfMemoryDDR4() { BU.Hardware.Linux.Memory.GetMemoryType 'DDR4' || return 1; }

## ==============================================

## GETTING THE COMPUTER'S MEMORY HARDWARE DATA

# ···················································································
# Getting every informations about the computer's memory-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Memory.GetHardwareInfos()
{
    return 0;
}

# ·······································
# Getting the number of RAM slots in use.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Memory.GetUsedRAMSlotsNumber()
{
    if BU.Main.CMDS.GetCommandPath 'dmidecode'; then if BU.Main.Checkings.CheckRootEUID; then dmidecode -t 16 | awk 'FNR == 12 {print $4}'; return 0; else return 1; fi; fi
}

# ················································
# Getting the number of RAM slots available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Memory.GetAvailableRamSlotsNumber()
{
    return 0;
}

# ····························
# Getting memory max capacity.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Memory.GetMaxMemoryCapacity()
{
    if BU.Main.CMDS.GetCommandPath 'dmidecode'; then if BU.Main.Checkings.CheckRootEUID; then dmidecode -t 16 | awk 'FNR == 10 {print $3 " " $4}'; return 0; else return 1; fi; fi
}

# ····················
# Getting memory type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Memory.GetMemoryType()
{
    if BU.Main.CMDS.GetCommandPath 'dmidecode'; then if BU.Main.Checkings.CheckRootEUID; then dmidecode ; return 0; else return 1; fi; fi
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Ports.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's physical ports with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's ports-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.GetHardwareInfos()
{
    return 0;
}

# ······································
# Getting the total number of USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.GetUSBPortsNumber()
{
    return 0;
}

# ··········································
# Getting the number of available USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.GetAvailableUSBPortsNumber()
{
    return 0;
}

# ·····································
# Getting the number of used USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.GetUsedUSBPortsNumber()
{
    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfOpticalDiscDriveExists()
{
    return 0;
}

# ·································································
# Checking if an optical disc drive is mounted, and if no disc is .

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfOpticalDiscDriveIsEmpty()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfOpticalDiscDriveTrayIsClosed()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfOpticalDiscDriveTrayIsOpen()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfOpticalDiscDriveContainsdisc()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·······································
# Checking if an SD card port is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfSDCardReaderIsMounted()
{
    return 0;
}

# ······························
# Checking if a VGA port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfVGAPortExists()
{
    return 0;
}

# ···············································
# Checking if the existing VGA port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfVGAPortAvailable()
{
    return 0;
}

# ································
# Checking if an HDMI port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfHDMIPortExists()
{
    return 0;
}

# ················································
# Checking if the existing HDMI port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfHDMIPortAvailable()
{
    return 0;
}

# ··································
# Checking if a joystick is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Ports.CheckIfJoystickIsPlugged()
{
    #**** Variables ****
    local JS;

    #**** Code ****
    JS="$(dmesg | grep 'Joystick')";

    if [ -n "${JS}" ]; then return 0; else return 1; fi
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Battery.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's battery with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### BATTERY CHECKINGS

##

# ···········································
# Checking if the computer is not AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.IsNotOnAC()
{
    return 0;
}

# ·······································
# Checking if the computer is AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.IsOnAC()
{
    return 0;
}

# ····································
# Checking if the battery has history.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.HasHistory()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 7 {print $3}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ··········································
# Checking if the computer has power supply.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.HasPowerSupply()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 5 {print $3}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ·······································
# Checking if the battery has statistics.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.HasStatistics()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 8 {print $3}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ···································
# Checking if the battery is present.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.IsPresent()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 10 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ·········································
# Checking if the computer is rechargeable.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.IsRechargeable()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 11 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is rechargeable"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

## ==============================================

## BATTERY VALUES GETTERS

# ····················································································
# Getting every informations about the computer's battery-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetHardwareInfos()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetCapacity()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 21 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's capacity"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ···························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetEnergy()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 14 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's "; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetEnergyEmpty()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 15 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's "; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}


# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetEnergyFull()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 16 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's "; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetEnergyFullDesign()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 17 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's "; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ··································
# Getting the battery's energy rate.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetEnergyRate()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 18 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's energy rate"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ····························
# Getting the battery's model.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetModel()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries, v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 3 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's model"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ························
# Getting the battery's

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetNativePath()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries, v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 21 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's capacity"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ·································
# Getting the battery's percentage.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetPercentage()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries, v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | grep percentage | grep -o '[0-9]\+' | head -1)";
    else
        BU.Main.Echo.Msg "Unable to get the battery's percentage"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetSerialNumber()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 4 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's serial number"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ····························
# Getting the battery's state.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetState()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 12 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's state"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ·································
# Getting the battery's technology.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetTechnology()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 22 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's technology"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ·················································
# Getting the time remaining until the full charge.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetTimeBeforeFullCharge()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 20 {print $4}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ·····························
# Getting the battery's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetVendor()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 2 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's vendor"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}";

    return 0;
}

# ··································
# Getting the battery serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetVoltage()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 19 {print $2}')";
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

# ··································
# Getting the battery warning level.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Battery.GetWarningLevel()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 13 {print $2}')";
    fi

    #**** Code ****
    BU.Main.Echo.Msg "${v_command_output}" '-n';

    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Screen.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's monitor with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Screen.IsMonitorPlugged()
{
    return 0;
}

# ········································
# Checking if an extra monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Screen.IsExtraMonitorPlugged()
{
    return 0;
}

## ==============================================

## GETTING THE SCREEN'S DATA

# ···················································································
# Getting every informations about the computer's screen-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Screen.GetHardwareInfos()
{
    return 0;
}

# ······························
# Getting the screen resolution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Screen.GetResolution()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Bluetooth.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's Bluetooth module with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

# ······················································································
# Getting every informations about the computer's bluetooth-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Bluetooth.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Motherboard.Linux.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's motherboard with the help of the system commands on a Linux-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GET INFORMATIONS

## GET BIOS INFORMATIONS

# ····························································
# Getting every informations about the computer's motherboard.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Motherboard.GetHardwareInfos()
{
    return 0;
}

# ···········································
# Getting the motherboard's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Linux.Motherboard.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Motherboard.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's motherboard with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### BIOS INFORMATIONS

## GETTING BIOS INFORMATIONS

# ······························
# Checking if ACPI is supported.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.IsACPISupported()
{
    return 0;
}

# ····································
# Checking if the BIOS is upgradeable.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.IsBIOSUpgradeable()
{
    return 0;
}

# ············································
# Checking if the BIOS shadowing is supported.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.IsBIOSShadowingSupported()
{
    return 0;
}

# ·····························
# Checking if PCI is supported.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.IsPCISupported()
{
    return 0;
}

# ····································
# Checking if USB legacy is supported.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.IsUSBLegacySupported()
{
    return 0;
}

## ==============================================

## GETTING BIOS INFORMATIONS

# ················································
# Getting the motherboard's firmware release date.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetFirmwareReleaseDate()
{
    return 0;
}

# ···········································
# Getting the motherboard's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetFirmwareVersion()
{
    return 0;
}

# ···································
# Getting the motherboard's ROM size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetROMSize()
{
    return 0;
}

# ·······································
# Getting the motherboard's runtime size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetRuntimeSize()
{
    return 0;
}

# ·································
# Getting the motherboard's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetVendor()
{
    return 0;
}

## ==============================================

## GETTING BIOS LANGUAGE INFORMATIONS

# ········································
# Getting the language description format.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetLanguageDescriptionFormat()
{
    return 0;
}

# ············································
# Getting the number of installable languages.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetInstallableLanguagesNumber()
{
    return 0;
}

# ··········································
# Getting the list of installable languages.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetInstallableLanguagesList()
{
    return 0;
}

# ·········································
# Getting the currently installed language.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Motherboard.GetCurrentlyInstalledLanguage()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : PCI.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's PCI(e) expansion buses with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

## ==============================================

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's PCI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.PCI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Battery.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's battery with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### BATTERY CHECKINGS

##

# ···········································
# Checking if the computer is not AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.IsNotOnAC()
{
    return 0;
}

# ·······································
# Checking if the computer is AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.IsOnAC()
{
    return 0;
}

# ····································
# Checking if the battery has history.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.HasHistory()
{
    return 0;
}

# ··········································
# Checking if the computer has power supply.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.HasPowerSupply()
{
    return 0;
}

# ·······································
# Checking if the battery has statistics.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.HasStatistics()
{
    return 0;
}

# ···································
# Checking if the battery is present.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.IsPresent()
{
    return 0;
}

# ·········································
# Checking if the computer is rechargeable.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.IsRechargeable()
{
    return 0;
}

## ==============================================

## BATTERY VALUES GETTERS

# ····················································································
# Getting every informations about the computer's battery-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetHardwareInfos()
{
    BU.Hardware.Battery.GetCapacity;
    BU.Hardware.Battery.GetEnergy;

    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetCapacity()
{
    return 0;
}

# ···························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetEnergy()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetEnergyEmpty()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetEnergyFull()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetEnergyFullDesign()
{
    return 0;
}

# ··································
# Getting the battery's energy rate.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetEnergyRate()
{
    return 0;
}

# ····························
# Getting the battery's model.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetModel()
{
    return 0;
}

# ························
# Getting the battery's

# shellcheck disable=
function BU.Hardware.Battery.GetNativePath()
{
    return 0;
}

# ·································
# Getting the battery's percentage.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetPercentage()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetSerialNumber()
{
    return 0;
}

# ····························
# Getting the battery's state.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetState()
{
    return 0;
}

# ·································
# Getting the battery's technology.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetTechnology()
{
    return 0;
}

# ·················································
# Getting the time remaining until the full charge.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetTimeBeforeFullCharge()
{
    return 0;
}

# ·····························
# Getting the battery's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetVendor()
{
    return 0;
}

# ··································
# Getting the battery serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetVoltage()
{
    return 0;
}

# ··································
# Getting the battery warning level.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Battery.GetWarningLevel()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Bluetooth.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's Bluetooth module with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····················································································
# Getting every informations about the device's Bluetooth-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Bluetooth.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Screen.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's screen with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :
##
## DEBUG ID :

# ·································
# Checking if a monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Screen.IsMonitorPlugged()
{
    return 0;
}

# ········································
# Checking if an extra monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Screen.IsExtraMonitorPlugged()
{
    return 0;
}

## ==============================================

## GETTING THE SCREEN'S DATA

# ·················································································
# Getting every informations about the device's screen-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Screen.GetHardwareInfos()
{
    return 0;
}

# ······························
# Getting the screen resolution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Screen.GetResolution()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : GPU.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's GPU with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GPU'S GENERAL INFORMATIONS

##

# ··············································································
# Getting every informations about the device's GPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.GPU.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : General.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

#


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···············································
# Getting every computer's hardware informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.Android.Audio.GetHardwareInfos()          -> Hardware -> Audio.Android.lib
#   - BU.Hardware.Android.Battery.GetHardwareInfos()        -> Hardware -> Battery.Android.lib
#   - BU.Hardware.Android.Bluetooth.GetHardwareInfos()      -> Hardware -> Bluetooth.Android.lib
#   - BU.Hardware.Android.CPU.GetHardwareInfos()            -> Hardware -> CPU.Android.lib
#   - BU.Hardware.Android.Drive.GetHardwareInfos()          -> Hardware -> Drive.Android.lib
#   - BU.Hardware.Android.Fan.GetHardwareInfos()            -> Hardware -> Fan.Android.lib
#   - BU.Hardware.Android.FloppyDisk.GetHardwareInfos()     -> Hardware -> FloppyDisk.Android.lib
#   - BU.Hardware.Android.General.GetHardwareInfos()        -> Hardware -> General.Android.lib (this file)
#   - BU.Hardware.Android.GPU.GetHardwareInfos()            -> Hardware -> GPU.Android.lib
#   - BU.Hardware.Android.HDMI.GetHardwareInfos()           -> Hardware -> HDMI.Android.lib
#   - BU.Hardware.Android.Keyboard.GetHardwareInfos()       -> Hardware -> Keyboard.Android.lib
#   - BU.Hardware.Android.Memory.GetHardwareInfos()         -> Hardware -> Memory.Android.lib
#   - BU.Hardware.Android.Motherboard.GetHardwareInfos()    -> Hardware -> Motherboard.Android.lib
#   - BU.Hardware.Android.Mouse.GetHardwareInfos()          -> Hardware -> Mouse.Android.lib
#   - BU.Hardware.Android.PCI.GetHardwareInfos()            -> Hardware -> PCI.Android.lib
#   - BU.Hardware.Android.Ports.GetHardwareInfos()          -> Hardware -> Ports.Android.lib
#   - BU.Hardware.Android.Screen.GetHardwareInfos()         -> Hardware -> Screen.Android.lib
#   - BU.Hardware.Android.SDCard.GetHardwareInfos()         -> Hardware -> SDCard.Android.lib
#   - BU.Hardware.Android.Touchpad.GetHardwareInfos()       -> Hardware -> Touchpad.Android.lib
#   - BU.Hardware.Android.USB.GetHardwareInfos()            -> Hardware -> USB.Android.lib
#   - BU.Hardware.Android.VGA.GetHardwareInfos()            -> Hardware -> VGA.Android.lib

# shellcheck disable=
function BU.Hardware.Android.General.GetAllHardwareInfos()
{
    BU.Hardware.Android.Audio.GetHardwareInfos;
    BU.Hardware.Android.Battery.GetHardwareInfos;
    BU.Hardware.Android.Bluetooth.GetHardwareInfos;

    BU.Hardware.Android.CPU.GetHardwareInfos;
    BU.Hardware.Android.Drive.GetHardwareInfos;
    BU.Hardware.Android.Fan.GetHardwareInfos;

    BU.Hardware.Android.FloppyDisk.GetHardwareInfos;
    BU.Hardware.Android.General.GetHardwareInfos;
    BU.Hardware.Android.GPU.GetHardwareInfos;

    BU.Hardware.Android.HDMI.GetHardwareInfos;
    BU.Hardware.Android.Keyboard.GetHardwareInfos;
    BU.Hardware.Android.Memory.GetHardwareInfos;

    BU.Hardware.Android.Motherboard.GetHardwareInfos;
    BU.Hardware.Android.Mouse.GetHardwareInfos;
    BU.Hardware.Android.PCI.GetHardwareInfos;

    BU.Hardware.Android.Ports.GetHardwareInfos;
    BU.Hardware.Android.Screen.GetHardwareInfos;
    BU.Hardware.Android.SDCard.GetHardwareInfos;

    BU.Hardware.Android.Touchpad.GetHardwareInfos;
    BU.Hardware.Android.USB.GetHardwareInfos;
    BU.Hardware.Android.VGA.GetHardwareInfos;

    return 0;
}

# ················································································
# Getting every general hardware components (like the computer's chassis, etc...).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.Android.General.GetChassis()      -> Hardware -> General.Android.lib (this file)
#   - BU.Hardware.Android.General.GetChassisType()  -> Hardware -> General.Android.lib (this file)
#   - BU.Hardware.Android.General.GetMachineID()    -> Hardware -> General.Android.lib (this file)
#   - BU.Hardware.Android.General.GetBootID()       -> Hardware -> General.Android.lib (this file)

# shellcheck disable=
function BU.Hardware.Android.General.GetHardwareInfos()
{
    BU.Hardware.Android.General.GetChassis;
    BU.Hardware.Android.General.GetChassisType;
    BU.Hardware.Android.General.GetMachineID;
    BU.Hardware.Android.General.GetBootID;

    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······························
# Getting the computer's chassis.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.General.GetChassis()
{
    return 0;
}

# ····································
# Getting the computer's chassis type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.General.GetChassisType()
{
    return 0;
}

# ·························
# Getting the machine's ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.General.GetMachineID()
{
    return 0;
}

# ····················
# Getting the boot ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.General.GetBootID()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : PCI.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's PCI(e) expansion buses with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··············································································
# Getting every informations about the device's PCI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.PCI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Mouse.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the mouse with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a mouse is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Mouse.IsMousePlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ················································································
# Getting every informations about the device's mouse-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Mouse.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : SDCard.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's SD card(s) with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···················································································
# Getting every informations about the device's SD cards-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.SDCard.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : HDMI.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's HDMI port with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···············································································
# Getting every informations about the device's HDMI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.HDMI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Keyboard.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the system's keyboard with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····································
# Checking if the keyboard is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Keyboard.IsKeyboardPlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ···················································································
# Getting every informations about the device's keyboard-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Keyboard.GetHardwareInfos()
{
    return 0;
}

# ·············································
# Getting the current layout (AZERTY | QWERTY).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Keyboard.GetLayout()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Battery.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's battery with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the device's battery-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Battery.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : FloppyDisk.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's floppy disk(s) with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······················································································
# Getting every informations about the device's floppy disks-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.FloppyDisk.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Ports.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's physical ports of the with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the device's ports-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.GetHardwareInfos()
{
    return 0;
}

# ······································
# Getting the total number of USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.GetUSBPortsNumber()
{
    return 0;
}

# ··········································
# Getting the number of available USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.GetAvailableUSBPortsNumber()
{
    return 0;
}

# ·····································
# Getting the number of used USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.GetUsedUSBPortsNumber()
{
    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfOpticalDiscDriveExists()
{
    return 0;
}

# ······································································
# Checking if an optical disc drive is mounted, and if no disc is .

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfOpticalDiscDriveIsEmpty()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfOpticalDiscDriveTrayIsClosed()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·················································
# Checking if an optical disc drive's tray is open.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfOpticalDiscDriveTrayIsOpen()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ··················································
# Checking if an optical disc drive contains a disk.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfOpticalDiscDriveContainsDisk()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······································
# Checking if a SD card port is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfSDCardReaderIsMounted()
{
    return 0;
}

# ······························
# Checking if a VGA port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfVGAPortExists()
{
    return 0;
}

# ···············································
# Checking if the existing VGA port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfVGAPortAvailable()
{
    return 0;
}

# ································
# Checking if an HDMI port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfHDMIPortExists()
{
    return 0;
}

# ················································
# Checking if the existing HDMI port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfHDMIPortAvailable()
{
    return 0;
}

# ··································
# Checking if a joystick is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Ports.CheckIfJoystickIsPlugged()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : VGA.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's VGA port with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :
##
## DEBUG ID :

# ··············································································
# Getting every informations about the device's VGA-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.VGA.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Memory.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's memory with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

## CHECKING THE COMPUTER'S MEMORY HARDWARE DATA

# ································································
# Checking if the type of the currently used memory stick is DDR4.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Memory.CheckIfMemoryDDR4() { BU.Hardware.Android.Memory.GetMemoryType 'DDR4' || return 1; }

## ==============================================

## GETTING THE COMPUTER'S MEMORY HARDWARE DATA

##

# ·················································································
# Getting every informations about the device's memory-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Memory.GetHardwareInfos()
{
    return 0;
}

# ·······································
# Getting the number of RAM slots in use.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Memory.GetUsedRAMSlotsNumber()
{
    return 0;
}

# ················································
# Getting the number of RAM slots available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Memory.GetAvailableRamSlotsNumber()
{
    return 0;
}

# ····························
# Getting memory max capacity.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Memory.GetMaxMemoryCapacity()
{
    return 0;
}

# ····················
# Getting memory type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Memory.GetMemoryType()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Fan.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's fan with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··············································································
# Getting every informations about the device's fan-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Fan.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Motherboard.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's motherboard with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### BIOS INFORMATIONS

## GETTING BIOS INFORMATIONS

# ··························································
# Getting every informations about the device's motherboard.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Motherboard.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Touchpad.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's touchpad with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :
##
## DEBUG ID :

# ··································
# Checking if a touchpad is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Touchpad.IsTouchpadPlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ···················································································
# Getting every informations about the device's touchpad-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Touchpad.GetHardwareInfos()
{
    return 0;
}

# ···································
# Getting the vendor of the touchpad.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Touchpad.GetVendor()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Audio.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the audio-related hardware functionalities of the Android operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_HARDWARE_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the device's audio-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Audio.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : USB.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's USB port(s) and stick(s) with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··············································································
# Getting every informations about the device's USB-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.USB.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's CPU with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE



## ==============================================

## GETTING GENERAL DATA

# ··············································································
# Getting every informations about the device's CPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetHardwareInfos()
{
    return 0;
}

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetInfos()                 { if BU.Main.CMDS.GetCommandPath 'lscpu'; then lscpu; fi }

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetVendor()                { if BU.Main.CMDS.GetCommandPath 'lshw'; then BU.Main.Echo.Msg "$(lshw -class processor | grep )" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE

## CHECKING THE ARCHITECTURE OF THE CPU(s)

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.Is32Bits()                 { return 0; }

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.Is64Bits()                 { return 0; }

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchAArch32()            { true; }

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchAArch64()            { true; }

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchARM32()              { true; }

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchARM64()              { true; }

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchAMD64()              { true; }

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchi386()               { true; }

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchPPC()                { true; }

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchMIPS()               { true; }

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsArchRISCV()              { true; }

## ==============================================

## GETTING THE CPU(s) ARCHITECTURE'S DATA

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetArch()              { if BU.Main.CMDS.GetCommandPath 'uname'; then BU.Main.Echo.Msg "$(uname -m)" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES

## CHECKING THE CPU(s) CORES DATA

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.IsMonocore()            { return 0; }

## ==============================================

## GETTING THE CPU(s) CORES DATA

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetCoresNumber()           { if BU.Main.CMDS.GetCommandPath 'nproc'; then BU.Main.Echo.Msg "$(nproc)" '-n'; return 0; else return 1; fi; }

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetLogicalCoresNumber()    { return 0; }

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetPhysicalCoresNumber()   { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK

## CHECKING THE CPU'S CLOCK INFORMATIONS

## ==============================================

## GETTING THE CPU'S CLOCK DATA

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetClockFrequency()        { if BU.Main.CMDS.GetCommandPath 'lshw'; then if BU.Main.Checkings.CheckRootEUID; then BU.Main.Echo.Msg "$(lshw -class processor | awk 'FNR == 13 {print $2}' )" '-n'; return 0; else return 1; fi; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :




## ==============================================

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetAdressSizes()        { return 0; }

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.CPU.GetSocketsNumber()         { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Drive.Android.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the device's physical storage with the help of the system commands on an Android-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ······················································································
# Getting every informations about the device's hard drives-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetHardwareInfos()
{
    return 0;
}

# ·································
# Getting the size of a hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetDriveSize()
{
    return 0;
}

# ······································································
# Getting the total size by adding up several or every hard drives size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.AddUpDrivesSizes()
{
    return 0;
}

# ··················································································································
# Creating a new partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.CreateNewPartition()
{
    return 0;
}

# ··············································································································
# Deleting a partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.DeletePartition()
{
    return 0;
}

# ··········································
# Getting the number of existing partitions.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetPartitionsNumber()
{
    return 0;
}

# ·····················································································
# Getting the number of existing partitions by size (more or less than a defined size).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetPartitionsNumberBySize()
{
    return 0;
}

# ·········································································
# Getting the number of existing partitions according to their file system.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetPartitionsNumberByFS()
{
    return 0;
}

# ································
# Getting the size of a partition.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetPartitionSize()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HARD DRIVES (HDDs / SSDs)

## CHECKING THE HARD DRIVE(S) INFORMATIONS

# ·············································
# Checking if the targeted hard drive is a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.IsHDD()
{
    return 0;
}

# ·············································
# Checking if the targeted hard drive is a SDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.IsSSD()
{
    return 0;
}

# ········································
# Checking how many hard drives are plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.CountPluggedDrives()
{
    return 0;
}

# ··························································
# Counting the number of HDDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.CountHDD()
{
    return 0;
}

# ··························································
# Counting the number of SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.CountSSD()
{
    return 0;
}

# ···································································
# Counting the number of HDDs and SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.CountHDD+SSD()
{
    return 0;
}

## ==============================================

## GETTING THE HARD DRIVE(S) INFORMATIONS

# ····································
# Getting the rotation speed of a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetRotationSpeed()
{
    return 0;
}

# ·····································
# Getting the vendor of the hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetVendor()
{
    return 0;
}

# ····································
# Getting the disk's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Android.Drive.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Screen.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the monitor-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Screen.IsMonitorPlugged()
{
    return 0;
}

# ········································
# Checking if an extra monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Screen.IsExtraMonitorPlugged()
{
    return 0;
}

## ==============================================

## GETTING THE SCREEN'S DATA

## ==============================================

## GETTING THE SCREEN'S DATA

# ···················································································
# Getting every informations about the computer's screen-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Screen.GetHardwareInfos()
{
    return 0;
}

# ······························
# Getting the screen resolution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Screen.GetResolution()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Audio.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the audio-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_HARDWARE_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's audio-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Audio.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Keyboard.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the keyboard-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····································
# Checking if the keyboard is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Keyboard.IsKeyboardPlugged()
{
    return 0;
}

## ==============================================

# ·····················································································
# Getting every informations about the computer's keyboard-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Keyboard.GetHardwareInfos()
{
    return 0;
}

# ·············································
# Getting the current layout (AZERTY | QWERTY).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Keyboard.GetLayout()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the CPU-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE



## ==============================================

## GETTING GENERAL DATA

# ················································································
# Getting every informations about the computer's CPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetHardwareInfos()
{
    return 0;
}

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetInfos()                 { if BU.Main.CMDS.GetCommandPath 'lscpu'; then lscpu; fi }

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetVendor()                { if BU.Main.CMDS.GetCommandPath 'lshw'; then BU.Main.Echo.Msg "$(lshw -class processor | grep )" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE

## CHECKING THE ARCHITECTURE OF THE CPU(s)

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.Is32Bits()                   { return 0; }

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.Is64Bits()                   { return 0; }

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchAArch32()            { true; }

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchAArch64()            { true; }

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchARM32()              { true; }

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchARM64()              { true; }

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchAMD64()              { true; }

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchi386()               { true; }

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchPPC()                { true; }

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchMIPS()               { true; }

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsArchRISCV()              { true; }

## ==============================================

## GETTING THE CPU(s) ARCHITECTURE'S DATA

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetArch()              { if BU.Main.CMDS.GetCommandPath 'uname'; then BU.Main.Echo.Msg "$(uname -m)" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES

## CHECKING THE CPU(s) CORES DATA

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.IsMonocore()            { return 0; }

## ==============================================

## GETTING THE CPU(s) CORES DATA

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetCoresNumber()           { if BU.Main.CMDS.GetCommandPath 'nproc'; then BU.Main.Echo.Msg "$(nproc)" '-n'; return 0; else return 1; fi; }

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetLogicalCoresNumber()    { return 0; }

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetPhysicalCoresNumber()   { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK

## CHECKING THE CPU'S CLOCK INFORMATIONS

## ==============================================

## GETTING THE CPU'S CLOCK DATA

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetClockFrequency()        { if BU.Main.CMDS.GetCommandPath 'lshw'; then if BU.Main.Checkings.CheckRootEUID; then BU.Main.Echo.Msg "$(lshw -class processor | awk 'FNR == 13 {print $2}' )" '-n'; return 0; else return 1; fi; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :




## ==============================================

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetAdressSizes()        { return 0; }

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.CPU.GetSocketsNumber()         { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Drive.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the hard drive-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ························································································
# Getting every informations about the computer's hard drives-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetHardwareInfos()
{
    return 0;
}

# ·································
# Getting the size of a hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetDriveSize()
{
    return 0;
}

# ······································································
# Getting the total size by adding up several or every hard drives size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.AddUpDrivesSizes()
{
    return 0;
}

# ··················································································································
# Creating a new partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.CreateNewPartition()
{
    return 0;
}

# ··············································································································
# Deleting a partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.DeletePartition()
{
    return 0;
}

# ··········································
# Getting the number of existing partitions.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetPartitionsNumber()
{
    return 0;
}

# ·····················································································
# Getting the number of existing partitions by size (more or less than a defined size).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetPartitionsNumberBySize()
{
    return 0;
}

# ·········································································
# Getting the number of existing partitions according to their file system.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetPartitionsNumberByFS()
{
    return 0;
}

# ································
# Getting the size of a partition.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetPartitionSize()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HARD DRIVES (HDDs / SSDs)

## CHECKING THE HARD DRIVE(S) INFORMATIONS

# ·············································
# Checking if the targeted hard drive is a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.IsHDD()
{
    return 0;
}

# ·············································
# Checking if the targeted hard drive is a SDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.IsSSD()
{
    return 0;
}

# ········································
# Checking how many hard drives are plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.CountPluggedDrives()
{
    return 0;
}

# ··························································
# Counting the number of HDDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.CountHDD()
{
    return 0;
}

# ··························································
# Counting the number of SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.CountSSD()
{
    return 0;
}

# ···································································
# Counting the number of HDDs and SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.CountHDD+SSD()
{
    return 0;
}

## ==============================================

## GETTING THE HARD DRIVE(S) INFORMATIONS

# ····································
# Getting the rotation speed of a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetRotationSpeed()
{
    return 0;
}

# ·····································
# Getting the vendor of the hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetVendor()
{
    return 0;
}

# ····································
# Getting the disk's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Drive.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : GPU.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the GPU-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GPU'S GENERAL INFORMATIONS

##

# ················································································
# Getting every informations about the computer's GPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.GPU.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Touchpad.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the touchpad-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··································
# Checking if a touchpad is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Touchpad.IsTouchpadPlugged()
{
    return 0;
}

# ·····················································································
# Getting every informations about the computer's touchpad-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Touchpad.GetHardwareInfos()
{
    return 0;
}

# ···································
# Getting the vendor of the touchpad.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Touchpad.GetVendor()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Mouse.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the mouse-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a mouse is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Mouse.IsMousePlugged()
{
    return 0;
}

## ==============================================

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's mouse-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Mouse.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : HDMI.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the HDMI-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·················································································
# Getting every informations about the computer's HDMI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.HDMI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : FloppyDisk.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the floppy disk-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·························································································
# Getting every informations about the computer's floppy disks-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.FloppyDisk.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Fan.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the fan-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's fan-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Fan.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Motherboard.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the motherboard-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····························································
# Getting every informations about the computer's motherboard.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Motherboard.GetHardwareInfos()
{
    return 0;
}

# ···········································
# Getting the motherboard's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Motherboard.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Battery.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the battery-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···········································
# Checking if the computer is not AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.IsNotOnAC()
{
    return 0;
}

# ·······································
# Checking if the computer is AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.IsOnAC()
{
    return 0;
}

# ····································
# Checking if the battery has history.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.HasHistory()
{
    return 0;
}

# ··········································
# Checking if the computer has power supply.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.HasPowerSupply()
{
    return 0;
}

# ·······································
# Checking if the battery has statistics.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.HasStatistics()
{
    return 0;
}

# ···································
# Checking if the battery is present.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.IsPresent()
{
    return 0;
}

# ·········································
# Checking if the computer is rechargeable.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.IsRechargeable()
{
    return 0;
}

## ==============================================

## BATTERY VALUES GETTERS

# ····················································································
# Getting every informations about the computer's battery-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetHardwareInfos()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetCapacity()
{
    return 0;
}

# ···························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetEnergy()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetEnergyEmpty()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetEnergyFull()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetEnergyFullDesign()
{
    return 0;
}

# ··································
# Getting the battery's energy rate.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetEnergyRate()
{
    return 0;
}

# ····························
# Getting the battery's model.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetModel()
{
    return 0;
}

# ························
# Getting the battery's

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetNativePath()
{
    return 0;
}

# ·································
# Getting the battery's percentage.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetPercentage()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetSerialNumber()
{
    return 0;
}

# ····························
# Getting the battery's state.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetState()
{
    return 0;
}

# ·································
# Getting the battery's technology.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetTechnology()
{
    return 0;
}

# ·················································
# Getting the time remaining until the full charge.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetTimeBeforeFullCharge()
{
    return 0;
}

# ·····························
# Getting the battery's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetVendor()
{
    return 0;
}

# ··································
# Getting the battery serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetVoltage()
{
    return 0;
}

# ··································
# Getting the battery warning level.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Battery.GetWarningLevel()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Ports.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the computer's physical ports-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's ports-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.GetHardwareInfos()
{
    return 0;
}

# ······································
# Getting the total number of USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.GetUSBPortsNumber()
{
    return 0;
}

# ··········································
# Getting the number of available USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.GetAvailableUSBPortsNumber()
{
    return 0;
}

# ·····································
# Getting the number of used USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.GetUsedUSBPortsNumber()
{
    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfOpticalDiscDriveExists()
{
    return 0;
}

# ······································································
# Checking if an optical disc drive is mounted, and if no disc is .

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfOpticalDiscDriveIsEmpty()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfOpticalDiscDriveTrayIsClosed()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·················································
# Checking if an optical disc drive's tray is open.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfOpticalDiscDriveTrayIsOpen()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ··················································
# Checking if an optical disc drive contains a disk.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfOpticalDiscDriveContainsDisk()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······································
# Checking if a SD card port is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfSDCardReaderIsMounted()
{
    return 0;
}

# ······························
# Checking if a VGA port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfVGAPortExists()
{
    return 0;
}

# ···············································
# Checking if the existing VGA port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfVGAPortAvailable()
{
    return 0;
}

# ································
# Checking if an HDMI port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfHDMIPortExists()
{
    return 0;
}

# ················································
# Checking if the existing HDMI port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfHDMIPortAvailable()
{
    return 0;
}

# ··································
# Checking if a joystick is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Ports.CheckIfJoystickIsPlugged()
{
    #**** Variables ****
    local JS="$(
        if      BU.Main.OS.IsLinux;         then    dmesg | grep Joystick;
        elif    BU.Main.OS.IsHaiku;         then    true;
        fi
    )";

    #**** Code ****
    if [ -n "${JS}" ]; then return 0; else return 1; fi
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : USB.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the USB-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's USB-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.USB.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Bluetooth.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the Bluetooth-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ······················································································
# Getting every informations about the computer's Bluetooth-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Bluetooth.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : PCI.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's PCI(e) expansion buses with the help of the system commands on the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's PCI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.PCI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : General.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

#


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···············································
# Getting every computer's hardware informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.Haiku.Audio.GetHardwareInfos()        -> Hardware -> Audio.Haiku.lib
#   - BU.Hardware.Haiku.Battery.GetHardwareInfos()      -> Hardware -> Battery.Haiku.lib
#   - BU.Hardware.Haiku.Bluetooth.GetHardwareInfos()    -> Hardware -> Bluetooth.Haiku.lib
#   - BU.Hardware.Haiku.CPU.GetHardwareInfos()          -> Hardware -> CPU.Haiku.lib
#   - BU.Hardware.Haiku.Drive.GetHardwareInfos()        -> Hardware -> Drive.Haiku.lib
#   - BU.Hardware.Haiku.Fan.GetHardwareInfos()          -> Hardware -> Fan.Haiku.lib
#   - BU.Hardware.Haiku.FloppyDisk.GetHardwareInfos()   -> Hardware -> FloppyDisk.Haiku.lib
#   - BU.Hardware.Haiku.General.GetHardwareInfos()      -> Hardware -> General.Haiku.lib (this file)
#   - BU.Hardware.Haiku.GPU.GetHardwareInfos()          -> Hardware -> GPU.Haiku.lib
#   - BU.Hardware.Haiku.HDMI.GetHardwareInfos()         -> Hardware -> HDMI.Haiku.lib
#   - BU.Hardware.Haiku.Keyboard.GetHardwareInfos()     -> Hardware -> Keyboard.Haiku.lib
#   - BU.Hardware.Haiku.Memory.GetHardwareInfos()       -> Hardware -> Memory.Haiku.lib
#   - BU.Hardware.Haiku.Motherboard.GetHardwareInfos()  -> Hardware -> Motherboard.Haiku.lib
#   - BU.Hardware.Haiku.Mouse.GetHardwareInfos()        -> Hardware -> Mouse.Haiku.lib
#   - BU.Hardware.Haiku.PCI.GetHardwareInfos()          -> Hardware -> PCI.Haiku.lib
#   - BU.Hardware.Haiku.Ports.GetHardwareInfos()        -> Hardware -> Ports.Haiku.lib
#   - BU.Hardware.Haiku.Screen.GetHardwareInfos()       -> Hardware -> Screen.Haiku.lib
#   - BU.Hardware.Haiku.SDCard.GetHardwareInfos()       -> Hardware -> SDCard.Haiku.lib
#   - BU.Hardware.Haiku.Touchpad.GetHardwareInfos()     -> Hardware -> Touchpad.Haiku.lib
#   - BU.Hardware.Haiku.USB.GetHardwareInfos()          -> Hardware -> USB.Haiku.lib
#   - BU.Hardware.Haiku.VGA.GetHardwareInfos()          -> Hardware -> VGA.Haiku.lib

# shellcheck disable=
function BU.Hardware.Haiku.General.GetAllHardwareInfos()
{
    BU.Hardware.Haiku.Audio.GetHardwareInfos;
    BU.Hardware.Haiku.Battery.GetHardwareInfos;
    BU.Hardware.Haiku.Bluetooth.GetHardwareInfos;

    BU.Hardware.Haiku.CPU.GetHardwareInfos;
    BU.Hardware.Haiku.Drive.GetHardwareInfos;
    BU.Hardware.Haiku.Fan.GetHardwareInfos;

    BU.Hardware.Haiku.FloppyDisk.GetHardwareInfos;
    BU.Hardware.Haiku.General.GetHardwareInfos;
    BU.Hardware.Haiku.GPU.GetHardwareInfos;

    BU.Hardware.Haiku.HDMI.GetHardwareInfos;
    BU.Hardware.Haiku.Keyboard.GetHardwareInfos;
    BU.Hardware.Haiku.Memory.GetHardwareInfos;

    BU.Hardware.Haiku.Motherboard.GetHardwareInfos;
    BU.Hardware.Haiku.Mouse.GetHardwareInfos;
    BU.Hardware.Haiku.PCI.GetHardwareInfos;

    BU.Hardware.Haiku.Ports.GetHardwareInfos;
    BU.Hardware.Haiku.Screen.GetHardwareInfos;
    BU.Hardware.Haiku.SDCard.GetHardwareInfos;

    BU.Hardware.Haiku.Touchpad.GetHardwareInfos;
    BU.Hardware.Haiku.USB.GetHardwareInfos;
    BU.Hardware.Haiku.VGA.GetHardwareInfos;

    return 0;
}

# ················································································
# Getting every general hardware components (like the computer's chassis, etc...).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.Haiku.General.GetChassis()        -> Hardware -> General.Haiku.lib (this file)
#   - BU.Hardware.Haiku.General.GetChassisType()    -> Hardware -> General.Haiku.lib (this file)
#   - BU.Hardware.Haiku.General.GetMachineID()      -> Hardware -> General.Haiku.lib (this file)
#   - BU.Hardware.Haiku.General.GetBootID()         -> Hardware -> General.Haiku.lib (this file)

# shellcheck disable=
function BU.Hardware.Haiku.General.GetHardwareInfos()
{
    BU.Hardware.Haiku.General.GetChassis;
    BU.Hardware.Haiku.General.GetChassisType;
    BU.Hardware.Haiku.General.GetMachineID;
    BU.Hardware.Haiku.General.GetBootID;

    return 0;
}

# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······························
# Getting the computer's chassis.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.General.GetChassis()
{
    return 0;
}

# ····································
# Getting the computer's chassis type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.General.GetChassisType()
{
    return 0;
}

# ·························
# Getting the machine's ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.General.GetMachineID()
{
    return 0;
}

# ····················
# Getting the boot ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.General.GetBootID()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Memory.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the memory-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

## CHECKING THE COMPUTER'S MEMORY HARDWARE DATA

# ································································
# Checking if the type of the currently used memory stick is DDR4.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Memory.CheckIfMemoryDDR4() { BU.Hardware.Haiku.Memory.GetMemoryType 'DDR4' || return 1; }

## ==============================================

## GETTING THE COMPUTER'S MEMORY HARDWARE DATA

##

# ···················································································
# Getting every informations about the computer's memory-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Memory.GetHardwareInfos()
{
    return 0;
}

# ·······································
# Getting the number of RAM slots in use.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Memory.GetUsedRAMSlotsNumber()
{
    return 0;
}

# ················································
# Getting the number of RAM slots available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Memory.GetAvailableRamSlotsNumber()
{
    return 0;
}

# ····························
# Getting memory max capacity.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Memory.GetMaxMemoryCapacity()
{
    return 0;
}

# ····················
# Getting memory type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.Memory.GetMemoryType()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : SDCard.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the SD card(s)-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's SD cards-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.SDCard.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : VGA.Haiku.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the VGA-related hardware functionalities of the Haiku operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's VGA-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Haiku.VGA.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Keyboard.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's keyboard with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····································
# Checking if the keyboard is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Keyboard.IsKeyboardPlugged()
{
    return 0;
}

## ==============================================

# ·····················································································
# Getting every informations about the computer's keyboard-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Keyboard.GetHardwareInfos()
{
    return 0;
}

# ·············································
# Getting the current layout (AZERTY | QWERTY).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Keyboard.GetLayout()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : VGA.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's VGA port with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's VGA-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.VGA.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Drive.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's hard drive with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GENERAL STORAGE SUPPORT FUNCTIONS

##

## ==============================================

##
## DEBUG ID :

# ·······················································································
# Getting every informations about the computer's hard drive-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetHardwareInfos()
{
    return 0;
}

# ·································
# Getting the size of a hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetDriveSize()
{
    return 0;
}

# ······································································
# Getting the total size by adding up several or every hard drives size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.AddUpDrivesSizes()
{
    return 0;
}

# ··················································································································
# Creating a new partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.CreateNewPartition()
{
    return 0;
}

# ··············································································································
# Deleting a partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.DeletePartition()
{
    return 0;
}

# ··········································
# Getting the number of existing partitions.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetPartitionsNumber()
{
    return 0;
}

# ·····················································································
# Getting the number of existing partitions by size (more or less than a defined size).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetPartitionsNumberBySize()
{
    return 0;
}

# ·········································································
# Getting the number of existing partitions according to their file system.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetPartitionsNumberByFS()
{
    return 0;
}

# ································
# Getting the size of a partition.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetPartitionSize()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HARD DRIVES (HDDs / SSDs)

## CHECKING THE HARD DRIVE(S) INFORMATIONS

# ·············································
# Checking if the targeted hard drive is a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsHDD()
{
    return 0;
}

# ·············································
# Checking if the targeted hard drive is a SDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsSSD()
{
    return 0;
}

# ········································
# Checking how many hard drives are plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.CountPluggedDrives()
{
    return 0;
}

# ··························································
# Counting the number of HDDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.CountHDD()
{
    return 0;
}

# ··························································
# Counting the number of SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.CountSSD()
{
    return 0;
}

# ···································································
# Counting the number of HDDs and SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.CountHDD+SSD()
{
    return 0;
}

## ==============================================

## GETTING THE HARD DRIVE(S) INFORMATIONS

# ····································
# Getting the rotation speed of a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetRotationSpeed()
{
    return 0;
}

# ·····································
# Getting the vendor of the hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetVendor()
{
    return 0;
}

# ····································
# Getting the disk's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### SD CARDS

## CHECKING THE SD CARD(S) INFORMATIONS

# ··································································
# Checking if the targeted storage device is a SD card (any format).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsSDCard()
{
    return 0;
}

# ···························································
# Checking if the targeted storage device is a mini SD card.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsMiniSDCard()
{
    return 0;
}

# ···························································
# Checking if the targeted storage device is a micro SD card.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsMicroSDCard()
{
    return 0;
}

## ==============================================

## STORAGE

# ···························································
# Checking if the targeted SD card's capacity

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsSDCardCapacitySDSC()
{
    return 0;
}

# ···························································
# Checking if the targeted SD card's capacity

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsSDCardCapacitySDHC()
{
    return 0;
}

# ···························································
# Checking if the targeted SD card's capacity

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsSDCardCapacitySDXC()
{
    return 0;
}

# ···························································
# Checking if the targeted SD card's capacity

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsSDCardCapacitySDUC()
{
    return 0;
}

## ==============================================

## GETTING THE SD CARD(S) INFORMATIONS

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### USB STICKS(S)

## CHECKING THE USB STICK(S) INFORMATIONS

## ==============================================

## GETTING THE USB STICK(S) INFORMATIONS

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### FLOPPY DISKS

## CHECKING THE FLOPPY DISK(S) INFORMATIONS

# ·························································
# Checking if the targeted storage device is a floppy disk.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Drive.IsFloppyDisk()
{
    return 0;
}

## ==============================================

## GETTING THE FLOPPY DISK(S) INFORMATIONS


## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : USB.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's USB port(s) and stick(s) with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's USB-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.USB.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : PCI.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's PCI(e) expansion buses with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's PCI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.PCI.GetHardwareInfos()
{
    return 0;
}

# ·····················································································
# Getting every informations about the computer's touchpad-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Touchpad.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Motherboard.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's motherboard with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····························································
# Getting every informations about the computer's motherboard.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Motherboard.GetHardwareInfos()
{
    return 0;
}

# ···········································
# Getting the motherboard's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Motherboard.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Screen.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's monitor with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Screen.IsMonitorPlugged()
{
    return 0;
}

# ········································
# Checking if an extra monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Screen.IsExtraMonitorPlugged()
{
    return 0;
}

## ==============================================

## GETTING THE SCREEN'S DATA

# ···················································································
# Getting every informations about the computer's screen-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Screen.GetHardwareInfos()
{
    return 0;
}

# ······························
# Getting the screen resolution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Screen.GetResolution()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Audio.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the audio-related hardware functionalities of BSD-related operating systems.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_HARDWARE_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :
##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's audio-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Audio.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : USB.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's USB port(s) and stick(s) with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's USB-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.USB.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : GPU.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's GPU with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GPU'S GENERAL INFORMATIONS

##

# ·····················································································
# Getting every informations about the computer's GPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.GPU.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Drive.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's hard drive with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ························································································
# Getting every informations about the computer's hard drives-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetHardwareInfos()
{
    return 0;
}

# ·································
# Getting the size of a hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetDriveSize()
{
    return 0;
}

# ······································································
# Getting the total size by adding up several or every hard drives size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.AddUpDrivesSizes()
{
    return 0;
}

# ··················································································································
# Creating a new partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.CreateNewPartition()
{
    return 0;
}

# ··············································································································
# Deleting a partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.DeletePartition()
{
    return 0;
}

# ··········································
# Getting the number of existing partitions.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetPartitionsNumber()
{
    return 0;
}

# ·····················································································
# Getting the number of existing partitions by size (more or less than a defined size).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetPartitionsNumberBySize()
{
    return 0;
}

# ·········································································
# Getting the number of existing partitions according to their file system.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetPartitionsNumberByFS()
{
    return 0;
}

# ································
# Getting the size of a partition.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetPartitionSize()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HARD DRIVES (HDDs / SSDs)

## CHECKING THE HARD DRIVE(S) INFORMATIONS

# ·············································
# Checking if the targeted hard drive is a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.IsHDD()
{
    return 0;
}

# ·············································
# Checking if the targeted hard drive is a SDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.IsSSD()
{
    return 0;
}

# ········································
# Checking how many hard drives are plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.CountPluggedDrives()
{
    return 0;
}

# ··························································
# Counting the number of HDDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.CountHDD()
{
    return 0;
}

# ··························································
# Counting the number of SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.CountSSD()
{
    return 0;
}

# ···································································
# Counting the number of HDDs and SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.CountHDD+SSD()
{
    return 0;
}

## ==============================================

## GETTING THE HARD DRIVE(S) INFORMATIONS

# ····································
# Getting the rotation speed of a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetRotationSpeed()
{
    return 0;
}

# ·····································
# Getting the vendor of the hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetVendor()
{
    return 0;
}

# ····································
# Getting the disk's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Drive.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Battery.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's battery with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···········································
# Checking if the computer is not AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.IsNotOnAC()
{
    return 0;
}

# ·······································
# Checking if the computer is AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.IsOnAC()
{
    return 0;
}

# ····································
# Checking if the battery has history.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.HasHistory()
{
    return 0;
}

# ··········································
# Checking if the computer has power supply.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.HasPowerSupply()
{
    return 0;
}

# ·······································
# Checking if the battery has statistics.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.HasStatistics()
{
    return 0;
}

# ···································
# Checking if the battery is present.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.IsPresent()
{
    return 0;
}

# ·········································
# Checking if the computer is rechargeable.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.IsRechargeable()
{
    return 0;
}

## ==============================================

## BATTERY VALUES GETTERS

# ····················································································
# Getting every informations about the computer's battery-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetHardwareInfos()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetCapacity()
{
    return 0;
}

# ···························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetEnergy()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetEnergyEmpty()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetEnergyFull()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetEnergyFullDesign()
{
    return 0;
}

# ··································
# Getting the battery's energy rate.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetEnergyRate()
{
    return 0;
}

# ····························
# Getting the battery's model.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetModel()
{
    return 0;
}

# ························
# Getting the battery's

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetNativePath()
{
    return 0;
}

# ·································
# Getting the battery's percentage.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetPercentage()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetSerialNumber()
{
    return 0;
}

# ····························
# Getting the battery's state.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetState()
{
    return 0;
}

# ·································
# Getting the battery's technology.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetTechnology()
{
    return 0;
}

# ·················································
# Getting the time remaining until the full charge.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetTimeBeforeFullCharge()
{
    return 0;
}

# ·····························
# Getting the battery's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetVendor()
{
    return 0;
}

# ··································
# Getting the battery serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetVoltage()
{
    return 0;
}

# ··································
# Getting the battery warning level.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Battery.GetWarningLevel()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : VGA.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's VGA port with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's VGA-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.VGA.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Mouse.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's mouse with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a mouse is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Mouse.IsMousePlugged()
{
    return 0;
}

# ··················································································
# Getting every informations about the computer's mouse-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Mouse.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : General.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

#


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···············································
# Getting every computer's hardware informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.BSD.Audio.GetHardwareInfos()          -> Hardware -> Audio.BSD.lib
#   - BU.Hardware.BSD.Battery.GetHardwareInfos()        -> Hardware -> Battery.BSD.lib
#   - BU.Hardware.BSD.Bluetooth.GetHardwareInfos()      -> Hardware -> Bluetooth.BSD.lib
#   - BU.Hardware.BSD.CPU.GetHardwareInfos()            -> Hardware -> CPU.BSD.lib
#   - BU.Hardware.BSD.Drive.GetHardwareInfos()          -> Hardware -> Drive.BSD.lib
#   - BU.Hardware.BSD.Fan.GetHardwareInfos()            -> Hardware -> Fan.BSD.lib
#   - BU.Hardware.BSD.FloppyDisk.GetHardwareInfos()     -> Hardware -> FloppyDisk.BSD.lib
#   - BU.Hardware.BSD.General.GetHardwareInfos()        -> Hardware -> General.BSD.lib (this file)
#   - BU.Hardware.BSD.GPU.GetHardwareInfos()            -> Hardware -> GPU.BSD.lib
#   - BU.Hardware.BSD.HDMI.GetHardwareInfos()           -> Hardware -> HDMI.BSD.lib
#   - BU.Hardware.BSD.Keyboard.GetHardwareInfos()       -> Hardware -> Keyboard.BSD.lib
#   - BU.Hardware.BSD.Memory.GetHardwareInfos()         -> Hardware -> Memory.BSD.lib
#   - BU.Hardware.BSD.Motherboard.GetHardwareInfos()    -> Hardware -> Motherboard.BSD.lib
#   - BU.Hardware.BSD.Mouse.GetHardwareInfos()          -> Hardware -> Mouse.BSD.lib
#   - BU.Hardware.BSD.PCI.GetHardwareInfos()            -> Hardware -> PCI.BSD.lib
#   - BU.Hardware.BSD.Ports.GetHardwareInfos()          -> Hardware -> Ports.BSD.lib
#   - BU.Hardware.BSD.Screen.GetHardwareInfos()         -> Hardware -> Screen.BSD.lib
#   - BU.Hardware.BSD.SDCard.GetHardwareInfos()         -> Hardware -> SDCard.BSD.lib
#   - BU.Hardware.BSD.Touchpad.GetHardwareInfos()       -> Hardware -> Touchpad.BSD.lib
#   - BU.Hardware.BSD.USB.GetHardwareInfos()            -> Hardware -> USB.BSD.lib
#   - BU.Hardware.BSD.VGA.GetHardwareInfos()            -> Hardware -> VGA.BSD.lib

# shellcheck disable=
function BU.Hardware.BSD.General.GetAllHardwareInfos()
{
    BU.Hardware.BSD.Audio.GetHardwareInfos;
    BU.Hardware.BSD.Battery.GetHardwareInfos;
    BU.Hardware.BSD.Bluetooth.GetHardwareInfos;

    BU.Hardware.BSD.CPU.GetHardwareInfos;
    BU.Hardware.BSD.Drive.GetHardwareInfos;
    BU.Hardware.BSD.Fan.GetHardwareInfos;

    BU.Hardware.BSD.FloppyDisk.GetHardwareInfos;
    BU.Hardware.BSD.General.GetHardwareInfos;
    BU.Hardware.BSD.GPU.GetHardwareInfos;

    BU.Hardware.BSD.HDMI.GetHardwareInfos;
    BU.Hardware.BSD.Keyboard.GetHardwareInfos;
    BU.Hardware.BSD.Memory.GetHardwareInfos;

    BU.Hardware.BSD.Motherboard.GetHardwareInfos;
    BU.Hardware.BSD.Mouse.GetHardwareInfos;
    BU.Hardware.BSD.PCI.GetHardwareInfos;

    BU.Hardware.BSD.Ports.GetHardwareInfos;
    BU.Hardware.BSD.Screen.GetHardwareInfos;
    BU.Hardware.BSD.SDCard.GetHardwareInfos;

    BU.Hardware.BSD.Touchpad.GetHardwareInfos;
    BU.Hardware.BSD.USB.GetHardwareInfos;
    BU.Hardware.BSD.VGA.GetHardwareInfos;

    return 0;
}

# ················································································
# Getting every general hardware components (like the computer's chassis, etc...).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.BSD.General.GetChassis()      -> Hardware -> General.BSD.lib (this file)
#   - BU.Hardware.BSD.General.GetChassisType()  -> Hardware -> General.BSD.lib (this file)
#   - BU.Hardware.BSD.General.GetMachineID()    -> Hardware -> General.BSD.lib (this file)
#   - BU.Hardware.BSD.General.GetBootID()       -> Hardware -> General.BSD.lib (this file)

# shellcheck disable=
function BU.Hardware.BSD.General.GetHardwareInfos()
{
    BU.Hardware.BSD.General.GetChassis;
    BU.Hardware.BSD.General.GetChassisType;
    BU.Hardware.BSD.General.GetMachineID;
    BU.Hardware.BSD.General.GetBootID;

    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······························
# Getting the computer's chassis.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.General.GetChassis()
{
    return 0;
}

# ····································
# Getting the computer's chassis type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.General.GetChassisType()
{
    return 0;
}

# ·························
# Getting the machine's ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.General.GetMachineID()
{
    return 0;
}

# ····················
# Getting the boot ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.General.GetBootID()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Bluetooth.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's Bluetooth module with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ······················································································
# Getting every informations about the computer's Bluetooth-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Bluetooth.GetHardwareInfos()
{
    return 0;
}
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Memory.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's memory with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

## CHECKING THE COMPUTER'S MEMORY HARDWARE DATA

# ································································
# Checking if the type of the currently used memory stick is DDR4.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Memory.CheckIfMemoryDDR4() { BU.Hardware.BSD.Memory.GetMemoryType 'DDR4' || return 1; }

## ==============================================

## GETTING THE COMPUTER'S MEMORY HARDWARE DATA

##

# ···················································································
# Getting every informations about the computer's memory-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Memory.GetHardwareInfos()
{
    return 0;
}

# ·······································
# Getting the number of RAM slots in use.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Memory.GetUsedRAMSlotsNumber()
{
    return 0;
}

# ················································
# Getting the number of RAM slots available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Memory.GetAvailableRamSlotsNumber()
{
    return 0;
}

# ····························
# Getting memory max capacity.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Memory.GetMaxMemoryCapacity()
{
    return 0;
}

# ····················
# Getting memory type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Memory.GetMemoryType()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's CPU with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE



## ==============================================

## GETTING GENERAL DATA

# ················································································
# Getting every informations about the computer's CPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetHardwareInfos()
{
    return 0;
}

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetInfos()                 { if BU.Main.CMDS.GetCommandPath 'lscpu'; then lscpu; fi }

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetVendor()                { if BU.Main.CMDS.GetCommandPath 'lshw'; then BU.Main.Echo.Msg "$(lshw -class processor | grep )" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE

## CHECKING THE ARCHITECTURE OF THE CPU(s)

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.Is32Bits()                 { return 0; }

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.Is64Bits()                 { return 0; }

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchAArch32()            { true; }

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchAArch64()            { true; }

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchARM32()              { true; }

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchARM64()              { true; }

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchAMD64()              { true; }

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchi386()               { true; }

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchPPC()                { true; }

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchMIPS()               { true; }

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsArchRISCV()              { true; }

## ==============================================

## GETTING THE CPU(s) ARCHITECTURE'S DATA

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetArch()              { if BU.Main.CMDS.GetCommandPath 'uname'; then BU.Main.Echo.Msg "$(uname -m)" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES

## CHECKING THE CPU(s) CORES DATA

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.IsMonocore()            { return 0; }

## ==============================================

## GETTING THE CPU(s) CORES DATA

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetCoresNumber()           { if BU.Main.CMDS.GetCommandPath 'nproc'; then BU.Main.Echo.Msg "$(nproc)" '-n'; return 0; else return 1; fi; }

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetLogicalCoresNumber()    { return 0; }

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetPhysicalCoresNumber()   { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK

## CHECKING THE CPU'S CLOCK INFORMATIONS

## ==============================================

## GETTING THE CPU'S CLOCK DATA

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetClockFrequency()        { if BU.Main.CMDS.GetCommandPath 'lshw'; then if BU.Main.Checkings.CheckRootEUID; then BU.Main.Echo.Msg "$(lshw -class processor | awk 'FNR == 13 {print $2}' )" '-n'; return 0; else return 1; fi; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :




## ==============================================

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetAdressSizes()
{
    return 0;
}

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.CPU.GetSocketsNumber()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Ports.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's physical ports with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's ports-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.GetHardwareInfos()
{
    return 0;
}

# ······································
# Getting the total number of USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.GetUSBPortsNumber()
{
    return 0;
}

# ··········································
# Getting the number of available USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.GetAvailableUSBPortsNumber()
{
    return 0;
}

# ·····································
# Getting the number of used USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.GetUsedUSBPortsNumber()
{
    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfOpticalDiscDriveExists()
{
    return 0;
}

# ······································································
# Checking if an optical disc drive is mounted, and if no disc is .

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfOpticalDiscDriveIsEmpty()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfOpticalDiscDriveTrayIsClosed()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·················································
# Checking if an optical disc drive's tray is open.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfOpticalDiscDriveTrayIsOpen()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ··················································
# Checking if an optical disc drive contains a disk.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfOpticalDiscDriveContainsDisk()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······································
# Checking if a SD card port is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfSDCardReaderIsMounted()
{
    return 0;
}

# ······························
# Checking if a VGA port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfVGAPortExists()
{
    return 0;
}

# ···············································
# Checking if the existing VGA port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfVGAPortAvailable()
{
    return 0;
}

# ································
# Checking if an HDMI port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfHDMIPortExists()
{
    return 0;
}

# ················································
# Checking if the existing HDMI port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfHDMIPortAvailable()
{
    return 0;
}

# ··································
# Checking if a joystick is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Ports.CheckIfJoystickIsPlugged()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Keyboard.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's keyboard with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····································
# Checking if the keyboard is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Keyboard.IsKeyboardPlugged()
{
    return 0;
}

# ·····················································································
# Getting every informations about the computer's keyboard-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Keyboard.GetHardwareInfos()
{
    return 0;
}

# ·············································
# Getting the current layout (AZERTY | QWERTY).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Keyboard.GetLayout()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : SDCard.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's SD card(s) with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's SD cards-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.SDCard.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : HDMI.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's HDMI port with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·················································································
# Getting every informations about the computer's HDMI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.HDMI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Touchpad.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the laptop's touchpad with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··································
# Checking if a touchpad is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Touchpad.IsTouchpadPlugged()
{
    return 0;
}

# ·····················································································
# Getting every informations about the computer's touchpad-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Touchpad.GetHardwareInfos()
{
    return 0;
}

# ···································
# Getting the vendor of the touchpad.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Touchpad.GetVendor()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Fan.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's fan with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's fan-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.Fan.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : FloppyDisk.BSD.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's floppy disk(s) with the help of the system commands on a BSD-based operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·························································································
# Getting every informations about the computer's floppy disks-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.BSD.FloppyDisk.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : HDMI.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's HDMI port with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·················································································
# Getting every informations about the computer's HDMI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.HDMI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : PCI.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's PCI(e) expansion buses with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's PCI-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.PCI.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Keyboard.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's keyboard with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····································
# Checking if the keyboard is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Keyboard.IsKeyboardPlugged()
{
    return 0;
}

# ·····················································································
# Getting every informations about the computer's keyboard-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Keyboard.GetHardwareInfos()
{
    return 0;
}

# ·············································
# Getting the current layout (AZERTY | QWERTY).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Keyboard.GetLayout()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's CPU with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE



## ==============================================

## GETTING GENERAL DATA

# ················································································
# Getting every informations about the computer's CPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetHardwareInfos()
{
    return 0;
}

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetInfos()                 { if BU.Main.CMDS.GetCommandPath 'lscpu'; then lscpu; fi }

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetVendor()                { if BU.Main.CMDS.GetCommandPath 'lshw'; then BU.Main.Echo.Msg "$(lshw -class processor | grep )" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE

## CHECKING THE ARCHITECTURE OF THE CPU(s)

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.Is32Bits()                 { return 0;}

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.Is64Bits()                 { return 0; }

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchAArch32()            { true; }

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchAArch64()            { true; }

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchARM32()              { true; }

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchARM64()              { true; }

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchAMD64()              { true; }

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchi386()               { true; }

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchPPC()                { true; }

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchMIPS()               { true; }

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsArchRISCV()              { true; }

## ==============================================

## GETTING THE CPU(s) ARCHITECTURE'S DATA

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetArch()              { if BU.Main.CMDS.GetCommandPath 'uname'; then BU.Main.Echo.Msg "$(uname -m)" '-n'; return 0; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES

## CHECKING THE CPU(s) CORES DATA

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.IsMonocore()            { return 0; }

## ==============================================

## GETTING THE CPU(s) CORES DATA

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetCoresNumber()           { if BU.Main.CMDS.GetCommandPath 'nproc'; then BU.Main.Echo.Msg "$(nproc)" '-n'; return 0; else return 1; fi; }

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetLogicalCoresNumber()    { return 0; }

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetPhysicalCoresNumber()   { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK

## CHECKING THE CPU'S CLOCK INFORMATIONS

## ==============================================

## GETTING THE CPU'S CLOCK DATA

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetClockFrequency()        { if BU.Main.CMDS.GetCommandPath 'lshw'; then if BU.Main.Checkings.CheckRootEUID; then BU.Main.Echo.Msg "$(lshw -class processor | awk 'FNR == 13 {print $2}' )" '-n'; return 0; else return 1; fi; else return 1; fi; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :




## ==============================================

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetAdressSizes()           { return 0; }

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.CPU.GetSocketsNumber()         { return 0; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : General.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

#


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ···············································
# Getting every computer's hardware informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.OSX.Audio.GetHardwareInfos()          -> Hardware -> Audio.OSX.lib
#   - BU.Hardware.OSX.Battery.GetHardwareInfos()        -> Hardware -> Battery.OSX.lib
#   - BU.Hardware.OSX.Bluetooth.GetHardwareInfos()      -> Hardware -> Bluetooth.OSX.lib
#   - BU.Hardware.OSX.CPU.GetHardwareInfos()            -> Hardware -> CPU.OSX.lib
#   - BU.Hardware.OSX.Drive.GetHardwareInfos()          -> Hardware -> Drive.OSX.lib
#   - BU.Hardware.OSX.Fan.GetHardwareInfos()            -> Hardware -> Fan.OSX.lib
#   - BU.Hardware.OSX.FloppyDisk.GetHardwareInfos()     -> Hardware -> FloppyDisk.OSX.lib
#   - BU.Hardware.OSX.General.GetHardwareInfos()        -> Hardware -> General.OSX.lib (this file)
#   - BU.Hardware.OSX.GPU.GetHardwareInfos()            -> Hardware -> GPU.OSX.lib
#   - BU.Hardware.OSX.HDMI.GetHardwareInfos()           -> Hardware -> HDMI.OSX.lib
#   - BU.Hardware.OSX.Keyboard.GetHardwareInfos()       -> Hardware -> Keyboard.OSX.lib
#   - BU.Hardware.OSX.Memory.GetHardwareInfos()         -> Hardware -> Memory.OSX.lib
#   - BU.Hardware.OSX.Motherboard.GetHardwareInfos()    -> Hardware -> Motherboard.OSX.lib
#   - BU.Hardware.OSX.Mouse.GetHardwareInfos()          -> Hardware -> Mouse.OSX.lib
#   - BU.Hardware.OSX.PCI.GetHardwareInfos()            -> Hardware -> PCI.OSX.lib
#   - BU.Hardware.OSX.Ports.GetHardwareInfos()          -> Hardware -> Ports.OSX.lib
#   - BU.Hardware.OSX.Screen.GetHardwareInfos()         -> Hardware -> Screen.OSX.lib
#   - BU.Hardware.OSX.SDCard.GetHardwareInfos()         -> Hardware -> SDCard.OSX.lib
#   - BU.Hardware.OSX.Touchpad.GetHardwareInfos()       -> Hardware -> Touchpad.OSX.lib
#   - BU.Hardware.OSX.USB.GetHardwareInfos()            -> Hardware -> USB.OSX.lib
#   - BU.Hardware.OSX.VGA.GetHardwareInfos()            -> Hardware -> VGA.OSX.lib

# shellcheck disable=
function BU.Hardware.OSX.General.GetAllHardwareInfos()
{
    BU.Hardware.OSX.Audio.GetHardwareInfos;
    BU.Hardware.OSX.Battery.GetHardwareInfos;
    BU.Hardware.OSX.Bluetooth.GetHardwareInfos;

    BU.Hardware.OSX.CPU.GetHardwareInfos;
    BU.Hardware.OSX.Drive.GetHardwareInfos;
    BU.Hardware.OSX.Fan.GetHardwareInfos;

    BU.Hardware.OSX.FloppyDisk.GetHardwareInfos;
    BU.Hardware.OSX.General.GetHardwareInfos;
    BU.Hardware.OSX.GPU.GetHardwareInfos;

    BU.Hardware.OSX.HDMI.GetHardwareInfos;
    BU.Hardware.OSX.Keyboard.GetHardwareInfos;
    BU.Hardware.OSX.Memory.GetHardwareInfos;

    BU.Hardware.OSX.Motherboard.GetHardwareInfos;
    BU.Hardware.OSX.Mouse.GetHardwareInfos;
    BU.Hardware.OSX.PCI.GetHardwareInfos;

    BU.Hardware.OSX.Ports.GetHardwareInfos;
    BU.Hardware.OSX.Screen.GetHardwareInfos;
    BU.Hardware.OSX.SDCard.GetHardwareInfos;

    BU.Hardware.OSX.Touchpad.GetHardwareInfos;
    BU.Hardware.OSX.USB.GetHardwareInfos;
    BU.Hardware.OSX.VGA.GetHardwareInfos;

    return 0;
}

# ················································································
# Getting every general hardware components (like the computer's chassis, etc...).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.OSX.General.GetChassis()      -> Hardware -> General.OSX.lib (this file)
#   - BU.Hardware.OSX.General.GetChassisType()  -> Hardware -> General.OSX.lib (this file)
#   - BU.Hardware.OSX.General.GetMachineID()    -> Hardware -> General.OSX.lib (this file)
#   - BU.Hardware.OSX.General.GetBootID()       -> Hardware -> General.OSX.lib (this file)

# shellcheck disable=
function BU.Hardware.OSX.General.GetHardwareInfos()
{
    BU.Hardware.OSX.General.GetChassis;
    BU.Hardware.OSX.General.GetChassisType;
    BU.Hardware.OSX.General.GetMachineID;
    BU.Hardware.OSX.General.GetBootID;

    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :

# ·······························
# Getting the computer's chassis.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.General.GetChassis()
{
    return 0;
}

# ····································
# Getting the computer's chassis type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.General.GetChassisType()
{
    return 0;
}

# ·························
# Getting the machine's ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.General.GetMachineID()
{
    return 0;
}

# ····················
# Getting the boot ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.General.GetBootID()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Mouse.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's mouse with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a mouse is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Mouse.IsMousePlugged()
{
    return 0;
}

# ··················································································
# Getting every informations about the computer's mouse-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Mouse.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Memory.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's memory with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

## CHECKING THE COMPUTER'S MEMORY HARDWARE DATA

# ································································
# Checking if the type of the currently used memory stick is DDR4.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.CheckIfMemoryDDR4() { BU.Hardware.OSX.Memory.GetMemoryType 'DDR4' || return 1; }

## ==============================================

## GETTING THE COMPUTER'S MEMORY HARDWARE DATA

# ···················································································
# Getting every informations about the computer's memory-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetHardwareInfos()
{
    return 0;
}

# ·······································
# Getting the number of RAM slots in use.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetUsedRAMSlotsNumber()
{
    return 0;
}

# ················································
# Getting the number of RAM slots available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetAvailableRamSlotsNumber()
{
    return 0;
}

# ····························
# Getting memory max capacity.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetMaxMemoryCapacity()
{
    return 0;
}

# ····················
# Getting memory type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Memory.GetMemoryType()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Ports.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's physical ports with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's ports-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.GetHardwareInfos()
{
    return 0;
}


# ······································
# Getting the total number of USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.GetUSBPortsNumber()
{
    return 0;
}

# ··········································
# Getting the number of available USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.GetAvailableUSBPortsNumber()
{
    return 0;
}

# ·····································
# Getting the number of used USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.GetUsedUSBPortsNumber()
{
    return 0;
}

# ················································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfOpticalDiscDriveExists()
{
    return 0;
}

# ········································································
# Checking if an optical disc drive is mounted, and if no disc is .

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfOpticalDiscDriveIsEmpty()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ················································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfOpticalDiscDriveTrayIsClosed()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······················································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfOpticalDiscDriveTrayIsOpen()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······················································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfOpticalDiscDriveContainsdisc()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ······················································
# Checking if an SD card port is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfSDCardReaderIsMounted()
{
    return 0;
}

# ······························
# Checking if a VGA port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfVGAPortExists()
{
    return 0;
}

# ···············································
# Checking if the existing VGA port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfVGAPortAvailable()
{
    return 0;
}

# ································
# Checking if an HDMI port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfHDMIPortExists()
{
    return 0;
}

# ················································
# Checking if the existing HDMI port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfHDMIPortAvailable()
{
    return 0;
}

# ··································
# Checking if a joystick is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Ports.CheckIfJoystickIsPlugged()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : FloppyDisk.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's floppy disk(s) with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·························································································
# Getting every informations about the computer's floppy disks-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.FloppyDisk.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : SDCard.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's SD card(s) with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·····················································································
# Getting every informations about the computer's SD cards-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.SDCard.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Bluetooth.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's Bluetooth module with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·························································································
# Getting every informations about the computer's Bluetooth-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Bluetooth.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : VGA.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's VGA port with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's VGA-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.VGA.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Screen.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's monitor with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ·································
# Checking if a monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Screen.IsMonitorPlugged()
{
    return 0;
}

# ········································
# Checking if an extra monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Screen.IsExtraMonitorPlugged()
{
    return 0;
}

## ==============================================

## GETTING THE SCREEN'S DATA

# ···················································································
# Getting every informations about the computer's screen-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Screen.GetHardwareInfos()
{
    return 0;
}


# ······························
# Getting the screen resolution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Screen.GetResolution()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Drive.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's hard drive with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ························································································
# Getting every informations about the computer's hard drives-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetHardwareInfos()
{
    return 0;
}

# ·································
# Getting the size of a hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetDriveSize()
{
    return 0;
}

# ······································································
# Getting the total size by adding up several or every hard drives size.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.AddUpDrivesSizes()
{
    return 0;
}

# ··················································································································
# Creating a new partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.CreateNewPartition()
{
    return 0;
}

# ··············································································································
# Deleting a partition (WARNING ! BE SURE YOU KNOW EXACTLY WHAT YOU ARE DOING WHEN CALLING THIS FUNCTION !!!!!).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.DeletePartition()
{
    return 0;
}

# ··········································
# Getting the number of existing partitions.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetPartitionsNumber()
{
    return 0;
}

# ·····················································································
# Getting the number of existing partitions by size (more or less than a defined size).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetPartitionsNumberBySize()
{
    return 0;
}

# ·········································································
# Getting the number of existing partitions according to their file system.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetPartitionsNumberByFS()
{
    return 0;
}

# ································
# Getting the size of a partition.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetPartitionSize()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HARD DRIVES (HDDs / SSDs)

## CHECKING THE HARD DRIVE(S) INFORMATIONS

# ·············································
# Checking if the targeted hard drive is a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.IsHDD()
{
    return 0;
}

# ·············································
# Checking if the targeted hard drive is a SDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.IsSSD()
{
    return 0;
}

# ········································
# Checking how many hard drives are plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.CountPluggedDrives()
{
    return 0;
}

# ··························································
# Counting the number of HDDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.CountHDD()
{
    return 0;
}

# ··························································
# Counting the number of SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.CountSSD()
{
    return 0;
}

# ···································································
# Counting the number of HDDs and SSDs among the plugged hard drives.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.CountHDD+SSD()
{
    return 0;
}

## ==============================================

## GETTING THE HARD DRIVE(S) INFORMATIONS

# ····································
# Getting the rotation speed of a HDD.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetRotationSpeed()
{
    return 0;
}

# ·····································
# Getting the vendor of the hard drive.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetVendor()
{
    return 0;
}

# ····································
# Getting the disk's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Drive.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Touchpad.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Macbook's touchpad with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··································
# Checking if a touchpad is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Touchpad.IsTouchpadPlugged()
{
    return 0;
}

# ·····················································································
# Getting every informations about the computer's touchpad-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Touchpad.GetHardwareInfos()
{
    return 0;
}

# ···································
# Getting the vendor of the touchpad.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Touchpad.GetVendor()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Battery.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's battery with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### BATTERY CHECKINGS

##

# ···········································
# Checking if the computer is not AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.IsNotOnAC()
{
    return 0;
}

# ·······································
# Checking if the computer is AC powered.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.IsOnAC()
{
    return 0;
}

# ····································
# Checking if the battery has history.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.HasHistory()
{
    return 0;
}

# ··········································
# Checking if the computer has power supply.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.HasPowerSupply()
{
    return 0;
}

# ·······································
# Checking if the battery has statistics.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.HasStatistics()
{
    return 0;
}

# ···································
# Checking if the battery is present.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.IsPresent()
{
    return 0;
}

# ·········································
# Checking if the computer is rechargeable.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.IsRechargeable()
{
    return 0;
}

## ==============================================

## BATTERY VALUES GETTERS

# ····················································································
# Getting every informations about the computer's battery-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetHardwareInfos()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetCapacity()
{
    return 0;
}

# ···························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetEnergy()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetEnergyEmpty()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetEnergyFull()
{
    return 0;
}

# ························
# Getting the battery's

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetEnergyFullDesign()
{
    return 0;
}

# ··································
# Getting the battery's energy rate.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetEnergyRate()
{
    return 0;
}

# ····························
# Getting the battery's model.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetModel()
{
    return 0;
}

# ························
# Getting the battery's

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetNativePath()
{
    return 0;
}

# ·································
# Getting the battery's percentage.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetPercentage()
{
    return 0;
}

# ····································
# Getting the battery's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetSerialNumber()
{
    return 0;
}

# ····························
# Getting the battery's state.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetState()
{
    return 0;
}

# ·································
# Getting the battery's technology.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetTechnology()
{
    return 0;
}

# ·················································
# Getting the time remaining until the full charge.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetTimeBeforeFullCharge()
{
    return 0;
}

# ·····························
# Getting the battery's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetVendor()
{
    return 0;
}

# ··································
# Getting the battery serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetVoltage()
{
    return 0;
}

# ··································
# Getting the battery warning level.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Battery.GetWarningLevel()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Audio.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# This script manages the audio-related hardware functionalities of Mac OS.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_HARDWARE_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's audio-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Audio.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Motherboard.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's motherboard with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ····························································
# Getting every informations about the computer's motherboard.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Motherboard.GetHardwareInfos()
{
    return 0;
}

# ···········································
# Getting the motherboard's firmware version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Motherboard.GetFirmwareVersion()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : GPU.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's GPU with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### GPU'S GENERAL INFORMATIONS

##

# ················································································
# Getting every informations about the computer's GPU-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.GPU.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : USB.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's USB port(s) and stick(s) with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's USB-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.USB.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Fan.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the Mac's fan with the help of the OSX system's commands.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ················································································
# Getting every informations about the computer's fan-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.Fan.GetHardwareInfos()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Screen.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's monitor with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

## CHECKING THE SCREEN'S INFORMATIONS

# ·································
# Checking if a monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Screen.IsMonitorPlugged()
{
    return 0;
}

# ··································
# Checking if the monitor is active.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Screen.IsMonitorActive()
{
    return 0;
}

# ········································
# Checking if an extra monitor is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Screen.IsExtraMonitorPlugged()
{
    return 0;
}

## ==============================================

## GETTING THE SCREEN'S DATA

# ···················································································
# Getting every informations about the computer's screen-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Screen.GetHardwareInfos()
{
    return 0;
}


# ······························
# Getting the screen resolution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Screen.GetResolution()
{
    return 0;
}

# ···································
# Getting the monitor's manufacturer.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Screen.GetMonitorManufacturer()
{
    return 0;
}

# ····································
# Getting the monitor's serial number.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Screen.GetMonitorSerialNumber()
{
    return 0;
}

# ··········································
# Getting the monitor's year of manufacture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Screen.GetMonitorYearOfManufacture()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// ##!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : Ports.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's ports with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####
#### DEBUG ID :

##
## DEBUG ID :

# ··················································································
# Getting every informations about the computer's ports-related hardware components.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.GetHardwareInfos()
{
    return 0;
}

# ······································
# Getting the total number of USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.GetUSBPortsNumber()
{
    return 0;
}

# ··········································
# Getting the number of available USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.GetAvailableUSBPortsNumber()
{
    return 0;
}

# ·····································
# Getting the number of used USB ports.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.GetUsedUSBPortsNumber()
{
    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfOpticalDiscDriveExists()
{
    return 0;
}

# ······································································
# Checking if an optical disc drive is mounted, and if no disc is .

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfOpticalDiscDriveIsEmpty()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfOpticalDiscDriveTrayIsClosed()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfOpticalDiscDriveTrayIsOpen()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·············································
# Checking if an optical disc drive is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfOpticalDiscDriveContainsdisc()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# ·······································
# Checking if an SD card port is mounted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfSDCardReaderIsMounted()
{
    return 0;
}

# ······························
# Checking if a VGA port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfVGAPortExists()
{
    return 0;
}

# ···············································
# Checking if the existing VGA port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfVGAPortAvailable()
{
    return 0;
}

# ·······························
# Checking if a HDMI port exists.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfHDMIPortExists()
{
    return 0;
}

# ················································
# Checking if the existing HDMI port is available.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfHDMIPortAvailable()
{
    return 0;
}

# ··································
# Checking if a joystick is plugged.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.Ports.CheckIfJoystickIsPlugged()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #