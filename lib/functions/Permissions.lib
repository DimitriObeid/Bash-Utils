#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### RECURSIVE PERMISSION AND OWNERSHIP PROCESSING

## RECURSIVE OWNERSHIP SWAPPING

# Calling the "chown" command to change recursively directory ownership

# Required functions and files into the "Bash-Utils/src/functions" folder :
#	- CheckRootEUID		-> Checkings.lib
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
#	- HandleErrors		-> Headers.lib
function ChownRec
{
    #***** Paramètres *****
    current_owner=$1    # This parameter is used in the translated messages, stored into their own variables.
    new_owner=$2
    path=$3

    #***** Code *****
    # The "chown" command has to be used with super-user privileges,
    CheckRootEUID

    # If the path passed as argument doesn't exists.
    if [ ! -d "$path" ]; then
        HandleError "1" "" "" ""
    fi

    EchoNewstep "Recursive change of the ownership rights of the new folder $(DechoN "$path/") from $(DechoN "$current_owner") to $(DechoN "$new_owner")"
	Newline

    # On change les droits du fichier créé par le script.
	# Comme il est exécuté en mode super-utilisateur, tout dossier ou fichier créé appartient à l'utilisateur root.
	# Pour attribuer les droits de lecture, d'écriture et d'exécution (rwx) à l'utilisateur normal, on appelle
	# la commande chown avec pour arguments :
	#		- Le nom de l'utilisateur à qui donner les droits.
	#		- Le chemin du dossier cible.
	if chown -Rv "$new_owner" "$path"; then
		EchoSuccess "The rights of the $(DechoS "$name") folder have been successfully changed from $(DechoS "$current_owner") to $(DechoS "$new_owner")"
		Newline

		return 0
	else
        EchoError "Unable to change the rights of the $(DechoE "$path/") folder"
		Newline

		return 1
    fi
}


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### NON-RECURSIVE PERMISSION AND OWNERSHIP PROCESSING

## NON-RECURSIVE OWNERSHIP SWAPPING

# Fonctions d'attribution de propriété de fichier à l'utilisateur.

# Required functions and files into the "Bash-Utils/src/functions" folder :
#   - CheckRootEUID -> Checkings.lib
#   - EchoError     -> Echo.lib
#   - EchoNewstep   -> Echo.lib
#   - EchoSuccess   -> Echo.lib
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function Chown
{
    #***** Parameters *****
    current_owner=$1    # This parameter is used in the translated messages, stored into their own variables.
    new_owner=$2
    path=$3
    
    #***** Code *****
    # The "chown" command has to be used with super-user privileges,
    CheckRootEUID

    # If the path passed as argument doesn't exists.
    if [ -d "$path" ]; then
        EchoNewstep "Changing the ownership rights of the  $(DechoN "$path/") folder from $(DechoN "$current_owner") to $(DechoN "$new_owner")."
        Newline
        
    # Changing ownership
    if chown -v "$new_owner" "$path"; then
        EchoSuccess "The rights of the $(DechoS "$path") folder have been successfully changed from $(DechoS "$current_owner") to $(DechoS "$new_owner")"
        Newline

        return 0
    else
        HandleErrors "$?" "Unable to change the rights of the $(DechoE "$path/") folder."
        Newline

        return 1
    fi
    else
        # Checking first if the path is a filepath. If not, then no correct path is passed as argument.
        if [ -f "$path" ]; then
            EchoNewstep "Changing the ownership rights of the  $(DechoN "$path/") file from $(DechoN "$current_owner") to $(DechoN "$new_owner")."
            Newline
            
                # Changing ownership
            if chown -v "$new_owner" "$path"; then
                EchoSuccess "The rights of the $(DechoS "$path") file have been successfully changed from $(DechoS "$current_owner") to $(DechoS "$new_owner")."
                Newline

                return 0
            else
                HandleErrors "$?" "Unable to change the rights of the $(DechoE "$path/") file."
                Newline

                return 1
            fi
        else
            HandleError "" "" "" "" && return 1
        fi

    fi
}

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #
