#!/usr/bin/env bash

# ---------------------
# SCRIPT'S INFORMATIONS

# Name          : DriveFS.lib
# Module        : Hardware
# Description   :
# Author(s)     : Dimitri Obeid
# Version       :

# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154,SC2016

# --------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

    exit 1;
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### HARD DRIVE'S FILE SYSTEM PROCESSING

## GETTING FILE SYSTEM'S INFORMATIONS

# Getting the file system path.
function BU::Hardware::DriveFS::GetFSDevice()
{
    #**** Parameters ****
    local p_path=$1     # String    - Path of the file or the folder to process.

    #**** Variables ****
    local v_return_code='0';    # Return code to modify in the "$v_cmd" string.

    local v_warn; v_warn="$(BU::DechoHighlightFunction "${FUNCNAME[0]}") --> Warning : unable to get the target ($(BU::DechoHighlightPath "$p_path") file system's device";

    BU::IsOSHaiku && local v_cmd="df \"$p_path\" | awk 'FNR == 2 {print \$5}' || { BU::EchoWarning \"\$v_warn\" '-n' 'nodate'; return 1; }";
    BU::IsOSLinux && local v_cmd="df -Th \"$p_path\" | awk 'FNR == 2 {print \$1}' || { BU::EchoWarning \"\$v_warn\" '-n' 'nodate'; return 1; }";

    #**** Code ****
    if ! BU::Main::CMDS::GetCommandReturnOutputValue 'df "$path"'; then return 1; fi

    eval "$v_cmd";

    return 0;
}

# Getting the total size in bytes allocated to a given file system.
function BU::Hardware::DriveFS::GetFSSizeTotal()
{
    #**** Parameters ****
    local p_path=$1     # String    - Path of the file or the folder to process.

    #**** Code ****
    BU::IsOSLinux && {
        if ! BU::Main::CMDS::GetCommandReturnOutputValue 'df -Th "$p_path"'; then return 1; fi

        df -Th "$p_path" | awk 'FNR == 2 {print $3}' || { BU::EchoWarning "$(BU::DechoHighlightFunction "${FUNCNAME[0]}") --> Warning : unable to get the target ($(BU::DechoHighlightPath "$p_path")) file system's total size in bytes" '-n' 'nodate'; return 1; }
    }

    return 0;
}

# Getting the mounted partition of a given file system.
function BU::Hardware::DriveFS::GetFSMountPoint()
{
    #**** Parameters ****
    local p_path=$1     # String    - Path of the file or the folder to process.

    #**** Code ****
    if ! BU::Main::CMDS::GetCommandReturnOutputValue 'df -Th "$p_path"'; then return 1; fi

    df -Th "$p_path" | awk 'FNR == 2 {print $7}' || { BU::EchoWarning "$(BU::DechoHighlightFunction "${FUNCNAME[0]}") --> Warning : unable to get the target ($(BU::DechoHighlightPath "$p_path")) file system's mount point" '-n' 'nodate'; return 1; }

    return 0;

}

# Getting the used size in bytes of a given file system.
function BU::Hardware::DriveFS::GetFSSizeUsedBytes()
{
    #**** Parameters ****
    local p_path=$1     # String    - Path of the file or the folder to process.

    #**** Code ****
    if ! BU::Main::CMDS::GetCommandReturnOutputValue 'df -Th "$p_path"'; then return 1; fi

    df -Th "$p_path" | awk 'FNR == 2 {print $4}' || { BU::EchoWarning "$(BU::DechoHighlightFunction "${FUNCNAME[0]}") --> Warning : unable to get the target ($(BU::DechoHighlightPath "$p_path")) file system's used size in bytes" '-n' 'nodate'; return 1; }

    return 0;
}

# Getting the percentage of the used space of a given file system.
function BU::Hardware::DriveFS::GetFSSizeUsedPercent()
{
    #**** Parameters ****
    local p_path=$1     # String    - Path of the file or the folder to process.

    #**** Code ****
    if ! BU::Main::CMDS::GetCommandReturnOutputValue 'df -Th "$p_path"'; then return 1; fi

    df -Th "$p_path" | awk 'FNR == 2 {print $6}' || { BU::EchoWarning "$(BU::DechoHighlightFunction "${FUNCNAME[0]}") --> Warning : unable to get the target ($(BU::DechoHighlightPath "$p_path")) file system's used size percentage" '-n' 'nodate'; return 1; }

    return 0;
}


# Getting the available size in bytes of a given file system.
function BU::Hardware::DriveFS::GetFSSizeAvailable()
{
    #**** Parameters ****
    local p_path=$1     # String    - Path of the file or the folder to process.

    #**** Code ****
    if ! BU::Main::CMDS::GetCommandReturnOutputValue 'df -Th "$p_path"'; then return 1; fi

    df -Th "$p_path" | awk 'FNR == 2 {print $5}' || { BU::EchoWarning "$(BU::DechoHighlightFunction "${FUNCNAME[0]}") --> Warning : unable to get the target ($(BU::DechoHighlightPath "$p_path")) file system's available size in bytes" '-n' 'nodate'; return 1; }

    return 0;

}

# Getting the type of the file system of a directory or a file.
function BU::Hardware::DriveFS::GetFSType()
{
    #**** Parameters ****
    local p_path=$1     # String    - Path of the file or the folder to process.

    #**** Code ****
    if ! BU::Main::CMDS::GetCommandReturnOutputValue 'df -Th "$p_path"'; then return 1; fi

    df -Th "$p_path" | awk 'FNR == 2 {print $2}' || { BU::EchoWarning "$(BU::DechoHighlightFunction "${FUNCNAME[0]}") --> Warning : unable to get the target ($(BU::DechoHighlightPath "$p_path")) file system's type" '-n' 'nodate'; return 1; }

    return 0;
}


# -----------------------------------------------
