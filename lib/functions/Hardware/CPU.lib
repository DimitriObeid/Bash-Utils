#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's CPU with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE



## ----------------------------------------------

## GETTING GENERAL DATA

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.GetInfos()                 { if BU.Main.CMDS.GetCommandPath 'lscpu'; then lscpu; fi }

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.GetVendor()                { if BU.Main.CMDS.GetCommandPath 'lshw'; then BU.Main.Echo.Msg "$(lshw -class processor | grep )" '-n'; return 0; else return 1; fi; }

## ----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE

## CHECKING THE ARCHITECTURE OF THE CPU(s)

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.Is32Bits()                 { return 0; }

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.Is64Bits()                 { return 0; }

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchAArch32()            { true; }

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchAArch64()            { true; }

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchARM32()              { true; }

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchARM64()              { true; }

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchAMD64()              { true; }

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchi386()               { true; }

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchPPC()                { true; }

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchMIPS()               { true; }

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.CPU.IsArchRISCV()              { true; }

## ----------------------------------------------

## GETTING THE CPU(s) ARCHITECTURE'S DATA

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.GetArch()              { if BU.Main.CMDS.GetCommandPath 'uname'; then BU.Main.Echo.Msg "$(uname -m)" '-n'; return 0; else return 1; fi; }

## ----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES

## CHECKING THE CPU(s) CORES DATA

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.IsCPUMonocore()            { return 0; }

## ----------------------------------------------

## GETTING THE CPU(s) CORES DATA

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.GetCoresNumber()           { if BU.Main.CMDS.GetCommandPath 'nproc'; then BU.Main.Echo.Msg "$(nproc)" '-n'; return 0; else return 1; fi; }

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.GetLogicalCoresNumber()    { return 0; }

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.GetPhysicalCoresNumber()   { return 0; }

## ----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK

## CHECKING THE CPU'S CLOCK INFORMATIONS

## ----------------------------------------------

## GETTING THE CPU'S ClOCK DATA

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.GetClockFrequency()        { if BU.Main.CMDS.GetCommandPath 'lshw'; then if BU.Main.Checkings.CheckRootEUID; then BU.Main.Echo.Msg "$(lshw -class processor | awk 'FNR == 13 {print $2}' )" '-n'; return 0; else return 1; fi; else return 1; fi; }

## ----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S SOCKETS

##

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Hardware.CPU.GetSocketsNumber()         { return 0; }



## ----------------------------------------------

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.BU.Hardware.CPU.GetAdressSizes()        { return 0; }
