#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : CPU.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

# Functions used to process data and parameters about the computer's CPU with the help of the system commands on any supported operating system.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CPU'S GENERAL INFORMATIONS
#### DEBUG ID : "bu::hardware::cpu::cpu's-general-informations"

declare -r __BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_GENERAL_INFORMATIONS="bu::hardware::cpu::cpu's-general-informations";

## CHECKING IF THE CPU CORRESPONDS TO A CERTAIN VALUE
## DEBUG ID : "checking-if-the-cpu-corresponds-to-a-certain-value"

declare -r __BU_HARDWARE_CPU_LIB__SUBCAT_DEBUG_ID__CPUS_GENERAL_INFORMATIONS__CHECKING_IF_THE_CPU_CORRESPONDS_TO_A_CERTAIN_VALUE="${__BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_GENERAL_INFORMATIONS}::checking-if-the-cpu-corresponds-to-a-certain-value";



## ==============================================

## GETTING THE CPU(s) GENERAL DATA
## DEBUG ID : "getting-the-cpu(s)general-data";

declare -r __BU_HARDWARE_CPU_LIB__SUBCAT_DEBUG_ID__CPUS_GENERAL_INFORMATIONS__GETTING_THE_CPUS_DATA="${__BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_GENERAL_INFORMATIONS}::getting-the-cpu(s)general-data";

# ··············································································
# Getting every

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetHardwareInfos()
{
    BU.Hardware."${}".CPU.GetHardwareInfos || return "${?}"; return 0;
}

# ··············································
# Getting the summary of the CPU's informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetInfos()
{
    BU.Hardware."${}".CPU.GetInfos || return "${?}"; return 0;
}

# ·························
# Getting the CPU's vendor.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetVendor()
{
    BU.Hardware."${}".CPU.GetVendor || return "${?}"; return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S ARCHITECTURE
#### DEBUG ID : "bu::hardware::cpu::cpu's-architecture"

declare -r __BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_ARCHITECTURE="bu::hardware::cpu::cpu's-architecture";

## CHECKING THE ARCHITECTURE OF THE CPU(s)
## DEBUG ID : "checking-the-architecture-of-the-cpu(s)";

declare -r __BU_HARDWARE_CPU_LIB__SUBCAT_DEBUG_ID__CPUS_ARCHITECTURE__CHECKING_THE_ARCHITECTURE_OF_THE_CPUS="${__BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_ARCHITECTURE}::checking-the-architecture-of-the-cpu(s)";

# ··············································
# Checking if the CPU's architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.Is32Bits()
{
    BU.Hardware."${}".CPU.Is32Bits || return "${?}"; return 0;
}

# ··············································
# Checking if the CPU's architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.Is64Bits()
{
    BU.Hardware."${}".CPU.Is64Bits || return "${?}"; return 0;
}

# ····················································
# Checking if the CPU's architecture is AArch 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchAArch32()
{
    BU.Hardware."${}".CPU.IsArchAArch32 || return "${?}"; return 0;
}

# ····················································
# Checking if the CPU's architecture is AArch 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchAArch64()
{
    BU.Hardware."${}".CPU.IsArchAArch64 || return "${?}"; return 0;
}

# ··················································
# Checking if the CPU's architecture is ARM 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchARM32()
{
    BU.Hardware."${}".CPU.IsArchARM32 || return "${?}"; return 0;
}

# ··················································
# Checking if the CPU's architecture is ARM 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchARM64()
{
    BU.Hardware."${}".CPU.IsArchARM64 || return "${?}"; return 0;
}

# ··············································
# Checking if the CPU's architecture is is AMD64.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchAMD64()
{
    BU.Hardware."${}".CPU.IsArchAMD64 || return "${?}"; return 0;
}

# ···········································
# Checking if the CPU's architecture is i386.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchi386()
{
    BU.Hardware."${}".CPU.IsArchi386 || return "${?}"; return 0;
}

# ··············································
# Checking if the CPU's architecture is PowerPC.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchPPC()
{
    BU.Hardware."${}".CPU.IsArchPPC || return "${?}"; return 0;
}

# ···········································
# Checking if the CPU's architecture is MIPS.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchMIPS()
{
    BU.Hardware."${}".CPU.IsArchMIPS || return "${?}"; return 0;
}

# ···············································
# Checking if the CPU's architecture is RISC-V.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsArchRISCV()
{
    BU.Hardware."${}".CPU.IsArchRISCV || return "${?}"; return 0;
}

## ==============================================

## GETTING THE CPU(s) ARCHITECTURE'S DATA
## DEBUG ID : "getting-the-cpu(s)-architecture's-data"

declare -r __BU_HARDWARE_CPU_LIB__SUBCAT_DEBUG_ID__CPUS_ARCHITECTURE__GETTING_THE_CPUS_ARCH_DATA="${__BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_ARCHITECTURE}::getting-the-cpu(s)-architecture's-data";

# ·······························
# Getting the CPU's architecture.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetArch()
{
    BU.Hardware."${}".CPU.GetArch || return "${?}"; return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CORES
#### DEBUG ID : "bu::hardware::cpu::cpu's-cores"

declare -r __BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_CORES="bu::hardware::cpu::cpu's-cores";

## CHECKING THE CPU(s) CORES DATA
## DEBUG ID : "checking-the-cpu(s)-cores-data"

declare -r __BU_HARDWARE_CPU_LIB__SUBCAT_DEBUG_ID__CPUS_CORES__CHECKING_THE_CPUS_CORES_DATA="${__BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_CORES}::checking-the-cpu(s)-cores-data";

# ·································
# Checking if the CPU is mono-core.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.IsMonocore()
{
    BU.Hardware."${}".CPU.IsMonocore || return "${?}"; return 0;
}

## ==============================================

## GETTING THE CPU(s) CORES DATA
## DEBUG ID : "getting-the-cpu(s)-cores-data"

declare -r __BU_HARDWARE_CPU_LIB__SUBCAT_DEBUG_ID__CPUS_CORES__GETTING_THE_CPUS_CORES_DATA="${__BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_CORES}::getting-the-cpu(s)-cores-data";

# ·························································
# Getting the total number of cores (logical AND physical).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetCoresNumber()
{
    BU.Hardware."${}".CPU.GetCoresNumber || return "${?}"; return 0;
}

# ····································
# Getting the number of logical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetLogicalCoresNumber()
{
    BU.Hardware."${}".CPU.GetLogicalCoresNumber || return "${?}"; return 0;
}

# ·····································
# Getting the number of physical cores.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetPhysicalCoresNumber()
{
    BU.Hardware."${}".CPU.GetPhysicalCoresNumber || return "${?}"; return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CPU'S CLOCK
#### DEBUG ID : "bu::hardware::cpu::cpu's-clock"

declare -r __BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_CLOCK="bu::hardware::cpu::cpu's-clock";

## CHECKING THE CPU'S CLOCK INFORMATIONS
## DEBUG ID : "checking-the-cpu's-clock-information"

declare -r __BU_HARDWARE_CPU_LIB__SUBCAT_DEBUG_ID__CPUS_CLOCK__CHECKING_THE_CPUS_CLOCK_INFORMATIONS="${__BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_CLOCK}::checking-the-cpu's-clock-information";



## ==============================================

## GETTING THE CPU'S CLOCK DATA
## DEBUG ID : "getting-the-cpu's-clock-data"

declare -r __BU_HARDWARE_CPU_LIB__SUBCAT_DEBUG_ID__CPUS_CLOCK__GETTING_THE_CPUS_CLOCK_DATA="${__BU_HARDWARE_CPU_LIB__CAT_DEBUG_ID__CPUS_CLOCK}::getting-the-cpu's-clock-data";

# ····························
# Getting the clock frequency.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetClockFrequency()
{
    BU.Hardware."${}".CPU.GetClockFrequency || return "${?}"; return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####
#### DEBUG ID :

##
## DEBUG ID :




## ==============================================

## GET CPU INFORMATIONS

# ································
# Getting the CPU's address sizes.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetAdressSizes()
{
    BU.Hardware."${}".CPU.GetAdressSizes || return "${?}"; return 0;
}

# ······························
# Getting the number of sockets.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.CPU.GetSocketsNumber()
{
    BU.Hardware."${}".CPU.GetSocketsNumber || return "${?}"; return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
