#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : General.OSX.lib
# Module        : Hardware
# Author(s)     : Dimitri OBEID
# Version       :


# ----------------------
# SCRIPT'S DESCRIPTION :

#


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

##

# ···············································
# Getting every computer's hardware informations.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.OSX.Audio.GetHardwareInfos()          -> Hardware -> Audio.OSX.lib
#   - BU.Hardware.OSX.Battery.GetHardwareInfos()        -> Hardware -> Battery.OSX.lib
#   - BU.Hardware.OSX.Bluetooth.GetHardwareInfos()      -> Hardware -> Bluetooth.OSX.lib
#   - BU.Hardware.OSX.CPU.GetHardwareInfos()            -> Hardware -> CPU.OSX.lib
#   - BU.Hardware.OSX.Drive.GetHardwareInfos()          -> Hardware -> Drive.OSX.lib
#   - BU.Hardware.OSX.Fan.GetHardwareInfos()            -> Hardware -> Fan.OSX.lib
#   - BU.Hardware.OSX.FloppyDisk.GetHardwareInfos()     -> Hardware -> FloppyDisk.OSX.lib
#   - BU.Hardware.OSX.General.GetHardwareInfos()        -> Hardware -> General.OSX.lib (this file)
#   - BU.Hardware.OSX.GPU.GetHardwareInfos()            -> Hardware -> GPU.OSX.lib
#   - BU.Hardware.OSX.HDMI.GetHardwareInfos()           -> Hardware -> HDMI.OSX.lib
#   - BU.Hardware.OSX.Keyboard.GetHardwareInfos()       -> Hardware -> Keyboard.OSX.lib
#   - BU.Hardware.OSX.Memory.GetHardwareInfos()         -> Hardware -> Memory.OSX.lib
#   - BU.Hardware.OSX.Motherboard.GetHardwareInfos()    -> Hardware -> Motherboard.OSX.lib
#   - BU.Hardware.OSX.Mouse.GetHardwareInfos()          -> Hardware -> Mouse.OSX.lib
#   - BU.Hardware.OSX.PCI.GetHardwareInfos()            -> Hardware -> PCI.OSX.lib
#   - BU.Hardware.OSX.Ports.GetHardwareInfos()          -> Hardware -> Ports.OSX.lib
#   - BU.Hardware.OSX.Screen.GetHardwareInfos()         -> Hardware -> Screen.OSX.lib
#   - BU.Hardware.OSX.SDCard.GetHardwareInfos()         -> Hardware -> SDCard.OSX.lib
#   - BU.Hardware.OSX.Touchpad.GetHardwareInfos()       -> Hardware -> Touchpad.OSX.lib
#   - BU.Hardware.OSX.USB.GetHardwareInfos()            -> Hardware -> USB.OSX.lib
#   - BU.Hardware.OSX.VGA.GetHardwareInfos()            -> Hardware -> VGA.OSX.lib

# shellcheck disable=
function BU.Hardware.OSX.General.GetAllHardwareInfos()
{
    BU.Hardware.OSX.Audio.GetHardwareInfos;
    BU.Hardware.OSX.Battery.GetHardwareInfos;
    BU.Hardware.OSX.Bluetooth.GetHardwareInfos;

    BU.Hardware.OSX.CPU.GetHardwareInfos;
    BU.Hardware.OSX.Drive.GetHardwareInfos;
    BU.Hardware.OSX.Fan.GetHardwareInfos;

    BU.Hardware.OSX.FloppyDisk.GetHardwareInfos;
    BU.Hardware.OSX.General.GetHardwareInfos;
    BU.Hardware.OSX.GPU.GetHardwareInfos;

    BU.Hardware.OSX.HDMI.GetHardwareInfos;
    BU.Hardware.OSX.Keyboard.GetHardwareInfos;
    BU.Hardware.OSX.Memory.GetHardwareInfos;

    BU.Hardware.OSX.Motherboard.GetHardwareInfos;
    BU.Hardware.OSX.Mouse.GetHardwareInfos;
    BU.Hardware.OSX.PCI.GetHardwareInfos;

    BU.Hardware.OSX.Ports.GetHardwareInfos;
    BU.Hardware.OSX.Screen.GetHardwareInfos;
    BU.Hardware.OSX.SDCard.GetHardwareInfos;

    BU.Hardware.OSX.Touchpad.GetHardwareInfos;
    BU.Hardware.OSX.USB.GetHardwareInfos;
    BU.Hardware.OSX.VGA.GetHardwareInfos;

    return 0;
}

# ················································································
# Getting every general hardware components (like the computer's chassis, etc...).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Hardware.OSX.General.GetChassis()      -> Hardware -> General.OSX.lib (this file)
#   - BU.Hardware.OSX.General.GetChassisType()  -> Hardware -> General.OSX.lib (this file)
#   - BU.Hardware.OSX.General.GetMachineID()    -> Hardware -> General.OSX.lib (this file)
#   - BU.Hardware.OSX.General.GetBootID()       -> Hardware -> General.OSX.lib (this file)

# shellcheck disable=
function BU.Hardware.OSX.General.GetHardwareInfos()
{
    BU.Hardware.OSX.General.GetChassis;
    BU.Hardware.OSX.General.GetChassisType;
    BU.Hardware.OSX.General.GetMachineID;
    BU.Hardware.OSX.General.GetBootID;

    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

####

##

# ·······························
# Getting the computer's chassis.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.General.GetChassis()
{
    return 0;
}

# ····································
# Getting the computer's chassis type.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.General.GetChassisType()
{
    return 0;
}

# ·························
# Getting the machine's ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.General.GetMachineID()
{
    return 0;
}

# ····················
# Getting the boot ID.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Hardware.OSX.General.GetBootID()
{
    return 0;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #