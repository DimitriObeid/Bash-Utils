#!/usr/bin/env bash

# ---------------------
# SCRIPT'S INFORMATIONS

# Name          : Ports.Haiku.lib
# Module        : Hardware
# Description   :
# Author(s)     : Dimitri Obeid
# Version       :

# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" = en_* ]]; then
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2; echo >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

fi; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

####

##

# Getting the total number of USB ports.
function BU.Hardware.Ports.GetUSBPortsNumber()
{
    return 0;
}

# Getting the number of available USB ports.
function BU.Hardware.Ports.GetAvailableUSBPortsNumber()
{²
    return 0;
}

# Getting the number of used USB ports.
function BU.Hardware.Ports.GetUsedUSBPortsNumber()
{
    return 0;
}


# Checking if an optical disc drive is mounted.
function BU.Hardware.Ports.CheckIfOpticalDiscDriveExists()
{
    return 0;
}

# Checking if an optical disc drive is mounted, and if no disc is .
function BU.Hardware.Ports.CheckIfOpticalDiscDriveIsEmpty()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# Checking if an optical disc drive is mounted.
function BU.Hardware.Ports.CheckIfOpticalDiscDriveTrayIsClosed()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# Checking if an optical disc drive is mounted.
function BU.Hardware.Ports.CheckIfOpticalDiscDriveTrayIsOpen()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# Checking if an optical disc drive is mounted.
function BU.Hardware.Ports.CheckIfOpticalDiscDriveContainsdisc()
{
    BU.Hardware.Ports.CheckIfOpticalDiscDriveExists &&

    return 0;
}

# Checking if an SD card port is mounted.
function BU.Hardware.Ports.CheckIfSDCardReaderIsMounted()
{
    return 0;
}

# Checking if a VGA port exists.
function BU.Hardware.Ports.CheckIfVGAPortExists()
{
    return 0;
}

# Checking if the existing VGA port is available.
function BU.Hardware.Ports.CheckIfVGAPortAvailable()
{
    return 0;
}

# Checking if an HDMI port exists.
function BU.Hardware.Ports.CheckIfHDMIPortExists()
{
    return 0;
}

# Checking if the existing HDMI port is available.
function BU.Hardware.Ports.CheckIfHDMIPortAvailable()
{
    return 0;
}

# Checking if a joystick is plugged.
function BU.Hardware.Ports.CheckIfJoystickIsPlugged()
{
    #**** Variables ****
    local JS="$(
        if      BU.Main.OS.IsLinux;         then    dmesg | grep Joystick;
        elif    BU.Main.OS.IsHaiku;         then    true;
        fi
    )";

    #**** Code ****
    if [ -n "$JS" ]; then return 0; else return 1; fi
}
