#!/usr/bin/env bash

# ---------------------
# SCRIPT'S INFORMATIONS

# Name          : Battery.lib
# Module        : Hardware
# Description   :
# Author(s)     : Dimitri Obeid
# Version       :

# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" = en_* ]]; then
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2;
    echo -e "Utilisez seulement ce script only en l'incluant dans votre projet." >&2; echo >&2;

    exit 1;
fi; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### BATTERY CHECKINGS

##

# Checking if the computer is not AC powered.
function BU.Hardware.Battery.IsNotOnAC()
{
    return 0;
}

# Checking if the computer is AC powered.
function BU.Hardware.Battery.IsOnAC()
{
    return 0;
}

# Checking if the battery has history.
function BU.Hardware.Battery.HasHistory()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 7 {print $3}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Checking if the computer has power supply.
function BU.Hardware.Battery.HasPowerSupply()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 5 {print $3}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Checking if the battery has statistics.
function BU.Hardware.Battery.HasStatistics()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 8 {print $3}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Checking if the computer is present.
function BU.Hardware.Battery.IsPresent()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 10 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Checking if the computer is rechargeable.
function BU.Hardware.Battery.IsRechargeable()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 11 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is rechargeable"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery serial number.
function BU.Hardware.Battery.GetCapacity()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 21 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's capacity"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery
function BU.Hardware.Battery.GetEnergy()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 14 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's "; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}


# Getting the battery
function BU.Hardware.Battery.GetEnergyEmpty()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 15 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's "; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}


# Getting the battery
function BU.Hardware.Battery.GetEnergyFull()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 16 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's "; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}


# Getting the battery
function BU.Hardware.Battery.GetEnergyFullDesign()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 17 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's "; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}


# Getting the battery energy rate.
function BU.Hardware.Battery.GetEnergyRate()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 18 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's energy rate"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery model.
function BU.Hardware.Battery.GetModel()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries, v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 3 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's model"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery
function BU.Hardware.Battery.GetNativePath()
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 21 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's capacity"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery percentage.
function BU.Hardware.Battery.GetPercentage()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries, v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | grep percentage | grep -o '[0-9]\+' | head -1)";
    else
        BU.Main.Echo.Msg "Unable to get the battery's percentage"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery serial number.
function BU.Hardware.Battery.GetSerialNumber()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 4 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's serial number"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery state.
function BU.Hardware.Battery.GetState()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 12 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's state"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery technology.
function BU.Hardware.Battery.GetTechnology()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 22 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's technology"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the time remaining until the full charge.
function BU.Hardware.Battery.GetTimeBeforeFullCharge()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries; v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 20 {print $4}')";
    else
        BU.Main.Echo.Msg "Unable to check if the battery is present"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery vendor.
function BU.Hardware.Battery.GetVendor()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 2 {print $2}')";
    else
        BU.Main.Echo.Msg "Unable to get the battery's vendor"; return 1;
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output";

    return 0;
}


# Getting the battery serial number.
function BU.Hardware.Battery.GetVoltage()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 19 {print $2}')";
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}

# Getting the battery warning level.
function BU.Hardware.Battery.GetWarningLevel()
{
    #**** Variables ****
    if BU.Main.CMDS.GetCommandPath 'upower'; then local v_batteries v_command_output;
        v_batteries="$(upower --enumerate | grep --max-count=1 -i BAT)"; v_command_output="$(upower --show-info "${v_batteries:-}" | awk 'FNR == 13 {print $2}')";
    fi

    #**** Code ****
    BU.Main.Echo.Msg "$v_command_output" '-n';

    return 0;
}
