#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### TEXT FILES PROCESSING FUNCTIONS

# Separate processing steps displays from the rest of the main script with a line.

# Featured functions and files from the "functions" folder :
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function ProcessingFile
{
    #***** Parameters *****
    function=$1
    
    #***** Variables *****
    char="'"
    
    #***** Code *****
    # On commence par dessiner la première ligne du bloc.
	sleep "$PROJECT_STATUS_SLEEP_LINE"
    DrawLine "$COL_RESET" "$char"
    
    EchoNewstep "Processing the $(DechoN "$name") file."
    Newline
    
    if $("$function"); then
        EchoSuccess "End of processing the $(DechoS "$name") file"
		DrawLine "$COL_RESET" "$char"
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    else
        EchoError "End of processing the $(DechoE "$name") file"
		DrawLine "$COL_RESET" "$char"
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    fi
}

## OVERWRITING CONTENT

# Overwrite a file

# Required functions and files from the "functions" folder :
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
function OverwriteFile
{
    #***** Parameters *****
    path=$1
    
    #***** Code *****
    EchoNewstep "The $(DechoN "$path") file already exists and is not empty."
	EchoNewstep "Overwriting data from file $(DechoN "$path")"
	Newline

	if true > "$path"; then
		EchoSuccess "The content of the $(DechoS "$path") file has been successfully overwritten"
		Newline
		
		return 0
    else
        EchoError "The content of the $(DechoE "$path") file has not been overwritten"
		Newline
		
		return 1
    fi
}

# -----------------------------------------------

## FILE CREATION

# File creation function.
# LORS DE SON APPEL, LA SORTIE DE CETTE FONCTION DOIT ÊTRE REDIRIGÉE SOIT VERS LE TERMINAL ET LE FICHIER DE LOGS, SOIT VERS LE FICHIER DE LOGS UNIQUEMENT.

# Required files and functions :
#   - Echo.sh       -> EchoErrorTimer
#   - Echo.sh       -> EchoNewstepTimer
#   - Echo.sh       -> EchoSuccessTimer
#   - Headers.sh    -> DrawLine   
#   - Headers.sh    -> HandleErrors
function Makefile
{
	#***** Paramètres *****
	parent=$1      # Emplacement depuis la racine du dossier parent du fichier à traiter.
	name=$2        # Nom du fichier à traiter (dans son dossier parent).
	sleep_blk=$3   # Temps de pause du script avant et après la création d'un bloc d'informations sur le traitement du fichier.
	sleep_txt=$4   # Temps d'affichage des messages de passage à une nouvelle sous-étape, d'échec ou de succès.

	#***** Autres variables *****
	path="$parent/$name"	# Chemin du fichier à traiter.
	block_char="'"		# Caractère composant la ligne.

	#***** Code *****
	# If the file to create doesn't exists, ths script creates it with the help of the "touch" command.
	if [ ! -f "$path" ]; then
        EchoNewstep "Creating the $(DechoN "$name") file in the parent folder $(DechoN "$parent/")."
		Newline

		touch "$path"
        # Testing if the file has been created by checking the return code of the "touch" command via the "HandleErrors" function.
        # An error may come from the fact that the user did not run the script in superuser mode, a script that tried to create a
        # file in a folder where the user is not allowed to create a file without superuser privileges.
        HandleErrors "$?" "THE $(DechoE "$name") FILE CANNOT BE CREATED IN THE PARENT FOLDER $(DechoE "$parent/")." "" "$lineno"
        EchoSuccess "The $(DechoS "$name") file was successfully created in the $(DechoS "$parent") folder."
        Newline
        
        return 0
	
	# Else, if the file to be created already exists AND it is NOT empty.
	elif [ -f "$path" ] && [ -s "$path" ]; then
        OverwriteFile "$path"
		return 0

	# Else, if the file to be created already exists AND it is empty.
	elif [ -f "$path" ] && [ ! -s "$path" ]; then
		EchoSuccess "The $(DechoS "$path/") file already exists in the $(DechoS "$parent/") folder and is empty."
		Newline

		return 0
	fi
}

# -----------------------------------------------

## TEXT FILES PARSING

# Getting a specific line from a text file.
function GetLineFromTextFile
{
    #***** Parameters *****
    source=$1   # File to parse
    line=$2     # Line to get in the file
    
    #***** Variables *****
    i=0     # Line incrementer
    
    #***** Code *****
    cat "$source" | while read -r line; do
        # Incrementing the line incrementer variable's value...
        i=$(( i+1 ))
        
        # ... until it reaches the wanted line.
        if [ "$i" -eq "$line" ]; then
            # Creating a variable and storing the line's text.
            FILE_GETTXTLINE="$line"
        fi
    done
}

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### ARCHIVES PROCESSING FUNCTIONS

## (UN)COMPRESSION FUNCTIONS

# 
function Compress
{
    #***** Parameters *****
    cmd=$1      # Compression command.
    opts=$2     # Options of the compression command.
    path=$3     # Path to the file/folder to archivate.
    name=$4     # Archive's name (only used into displayed messages).
    
    #***** Code *****
    
    
    return 0
}

# Uncompressing archives according to the used compression method.
function Uncompress
{
    #***** Paramètres *****
    cmd=$1      # Compression command.
    # TODO : Vérifier si cette procédure est bonne
    opts=$2     # Options of the compression command. (in case a command call is not mandatory, please leave an empty string as second argument while calling this function).
    path=$3     # Path to the l'archive to uncompress.
    name=$4     # Archive's name (only used into displayed messages).

    #***** Code *****
    # On exécute la commande de décompression en passant en arguments ses options et le chemin vers l'archive.
    "$cmd $option $path"
    HandleErrors "$?" "LA DÉCOMPRESSION DE L'ARCHIVE $(DechoE "$name") A ÉCHOUÉE"
    EchoSuccess "La décompression de l'archive $(DechoS "$name") s'est effectuée avec brio."
    Newline
    
    return 0
}
