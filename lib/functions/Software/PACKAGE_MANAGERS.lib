#!/usr/bin/env bash

# ------------------------
## SCRIPT'S INFORMATIONS :

# Name          : PACKAGE_MANAGERS.SH
# Module        : Software
# Author(s)     : Dimitri Obeid
# Version       : beta

# ------------------
# FILE DESCRIPTION :

# Package manager processing functions for each supported operating systems.

# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154,SC1090

# ---------------------
# NOTE ABOUT SHELLCHECK

# To display the content of a variable in a translated string, the use of the printf command is mandatory in order to interpret each "%s" pattern as the value of a variable.

# This means that the Shellcheck warning code SC2059 will be triggered anyway, since we have no choice but to store the entire translated string in a variable.

# If you add new messages to translate, you must call the directive "shellcheck disable=SC2059" before the line where you call the
# command "printf" to display the translated message, otherwise Shellcheck will display many warnings during the debugging procedure.

# --------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it in your main script file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == en_* ]]; then
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2; echo >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

fi; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### LINUX PACKAGE MANAGERS

## PACKAGE MANAGERS INSTALLATION

# Installing the Node package manager for Linux.
function BU.Software.PackageManagers.InstallNPM.Linux()
{
	#**** Code ****
	BU.Main.OS.IsLinux || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Installing the "Snap" package manager (Linux only).
function BU.Software.PackageManagers.InstallSnap.Linux()
{
	#**** Code ****
	BU.Main.OS.IsLinux || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Defining an alias, if the user does not want to type the ".Linux" at the end of the name of the function.
alias BU.Software.PackageManagers.InstallSnap="Software.PackageManagers.InstallSnap.Linux";

# -----------------------------------------------

## PACKAGE MANAGERS INSTALL CHECKING

# Checking if NPM is installed on a Linux computer.
function BU.Software.PackageManagers.IsNPMInstalled.Linux()
{
	#**** Code ****
	BU.Main.OS.IsLinux || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Checking if the "Snap" package manager is installed on a Linux computer.
function BU.Software.PackageManagers.IsSnapInstalled.Linux()
{
	#**** Code ****
	BU.Main.OS.IsLinux || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Defining an alias, if the user does not want to type the ".Linux" at the end of the name of the function.
alias BU.Software.PackageManagers.IsSnapInstalled="Software.PackageManagers.IsSnapInstalled.Linux";

# -----------------------------------------------

## PACKAGE MANAGERS UPDATE

# Updating the Node package manager for Linux.
function BU.Software.PackageManagers.UpdateNPM.Linux()
{
	#**** Code ****
	BU.Main.OS.IsLinux || {  BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Updating the "Snap" package manager (Linux only).
function BU.Software.PackageManagers.UpdateSnap.Linux()
{
	#**** Code ****
	BU.Main.OS.IsLinux || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Defining an alias, if the user does not want to type the ".Linux" at the end of the name of the function.
alias BU.Software.PackageManagers.UpdateSnap="Software.PackageManagers.UpdateSnap.Linux";

# -----------------------------------------------

## PACKAGE AVAILABLE CHECKING (ON THE MANAGER'S DATABASE)


# -----------------------------------------------

## PACKAGE INSTALLATION


# -----------------------------------------------

## PACKAGE UPDATE


# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### MAC OS PACKAGE MANAGERS

## PACKAGE MANAGERS INSTALLATION

# Installing Homebrew on OSX.
function BU.Software.PackageManagers.InstallHomebrew.OSX()
{
    #**** Code ****
    BU.Main.OS.IsOSX || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

    return 0;
}

# Installing NPM on OSX.
function BU.Software.PackageManagers.InstallNPM.OSX()
{
    #**** Code ****
    BU.Main.OS.IsOSX || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

    return 0;
}

# -----------------------------------------------

## PACKAGE MANAGERS INSTALL CHECKING

# Checking if NPM is installed on a Mac.
function BU.Software.PackageManagers.IsNPMInstalled.OSX()
{
	#**** Code ****
	BU.Main.OS.IsOSX || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# -----------------------------------------------

## PACKAGE MANAGERS UPDATE

# Update Homebrew.
function BU.Software.PackageManagers.UpdateHomebrew.OSX()
{
    BU.Main.OS.IsOSX || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

    return 0;
}

# -----------------------------------------------

## PACKAGE AVAILABLE CHECKING (ON THE MANAGER'S DATABASE)


# -----------------------------------------------

## PACKAGE INSTALLATION


# -----------------------------------------------

## PACKAGE UPDATE


# -----------------------------------------------



# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### WINDOWS PACKAGE MANAGERS

## PACKAGE MANAGERS INSTALLATION

# Installing the Node package manager for Windows.
function BU.Software.PackageManagers.InstallNPM.Windows()
{
	#**** Code ****
	BU.Main.OS.IsWindows || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Installing Chocolatey for Windows.
function BU.Software.PackageManagers.InstallChocolatey.Windows()
{
	#**** Code ****
	BU.Main.OS.IsWindows || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# -----------------------------------------------

## PACKAGE MANAGERS INSTALL CHECKING

# Checking if NPM is installed on a Windows PC.
function BU.Software.PackageManagers.IsNPMInstalled.Windows()
{
	#**** Code ****
	BU.Main.OS.IsWindows || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Checking if Chocolatey is installed on a Windows PC.
function BU.Software.PackageManagers.IsChocolateyInstalled.Windows()
{
	#**** Code ****
	BU.Main.OS.IsWindows || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# -----------------------------------------------

## PACKAGE MANAGERS UPDATE

# Updating the Node package manager for Windows.
function BU.Software.PackageManagers.UpdateNPM.Windows()
{
	#**** Code ****
	BU.Main.OS.IsWindows || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# Updating Chocolatey for Windows.
function BU.Software.PackageManagers.UpdateChocolatey.Windows()
{
	#**** Code ****
	BU.Main.OS.IsWindows || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# -----------------------------------------------

## PACKAGE AVAILABLE CHECKING (ON THE MANAGER'S DATABASE)


# -----------------------------------------------

## PACKAGE INSTALLATION

# Installing a Node package in the user's project "" and "" files.
function BU.Software.PackageManagers.InstallWithNPM.Windows()
{
	#**** Code ****
	BU.Main.OS.IsWindows || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# -----------------------------------------------

## PACKAGE UPDATE

# Updating a Node package in the user's project "" and "" files.
function BU.Software.PackageManagers.UpdateWithNPM.Windows()
{
	#**** Code ****
	BU.Main.OS.IsWindows || { BU.Main.Echo.Warning ""; BU.Main.Echo.Newline >&2; return 1; };

	return 0;
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### QUICK PACKAGE INSTALLATION, UPDATE AND PROCESSING FOR MULTIPLE OPERATING SYSTEMS

## RESOURCES FUNCTIONS.

# Quick writing if the target operating system is not found.
function BU.Software.PackageManagers.SoftwareNotAvailableForThisOS()
{
    BU.Main.Echo.Error ""; BU.Main.Echo.Newline;
}

# -----------------------------------------------

## PACKAGE MANAGERS INSTALLATION

# Install NPM on several platforms.
function BU.Software.PackageManagers.InstallNPM()
{
    BU.Main.OS.IsLinux      && BU.Software.PackageManagers.InstallNPM.Linux     &&  return 0;
    BU.Main.OS.IsOSX        && BU.Software.PackageManagers.InstallNPM.OSX       &&  return 0;
    BU.Main.OS.IsWindows    && BU.Software.PackageManagers.InstallNPM.Windows   &&  return 0;

    BU.Software.PackageManagers.SoftwareNotAvailableForThisOS;                      return 1;
}

# -----------------------------------------------

## PACKAGE MANAGERS UPDATE

# Updating NPM on several platforms.
function BU.Software.PackageManagers.UpdateNPM()
{
    BU.Main.OS.IsLinux      && BU.Software.PackageManagers.UpdateNPM.Linux     &&  return 0;
    BU.Main.OS.IsOSX        && BU.Software.PackageManagers.UpdateNPM.OSX       &&  return 0;
    BU.Main.OS.IsWindows    && BU.Software.PackageManagers.UpdateNPM.Windows   &&  return 0;

    BU.Software.PackageManagers.SoftwareNotAvailableForThisOS;                      return 1;
}

# -----------------------------------------------

## PACKAGE AVAILABLE CHECKING (ON THE MANAGER'S DATABASE)


# -----------------------------------------------

## PACKAGE INSTALLATION


# -----------------------------------------------

## PACKAGE UPDATE


# -----------------------------------------------
