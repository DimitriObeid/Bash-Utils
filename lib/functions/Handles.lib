#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CHECKING FOR OPERATING SYSTEM RELATED INFORMATIONS

## CHECKING OPERATING SYSTEM TYPE

function CheckSupportedOSType
{
    if [[ "$OSTYPE" = "linux-gnu" ]]; then
        return
    fi
}

# -----------------------------------------------

## CHECKING FOR THE IDENTIFIANTS

# Checking if the current effective UID (EUID) is not equal to 0 (root user's EUID)

# Required functions and files :
#   - HandleErrors      -> Bash-Utils/src/functions/Headers.lib
function CheckRootEUID
{
    if [ "$EUID" -ne 0 ]; then
        HandleErrors "1" "Error : you need root user's privileges to perform this action." ""
    fi
}


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### 

## CHECKING FOR FILES AND FOLDERS

# Checking for "$PROJECT_LOG_PATH"

# Required functions and files :
function CheckProjectLogPath
{
    if [ -z "$PROJECT_LOG_PATH" ]; then
        EchoError "$TXT_RED_TAB Error : no path provided into the PROJECT_LOG_PATH variable.$COL_RESET"; echo;
        exit 1
    fi
}

# Checking for project's log file's status, then write
function CheckProjectLogStatus
{
    #***** Parameters *****
    string=$1

    #**** Code *****
    CheckProjectStatusVars
    CheckProjectLogPath
    
    if [ "$PROJECT_STATUS_LOG" = "true" ] && [ -n "$STAT_LOG_REDIRECT" ]; then
        if [ "$STAT_LOG_REDIRECT" = "log" ] || [ "$STAT_LOG_REDIRECT" -eq 1 ]; then
            echo "[$TIME_DATE] $string" >> "$PROJECT_LOG_PATH" || { echo "" ; exit 1; }
        elif [ "$STAT_LOG_REDIRECT" = "tee" ] || [ "$STAT_LOG_REDIRECT" -eq 2 ]; then
            echo "$string"
            echo "[$TIME_DATE] $string" >> "$PROJECT_LOG_PATH" || { echo ""; exit 1; }
        fi
    else
        echo "$string"
    fi
}

# -----------------------------------------------

## ERROR HANDLING FUNCTIONS

# Handling command outputs.
function HandleErrors
{
	#***** Paramètres *****
	local return_code=$1       # Code de retour de la dernière commande lancée
	local error_string=$2      # Chaîne de caractères du type d'erreur à afficher.
	local advice_string=$3     # Chaîne de caractères affichants un conseil pour orienter l'utilisateur vers la meilleure solution en cas de problème.
    local lineno=$4            # Ligne à laquelle le message d'erreur s'est produite.

	# ***** Code *****
	if [ "$return_code" -eq 0 ]; then
        return
    else
        if [ -n "$STAT_ERROR" ] && [ "$STAT_ERROR" = "fatal" ]; then
            HeaderBase "$COL_RED" "-" "$COL_RED" "FATAL ERROR : $(Decho "${error_string^^}") !"

            EchoError "A fatal error occured :"
            EchoError "$error_string"
            Newline

            if [ -z "$advice_string" ]; then
                EchoError "No advice to give."
                Newline
            else
                EchoError "$advice_string"
                Newline
            fi
                
            EchoError "The fatal error in question occurred in the line $(DechoE "$lineno")."
            Newline

            EchoError "Stopping the execution of $(DechoE "$(basename "$0")")."
            Newline

            exit 1
        elif [ -z "$STAT_ERROR" ]; then
            HeaderBase "$COL_RED" "-" "$COL_RED" "ERROR : ${error_string^^}"
            
            EchoError "An error occured !"
            EchoError "$error_string"
            Newline
            
            if [ -z "$advice_string" ]; then
                EchoError "No advice to give."
                Newline
            else
                EchoError "$advice_string"
                Newline
            fi
            
            EchoError "The error in question occurred in the line $(DechE "$lineno")."
            Newline
            
            EchoNewstep "Do you want to stop the execution of $(DechoE "$(basename "$0")") ? $(DechoN "(yes/no)")"
            Newline
            
            function ReadExitScript
            {
                read -rp "Enter your answer : " ans_exit_script
            
                case ${ans_exit_script,,} in
                    "yes")
                            EchoError "Aborting script execution."
                            Newline
                            
                            exit 1
                        ;;
                    "no")
                        EchoSuccess "Resuming script execution.s"
                        Newline
                        
                        # In case a "non-fatal" error occured in a function passed in argument while calling the "ProcessingDir" or the "ProcessingFile" functions.
                        return 1
                        ;;
                    *)
                        EchoError "Please enter a valid answer : $(DechoE "yes") or $(DechoE "no")."
                        ;;
                esac
            }
        else
            EchoError
        fi
    fi
}
