#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CHECKING FOR IDENTIFIANTS

## EFFECTIVE USER IDENTIFIANTS CHECKING

# Checking if the current effective UID (EUID) is not equal to 0 (root user's EUID)

# Required functions and files :
#   - HandleErrors      -> Bash-Utils/src/functions/Headers.lib
function CheckRootEUID
{
    if [ "$EUID" -ne 0 ]; then
        HandleErrors "1" "YOU NEED ROOT USER'S PRIVILEGES TO PERFORM THIS ACTION !" "Please launch your script with super-user privileges." "EUID = 0" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO"
    fi
}

# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### VARIABLES VALUES CHECKING

## NUMBER VALUES

# Checking floating value.
function IsFloat
{
    #***** Parameters *****
    value=$1

    #***** Code *****
    if [[ "$value" =~ ^[+-]?[0-9]+\.?[0-9]*$ ]]; then
        return 0
    fi
}

# Checking floating and integer value.
function IsFloatInt
{
    #***** Parameters *****
    value=$1

    #***** Code *****
    if [[ "$value" =~ ^([0-9]+\.?|[0-9]*\.[0-9]+)$ ]]; then
        return 0
    fi
}

# Checking integer value.
function IsInt
{
    #***** Parameters *****
    value=$1

    #***** Code *****
    if [[ "$value" =~ ^[+-]?[0-9]+$ ]]; then
        return 0
    fi
}

# -----------------------------------------------

## STRING VALUES

# Checking if value is an alphabetic string (not any number allowed)
function IsAlpha
{
    #***** Parameters *****
    value=$1
    
    #***** Code *****
    if [[ "$var" =~ [A-Z] ]]; then
        return 0
    fi
}

# Checking if vialue is an aplhanumeric string.
function IsAlphaNum
{
    #***** Parameters *****
    value=$1

    #***** Code *****
    if [[ "$value" =~ [^a-zA-Z0-9\ ] ]]; then
        return 0
    fi
}

# -----------------------------------------------

# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### PATHS CHECKING

## FILE PATHS CHECKING

# Checking for "$PROJECT_LOG_PATH"

# Required functions and files :
function CheckProjectLogPath
{
    if [ -z "$PROJECT_LOG_PATH" ]; then
        HandleErrors "1" "NO PATH PROVIDED INTO THE $(tput setaf "$COL_CYAN")PROJECT_LOG_PATH$(tput setaf "$COL_RED") VARIABLE.$(tput sgr0)" "$PROJECT_LOG_PATH" "Please add the path as argument." "$(basename "$BASH_SOURCE[0]")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    elif [ ! -f "$PROJECT_LOG_PATH" ]; then
        HandleErrors "1" "BAD PATH PROVIDED INTO THE $(tput setaf "$COL_CYAN")PROJECT_LOG_PATH$(tput setaf "$COL_RED") VARIABLE.$(tput sgr0)" "$PROJECT_LOG_PATH" "Please correct the path passed as argument." "$(basename "$BASH_SOURCE[0]")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    fi
}

# Checking for project's log file's status, then write the wanted text with 'echo' command's parameters.
function CheckProjectLogStatus
{
    #***** Parameters *****
    p_string=$1
    p_option=$2     # "echo" command options

    #***** Variables *****
    v_errorEcho="$(tput setaf "$COL_RED")Unable to write into the $(tput setaf "$COL_CYAN")"$PROJECT_LOG_PATH"$(tput setaf "$COL_RED") file.$(tput sgr0)"

    #**** Code *****
    CheckSTAT_LOG
    CheckSTAT_LOG_REDIRECT
    CheckProjectLogPath
    CheckSTAT_TIME_TXT
    
    # If the text is redirected towars the log path, it's better to put every timer status variables values to '0'.
    if [ "$STAT_LOG_REDIRECT" = "true" ]; then
        if [ "$STAT_LOG_REDIRECT" = "log" ] && [ "$STAT_TIME_TXT" -gt 0 ]; then

            # Backup the old values to restore them when the log processing will be done.
            OLD_STAT_TIME_TXT="$STAT_TIME_TXT"
            STAT_TIME_TXT="0"
        fi
    fi

    if [ -f "$PROJECT_LOG_PATH" ] && [ "$PROJECT_STATUS_LOG" = "true" ] && [ -n "$STAT_LOG_REDIRECT" ]; then
        if [ "$STAT_LOG_REDIRECT" = "log" ]; then
            case "$p_option" in
                '-e')
                    echo -e "[$TIME_DATE] $p_string" >> "$PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                    ;;
                '-n')
                    echo -n "[$TIME_DATE] $p_string" >> "$PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                    ;;
                '-ne')
                    echo -ne "[$TIME_DATE] $p_string" >> "$PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                    ;;
                *)
                    echo "[$TIME_DATE] $p_string" >> "$PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                    ;;
            esac
        elif [ "$STAT_LOG_REDIRECT" = "tee" ]; then
            case "$p_option" in
                '-e')
                    echo -e "$p_string"
                    echo -e "[$TIME_DATE] $p_string" >> "$PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                    ;;
                '-n')
                    echo -n "$p_string"
                    echo -n "[$TIME_DATE] $p_string" >> "$PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                    ;;
                '-ne')
                    echo -ne "$p_string"
                    echo -ne "[$TIME_DATE] $p_string" >> "$PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                    ;;
                *)
                    echo "$p_string"
                    echo "[$TIME_DATE] $p_string" >> "$PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                    ;;
            esac
        fi
    else
        case "$p_option" in
            '-e')
                echo -e "$p_string"
                ;;
            '-n')
                echo -n "$p_string"
                ;;
            '-ne')
                echo -ne "$p_string"
                ;;
            *)
                echo "$p_string"
                ;;
        esac
    fi

    # Restore timer status variables old values if they were modified because of the redirection to the log file only.
    if [ "$STAT_LOG_REDIRECT" = "true" ]; then
        if [ "$STAT_LOG_REDIRECT" = "log" ] && [ "$STAT_TIME_TXT" -eq 0 ]; then
        
            # Backup the old values to restore them when the log processing will be done.
            STAT_TIME_TXT="$OLD_STAT_TIME_TXT"
            
            # Checking if the correct values were reassignated.
            CheckSTAT_TIME_TXT
        fi
    fi
}

# -----------------------------------------------

## DIRECTORIES PATHS CHECKING

# 

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### ERRORS HANDLING FUNCTIONS

## EXIT HANDLING

# Handling exit command from sourced files, as it's impossible to properly exit the script from these.
function ExitError { kill "$$"; }

# -----------------------------------------------

## SCRIPT'S ERRORS HANDLING

# Handling command outputs.
function HandleErrors
{
	#***** Paramètres *****
	p_returnCode=$1     # Return code of the last command executed. If you didn't launched any command before calling this function, you can pass any number different of '0' as first argument.
	p_errorString=$2    # Chaîne de caractères du type d'erreur à afficher.
	p_adviceString=$3   # Chaîne de caractères affichants un conseil pour orienter l'utilisateur vers la meilleure solution en cas de problème.
    p_badValue=$4       # Incorrect value which caused the error.
	p_file=$5            # The name of the file where the error occured.
	p_function=$6        # The name of the function where the error occured.
	p_lineno=$7          # Ligne à laquelle le message d'erreur s'est produite.

    #***** Variables *****
    # Echoing the line breaks according to the "STAT_LOG_REDIRECT" status variable's value (processed a few lines down).
    v_echo=""
    
    v_headerString="$(tput setaf "$COL_RED")IN $(tput setaf "$COL_CYAN")$p_file$(tput setaf "$COL_RED"), FUNCTION $(tput setaf "$COL_CYAN")$p_function$(tput setaf "$COL_RED"), LINE $(tput setaf "$COL_CYAN")$p_lineno$(tput setaf "$COL_RED") -->"

	# ***** Code *****
	CheckSTAT_ERROR
	
	# If the text was redirected to the log file, it will also be redirected to the terminal.
	CheckSTAT_LOG_REDIRECT; if [ "$STAT_LOG_REDIRECT" = "log" ]; then
        STAT_LOG_REDIRECT="tee"
        v_echo="$(echo >&2 | tee -a "$PROJECT_LOG_PATH")"
    else
        v_echo="$(Newline)"
	fi

	if [ "$p_returnCode" -eq 0 ]; then
        return
    else        
        if [ -n "$STAT_ERROR" ] && [ "$STAT_ERROR" = "fatal" ]; then
            HeaderRed "$v_headerString FATAL ERROR : $(tput setaf "$COL_CYAN")${p_errorString^^}$(tput sgr0)" >&2
        else
            HeaderRed "$v_headerString FATAL ERROR : $(tput setaf "$COL_CYAN")${p_errorString^^}$(tput sgr0)" >&2
        fi

        if [ -z "$p_adviceString" ]; then
            EchoMsg "$(tput setaf "$COL_RED")No advice to give$(tput sgr0)." >&2
            echo "$v_echo"
        else
            EchoMsg "$(tput setaf "$COL_RED")Advice : $p_adviceString$(tput sgr0)" >&2
            echo "$v_echo"
        fi
            
        if [ -z "$p_badValue" ]; then
            EchoMsg "Value that caused this error : Unknown error"
        else
            EchoMsg "Value that caused this error : $p_badValue"
        fi

        if [ "$STAT_ERROR" = "fatal" ]; then
            EchoMsg "$(tput setaf "$COL_RED")Stopping the execution of $(tput setaf "$COL_CYAN")$(basename "$0")$(tput sgr0)." >&2
            echo "$v_echo"

            exit 1
        else
            KbInputYesNo "$(tput setaf "$COL_RED")Do you want to stop the execution of $(tput setaf "$COL_RED")$(basename "$0") ?$(tput sgr0) (yes/no)" \
                "Resuming script execution." "return" >&1 "Aborting script execution." >&2 "exit"
        fi
    fi
}
