#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### CHECKING FOR IDENTIFIANTS

## EFFECTIVE USER IDENTIFIANTS CHECKING

# Checking if the current effective UID (EUID) is not equal to 0 (root user's EUID)

# Required functions and files :
#   - HandleErrors      -> Bash-Utils/src/functions/Headers.lib
function CheckRootEUID
{
    if [ "$EUID" -ne 0 ]; then
        HandleErrors "1" "YOU NEED ROOT USER'S PRIVILEGES TO PERFORM THIS ACTION !" "Please launch your script with super-user privileges." \
            "EUID = 0" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
    fi
}

# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### VARIABLES VALUES CHECKING

## NUMBER VALUES

# Checking floating value.
function IsFloat
{
    #***** Parameters *****
    local p_value=$1

    #***** Code *****
    if [[ "$p_value" =~ ^[+-]?[0-9]+\.?[0-9]*$ ]]; then
        return 0
    fi
}

# Checking floating and integer value.
function IsFloatInt
{
    #***** Parameters *****
    local p_value=$1

    #***** Code *****
    if [[ "$p_value" =~ ^([0-9]+\.?|[0-9]*\.[0-9]+)$ ]]; then
        return 0
    fi
}

# Checking integer value.
function IsInt
{
    #***** Parameters *****
    local p_value=$1

    #***** Code *****
    if [[ "$p_value" =~ ^[+-]?[0-9]+$ ]]; then
        return 0
    fi
}

# -----------------------------------------------

## STRING VALUES

# Checking if value is an alphabetic string (not any number allowed)
function IsAlpha
{
    #***** Parameters *****
    local p_value=$1
    
    #***** Code *****
    if [[ "$p_value" =~ [A-Z] ]]; then
        return 0
    fi
}

# Checking if vialue is an aplhanumeric string.
function IsAlphaNum
{
    #***** Parameters *****
    local p_value=$1

    #***** Code *****
    if [[ "$p_value" =~ [^a-zA-Z0-9\ ] ]]; then
        return 0
    fi
}

# -----------------------------------------------

# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### PATHS CHECKING

## FILE PATHS CHECKING

# Checking for "$PROJECT_LOG_PATH"

# Required functions and files :
function CheckProjectLogPath
{
    if [ -z "$__PROJECT_LOG_PATH" ]; then
        HandleErrors "1" "NO PATH PROVIDED INTO THE $(DechoE "PROJECT_LOG_PATH") VARIABLE" \
            "Please add the path as argument." "$PROJECT_LOG_PATH" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
    elif [ ! -f "$__PROJECT_LOG_PATH" ]; then
        HandleErrors "1" "BAD PATH PROVIDED INTO THE $(DechoE "PROJECT_LOG_PATH") VARIABLE" \
            "Please correct the path passed as argument." "$PROJECT_LOG_PATH" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
    fi
}

# Checking for project's log file's status, then write the wanted text with 'echo' command's parameters.
function CheckProjectLogStatus
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2       # "echo" command options
    shift && shift
    
    local p_extraArgs=("$@")    # More processing arguments (like the processing of a whole line-long string).

    #***** Variables *****
    local v_errorEcho
    v_errorEcho="Unable to write into the $(DechoE "$__PROJECT_LOG_PATH") file."

    # If the text is redirected towars the log path, it's better to put every timer status variables values to '0'.
    if [ "$__STAT_LOG_REDIRECT" = "true" ]; then
        if [ "$__STAT_LOG_REDIRECT" = "log" ] && [ "$__STAT_TIME_TXT" -gt 0 ]; then

            # Backup the old values to restore them when the log processing will be done.
            local __OLD_STAT_TIME_TXT="$__STAT_TIME_TXT"
            __STAT_TIME_TXT="0"; CheckSTAT_TIME_TXT "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
        fi
    fi
    
    #**** Code *****
    CheckSTAT_LOG           "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckSTAT_LOG_REDIRECT  "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckSTAT_TIME_TXT      "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckProjectLogPath 

    if [ -f "$__PROJECT_LOG_PATH" ] && [ "$__STAT_LOG" = "true" ] && [ -n "$__STAT_LOG_REDIRECT" ]; then
        if [ "$__STAT_LOG_REDIRECT" = "log" ]; then

            # Checking the extra arguments array.
            if [ -n "${p_extraArgs[*]}" ]; then

                for val in "${p_extraArgs[@]}"; do
                    # If the "nodate" value is passed as argument.
                    if [[ "$val" = "nodate" ]]; then
                        case "$p_option" in
                            '-n')
                                echo -ne "$p_string" >> "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                ;;
                            '')
                                echo -e "$p_string" >> "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                ;;
                        esac
                    else
                        case "$p_option" in
                            '-n')
                                echo -ne "$p_string" >> "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                echo -e "${__COL_YELLOW}Warning : incorrect argument given as extra argument array in $__COL_CYAN${BASH_SOURCE[0]}$__COL_YELLOW, $__COL_CYAN${FUNCNAME[0]}$__COL_YELLOW --> $val$__COL_RESET" 2>&1 | tee -a "$PROJECT_LOG_PATH"
                                ;;
                            '')
                                echo -e "$p_string" >> "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                echo -e "${__COL_YELLOW}Warning : incorrect argument given as extra argument array in $__COL_CYAN${BASH_SOURCE[0]}$__COL_YELLOW, $__COL_CYAN${FUNCNAME[0]}$__COL_YELLOW --> $val$__COL_RESET" 2>&1 | tee -a "$PROJECT_LOG_PATH"
                                ;;
                        esac
                    fi
                done
                
            # Else, if no argument is passed in "$p_extraArgs" parameter.
            else
                case "$p_option" in
                    '-n')
                        echo -ne "[$__TIME_DATE] $p_string" >> "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                        ;;
                    '')
                        echo -e "[$__TIME_DATE] $p_string" >> "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                        ;;
                esac
            fi
        
        sleep "$__STAT_TIME_TXT"
        
        elif [ "$__STAT_LOG_REDIRECT" = "tee" ]; then
                    
            # Checking the extra arguments array.
            if [ -n "${p_extraArgs[*]}" ]; then

                for val in "${p_extraArgs[@]}"; do
                    # If the "nodate" value is passed as argument.
                    if [ "$val" = "nodate" ]; then
                        case "$p_option" in
                            '-n')
                                echo -ne "$p_string" 2>&1 | tee -a "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                ;;
                            '')
                                echo -e "$p_string" 2>&1 | tee -a "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                ;;
                        esac
                    else
                        case "$p_option" in
                            '-n')
                                echo -ne "$p_string" 2>&1 | tee -a "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                echo -e "${__COL_YELLOW}Warning : incorrect argument given as extra argument array in $__COL_CYAN${BASH_SOURCE[0]}$__COL_YELLOW, $__COL_CYAN${FUNCNAME[0]}$__COL_YELLOW --> $val$__COL_RESET" 2>&1 | tee -a "$PROJECT_LOG_PATH"
                                ;;
                            '')
                                echo -e "$p_string" 2>&1 | tee -a "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                echo -e "${__COL_YELLOW}Warning : incorrect argument given as extra argument array in $__COL_CYAN${BASH_SOURCE[0]}$__COL_YELLOW, $__COL_CYAN${FUNCNAME[0]}$__COL_YELLOW --> $val$__COL_RESET" 2>&1 | tee -a "$PROJECT_LOG_PATH"
                                ;;
                        esac
                    fi
                done
            # Else, if no argument is passed in "$p_extraArgs" parameter.
            else
                case "$p_option" in
                    '-n')
                        echo -ne "$p_string"
                        echo -ne "[$__TIME_DATE] $p_string" >> "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                        ;;
                    '')
                        echo -e "$p_string"
                        echo -e "[$__TIME_DATE] $p_string" >> "$__PROJECT_LOG_PATH" || { echo "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                        ;;
                esac
            fi
            
            sleep "$__STAT_TIME_TXT"
            
        fi
    else
        case "$p_option" in
            '-n')
                echo -ne "$p_string"
                ;;
            '')
                echo -e "$p_string"
                ;;
        esac
        
        sleep "$__STAT_TIME_TXT"
        
    fi

    # Restore timer status variables old values if they were modified because of the redirection to the log file only.
    if [ "$__STAT_LOG_REDIRECT" = "true" ]; then
        if [ "$__STAT_LOG_REDIRECT" = "log" ] && [ "$__STAT_TIME_TXT" -eq 0 ]; then
        
            # Backup the old values to restore them when the log processing will be done, then check if the correct values were reassignated.
            __STAT_TIME_TXT="$__OLD_STAT_TIME_TXT"; CheckSTAT_TIME_TXT "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
        fi
    fi
}

# -----------------------------------------------

## DIRECTORIES PATHS CHECKING

# 

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### ERRORS HANDLING FUNCTIONS

## EXIT HANDLING

# Handling exit command from sourced files, as it's impossible to properly exit the script from these.
function ExitError { kill "$$"; }

# -----------------------------------------------

## SCRIPT'S ERRORS HANDLING

# Handling command outputs.
# Featured functions and files from the "basis" category :
#   - 
function HandleErrors
{
	#***** Paramètres *****
	local p_returnCode=$1     # Return code of the last command executed. If you didn't launched any command before calling this function, you can pass any number different of '0' as first argument.
	local p_errorString=$2    # Chaîne de caractères du type d'erreur à afficher.
	local p_adviceString=$3   # Chaîne de caractères affichants un conseil pour orienter l'utilisateur vers la meilleure solution en cas de problème.
    local p_badValue=$4       # Incorrect value which caused the error.
	local p_file=$5           # The name of the file where the error occured.
	local p_function=$6       # The name of the function where the error occured.
	local p_lineno=$7         # Ligne à laquelle le message d'erreur s'est produite.

    #***** Variables *****
    local v_hdrString
    v_hdrString="$(echo -e "IN $(DechoE "$p_file"), FUNCTION $(DechoE "$p_function"), LINE $(DechoE "$p_lineno") -->")"

	# ***** Code *****
	CheckSTAT_ERROR "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

	if [ "$p_returnCode" -eq 0 ]; then
        return
    else
        if [ "$__STAT_LOG_REDIRECT" = "log" ]; then
            __STAT_LOG_REDIRECT="tee"; CheckSTAT_LOG_REDIRECT "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
        fi

        if [ -n "$__STAT_ERROR" ] && [ "$__STAT_ERROR" = "fatal" ]; then
            HeaderRed "$v_hdrString FATAL ERROR : $(DechoE "${p_errorString^^}")" >&2
        else
            HeaderRed "$v_hdrString ERROR : $(DechoE "${p_errorString^^}")" >&2
        fi

        if [ -z "$p_adviceString" ]; then
            EchoError "No advice to give."; Newline >&2
        else
            EchoError "$(DechoE "Advice") : $p_adviceString" >&2; Newline >&2
        fi
            
        if [ -z "$p_badValue" ]; then
            EchoError "Value that caused this error : $(DechoOrange "Unknown error")"; Newline >&2
        else
            EchoError "Value that caused this error : $(DechoE "$p_badValue")"; Newline >&2
        fi

        if [ "$__STAT_ERROR" = "fatal" ]; then
            EchoError "Stopping the execution of $(DechoE "$(basename "$0")")."; Newline >&2

            exit 1
        else
            KbInputYesNo "Do you want to stop the execution of $(DechoE "$(basename "$0")") ? (yes/no)" \
                "Resuming script execution." "return" >&1 "Aborting script execution." >&2 "exit"
        fi
    fi
}
