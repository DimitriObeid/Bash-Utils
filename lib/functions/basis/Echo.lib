#!/usr/bin/env bash

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo "WARNING !"; echo
    echo "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !"
    echo "Use this script only by sourcing it in your project script."; echo

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### TEXT WRITING AND DECORATION

## WRITING DIFFERENTLY COLORED TEXT BETWEEN TEXT

# # Basis procssing. --> FUTURE FUNCTIONNALITY
# function DechoBasis
# {
#     #***** Parameters *****
#     local p_string=$1
#     local p_newColor=$2
#     
#     #***** Variables *****
#     local v_oldColor="$(ReadFromFIFOColor "$__COL_CODE")"
#     echo "$__COL_CODE"
# 
#     #***** Code *****
#     if [ ! -p "$__PROJECT_FIFO_COLORS" ]; then
# #     if [ "$p_oldColor" = "$v_newColor" ]; then
# #         SwitchColorOld "$v_newColor"
# #     fi
#         echo -e "$p_string"
#     else
#         echo -ne "$(tput setaf "166")$p_string$p_oldColor"
#         __COL_CODE="$(tput setaf "$v_oldColor")"
#     fi
# }

function Decho { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_RESET"; }    # Colouring a part of a simple message written via the "echo" command.

## Pun between "deco(ration)" and "echo", followed by the first letter of the message type name (error (E), moving to a new sub-step (N) or success (S)).
function DechoE { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_RED"; }
function DechoN { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_YELLOW"; }
function DechoS { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_GREEN"; }

# -----------------------------------------------

## COLOR A PART OF A TEXT WITH ANOTHER COLOR (STEPS).
function DechoBlue      { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_BLUE"; }
function DechoCyan      { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_CYAN"; }
function DechoGreen     { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_GREEN"; }
function DechoOrange    { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_ORANGE"; }
function DechoPurple    { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_PURPLE"; }
function DechoRed       { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_RED"; }
function DechoYellow    { echo -e "${__COLOR_CODE_HIGHLIGHT}$1$__COL_YELLOW"; }

# -----------------------------------------------

## DISPLAYING A COLORED MESSAGE WITH A PAUSE TIME DEPENDING ON THE "$__STAT_TIME_TXT" status variable.

# Error message

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoError
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    # There's no need to check if the "$__PROJECT_FIFO_COLORS" global variable contains a path as value,
    # as this failsafe is done in the function triggered by the call of the "$__COL_RED" variable (it's the same for the other "$__COL_*" variables).
    CheckProjectLogStatus "${__COLOR_CODE_ERROR}$__TXT_TAB$__TXT_TAB $p_string${__COLOR_CODE_RESET}" "$p_option" "${p_arrExtraArgs[@]}" >&2

    sleep "$__STAT_TIME_TXT"
}

# Normal message (without any extra color), with redirection checking.

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoMsg
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "$p_string" "$p_option" "${p_arrExtraArgs[@]}"

    sleep "$__STAT_TIME_TXT"
}

# New sub-step message

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoNewstep
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "$__COL_ORANGE$__TXT_TAB$__TXT_TAB $p_string$__COL_RESET" "$p_option" "${p_arrExtraArgs[@]}"

    sleep "$__STAT_TIME_TXT"
}

# Read input values

# Featured functions and files from the "functions" folder :
#	- CheckProjectLogStatus		--> Checkings.lib

function EchoRead
{
	#***** Parameters *****
	local p_string=$1
	
	#***** Code *****
	if [ -f "$__PROJECT_LOG_FILE_PATH" ] && [ "$__STAT_LOG" = "true" ] && [ -n "$__STAT_LOG_REDIRECT" ]; then
		echo "$p_string" >> "$__PROJECT_LOG_FILE_PATH"
	fi
}

# Success message

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoSuccess
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "$__COL_GREEN$__TXT_TAB$__TXT_TAB $p_string$__COL_RESET" "$p_option" "${p_arrExtraArgs[@]}" >&1

    sleep "$__STAT_TIME_TXT"
}

# Warning message

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoWarning
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "$__COL_YELLOW$__TXT_TAB$__TXT_TAB $p_string$__COL_RESET" "$p_option" "${p_arrExtraArgs[@]}" 1>&2

    sleep "$__STAT_TIME_TXT"
}

# -----------------------------------------------

## TEXT FORMATTING

# Keep the same text format between lowercased or uppercased text printed by a formatting text function ("ToLowercase()" OR "ToUppercase()").
function KeepFormating
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo "$p_string"
}

# Print a lowercased text.
function ToLowercase
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo "$p_string" | tr '[:upper:]' '[:lower:]'
}

# Print an uppercased text.
function ToUppercase
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo "$p_string" | tr '[:lower:]' '[:upper:]'
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### LINE BREAKS

## LINE BREAKS ACCORDING TO THE "$MAIN_SCRIPT_LOG" VARIABLE VALUE.

# Redirecting the output of the "echo" command

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
#	- HandleErrors				--> Checkings.lib
function Newline
{
    #***** Parameters *****
    local number=$1

    #***** Code *****
    if [ -n "$number" ] && ! IsInt "$number"; then
        HandleErrors "1" "THE NUMBER OF LINE BREAKS MUST BE AN INTEGER" \
            "Check at the mentionned file in the 4th $(DechoE "HandleErrors") function's argument" "$number" \
            "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-3 ))"
    else
        if [ -n "$number" ]; then
            # Doing X line breaks according to the number passed as argument.
            for ((i=0; i<number; i++)); do
                CheckProjectLogStatus "" "" "nodate"
            done
        else
            CheckProjectLogStatus "" "" "nodate"
        fi
    fi
}
