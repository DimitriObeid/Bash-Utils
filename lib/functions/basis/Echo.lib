#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### TEXT WRITING AND DECORATION

## COLOR A PART OF A TEXT WITH ANOTHER COLOR (STEPS).

# Switching color
function SwitchColorOld
{
    #***** Parameters *****
    local p_originalColor=$1

    #***** Variables *****
    local key='140'             # Key
    local code="$__COL_CODE"    # Color code number to multiply by 'k'
    local div='256'             # Number to divide
    local res                   # Result
    
    #***** Code *****
    res=$(( code*key ))
    res=$(( res/div ))
    
    echo "$(tput setaf "$res"; __COL_CODE="$res")"
    echo $res
}

function DechoBasisOld
{
    #***** Parameters *****
    local p_string=$1           # The string to display.
    local p_originalColor=$2    # The original text's color.
    
    #***** Code *****
    
    #***** Variables *****
    # TODO : trying to detect the original color and adapt the decoration color to make it as readable as possible.
    local v_newColor
    v_newColor="$(SwitchColor "$p_originalColor")"
    
    #***** Code *****
    if [ "$p_originalColor" = "$__COL_BLUE" ] || [ "$p_originalColor" = "$__COL_CYAN" ]; then
        # TODO : adapting this line of code when the aforementioned function will be ready.
        echo "${v_newColor}$p_string$p_originalColor"
    else
        echo "${__COL_CYAN}$p_string$p_originalColor"
    fi
}

# -----------------------------------------------

## WRITING DIFFERENTLY COLORED TEXT BETWEEN TEXT

# Basis procssing.
function DechoBasis
{
    #***** Parameters *****
    local p_string=$1
    local p_oldColor=$2
    
    #***** Variables *****
    local v_newColor="$__COL_CODE"
    echo "$__COL_CODE"

    #***** Code *****
    if [ ! -p "$__PROJECT_FIFO_COLORS" ]; then
#     if [ "$p_oldColor" = "$v_newColor" ]; then
#         SwitchColorOld "$v_newColor"
#     fi
        echo -e "$p_string"
    else
        echo -e "$(tput setaf "$v_newColor")$p_string$p_oldColor"
    fi
}

function Decho { echo -e "${__COL_CYAN}$1$__COL_RESET"; }    # Colouring a part of a simple message written via the "echo" command.

## Pun between "deco(ration)" and "echo", followed by the first letter of the message type name (error (E), moving to a new sub-step (N) or success (S)).
function DechoE { DechoBasis "$1" "$__COL_RED"; }
function DechoN { DechoBasis "$1" "$__COL_YELLOW"; }
function DechoS { DechoBasis "$1" "$__COL_GREEN"; }

# -----------------------------------------------

## COLOR A PART OF A TEXT WITH ANOTHER COLOR (STEPS).
function DechoBlue      { DechoBasis "$1" "$__COL_BLUE"; }
function DechoCyan      { DechoBasis "$1" "$__COL_CYAN"; }
function DechoGreen     { DechoBasis "$1" "$__COL_GREEN"; }
function DechoOrange    { DechoBasis "$1" "$__COL_ORANGE"; }
function DechoPurple    { DechoBasis "$1" "$__COL_PURPLE"; }
function DechoRed       { DechoBasis "$1" "$__COL_RED"; }
function DechoYellow    { DechoBasis "$1" "$__COL_YELLOW"; }

# -----------------------------------------------

## DISPLAYING A COLORED MESSAGE WITH A PAUSE TIME DEPENDING ON THE "$__STAT_TIME_TXT" status variable.

# # Display a text according to different parameters than log file's existence.
# function AdvancedEchoCheck
# {
#     #***** Parameters *****
#     local p_string=$1
#     local p_var=$2
#     local p_stat=$3; shift 3
# 
#     #***** Variables *****
#     local arr; arr=("$@")
# 
#     #***** Code *****
# 
# }

# Display text according to a global variable's value (the "$__PROJECT_FIFO_COLORS" global variable's value, for example).
function EchoContext
{
    #***** Parameters *****
    local p_string=$1
    local p_var=$2
    local p_stat=$3; shift 3

    #***** Variables *****
    local arr; arr=('E' 'N' 'S' 'W')

    #***** Code *****
    CheckArgs_EchoContext "$p_var" "$p_stat" "${arr[@]}"
    
    if [ ! -p "$__PROJECT_FIFO_COLORS" ]; then
        CheckProjectLogPath "$p_string"
    else
        if [ "$p_stat" = 'E' ]; then
            EchoError "$p_stat"
        elif [ "$p_stat" = 'N' ]; then
            EchoNewstep "$p_string"
        elif [ "$p_stat" = 'S' ]; then
            EchoSuccess "$p_string"
        elif [ "$p_stat" = 'W' ]; then
            EchoWarning "$p_string"
        fi
    fi
}

# Error message

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     -> Checkings.lib
function EchoError
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    # There's no need to check if the "$__PROJECT_FIFO_COLORS" global variable contains a path as value,
    # as this failsafe is done in the function triggered by the call of the "$__COL_RED" variable (it's the same for the other "$__COL_*" variables).
    CheckProjectLogStatus "$__COL_RED$__TXT_TAB$__TXT_TAB $p_string$__COL_RESET" "$p_option" "${p_arrExtraArgs[@]}" >&2

    sleep "$__STAT_TIME_TXT"
}

# Normal message (without any extra color), with redirection checking.

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     -> Checkings.lib
function EchoMsg
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "$p_string" "$p_option" "${p_arrExtraArgs[@]}"

    sleep "$__STAT_TIME_TXT"
}

# New sub-step message

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     -> Checkings.lib
function EchoNewstep
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    exit 1
    CheckProjectLogStatus "$__COL_ORANGE$__TXT_TAB$__TXT_TAB $p_string$__COL_RESET" "$p_option" "${p_arrExtraArgs[@]}"

    sleep "$__STAT_TIME_TXT"
}

# Success message

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     -> Checkings.lib
function EchoSuccess
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "$__COL_GREEN$__TXT_TAB$__TXT_TAB $p_string$__COL_RESET" "$p_option" "${p_arrExtraArgs[@]}" >&1

    sleep "$__STAT_TIME_TXT"
}

# Warning message

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     -> Checkings.lib
function EchoWarning
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "$__COL_YELLOW$__TXT_TAB$__TXT_TAB $p_string$__COL_RESET" "$p_option" "${p_arrExtraArgs[@]}" 1>&2

    sleep "$__STAT_TIME_TXT"
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### LINE BREAKS

## LINE BREAKS ACCORDING TO THE "$MAIN_SCRIPT_LOG" VARIABLE VALUE.

# Redirecting the output of the "echo" command

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     -> Checkings.lib
function Newline
{
    #***** Parameters *****
    local number=$1

    #***** Code *****
    if [ -n "$number" ] && ! IsInt "$number"; then
        HandleErrors "1" "THE NUMBER OF LINE BREAKS MUST BE AN INTEGER" \
            "Check at the mentionned file in the 4th $(DechoE "HandleErrors") function's argument" "$number" \
            "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-3 ))"
    else
        if [ -n "$number" ]; then
            # Doing X line breaks according to the number passed as argument.
            for ((i=0; i<number; i++)); do
                CheckProjectLogStatus "" "" "nodate"
            done
        else
            CheckProjectLogStatus "" "" "nodate"
        fi
    fi
}
