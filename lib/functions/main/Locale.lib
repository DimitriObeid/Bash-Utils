#!/usr/bin/env bash

# ---------------------
# SCRIPT'S INFORMATIONS

# Name          : Locale.lib
# Module        : Main
# Author(s)     : Dimitri OBEID
# Version       :


# ------------------
# FILE DESCRIPTION :

#

# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154,SC2016

# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2; echo >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2; echo >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2; echo >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2; echo >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2; echo >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2; echo >&2;

fi; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### LOCALE DISPLAY FUNCTIONS
#### DEBUG ID : "locale::locale-display-functions"

__BU_MAIN_LOCALE_LIB__CAT_DEBUG_ID__LOCALE_DISPLAY_FUNCTIONS="locale::locale-display-functions";

## OPTIMIZATION FUNCTIONS
## DEBUG ID : "optimization-functions"

__BU_MAIN_LOCALE_LIB__SUBCAT_DEBUG_ID__LOCALE_DISPLAY_FUNCTIONS__OPTIMIZATION_FUNCTIONS="${__BU_MAIN_LOCALE_LIB__CAT_DEBUG_ID__LOCALE_DISPLAY_FUNCTIONS}::optimization-functions";

# ··································································
# Checking if the language's code matches to a valid ISO 639-1 code.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - Feel free to call a function if it is needed for your contribution.
function BU.Main.Locale.CheckISO_639_1_ValidCode()
{
    [[ ${__BU_MAIN_LOCALE_ISO_639_1_LOCALES_ARRAY[*]} =~ ${1,,} ]] && return 0;

    # Since the second version of the library compiler (which does not includes any compiled files) will still be supported along the version which
    # will ship a compiled file (in case a problem occurs with the compiled file or the remote one), the array of ISO 639-1 codes is also supported.
    [[ ${___BU_COMPILER__LANG_ARRAY[*]} =~ ${1,,} ]] && return 0;

    return 1;
}

# ·······························································································································································································································
# Handling the parameters errors for the "BU.Main.Locale.PrintLanguageName.Optimize()" function, only if the main script is the 3rd version of the library compiler, which does not heavily depends on the framework's resources.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.Locale.CheckISO_639_1_ValidCode()     -> Main -> Locale.lib (this file)
function BU.Main.Locale.PrintLanguageName.Optimize.HandleParameterErrorsLibCompiler()
{
    #**** Parameters ****
	local p_code=${1:-NULL};            # ARG TYPE : ISO 639-1 code     - REQUIRED | DEFAULT VAL : NULL		- DESC : ISO 639-1 code of the language in which the file must be translated.

	local p_langNameEngl=${2:-NULL};	# ARG TYPE : String			    - REQUIRED | DEFAULT VAL : NULL		- DESC : Name of the targeted language in English.
	local p_langNameOrig=${3:-NULL};	# ARG TYPE : String			    - REQUIRED | DEFAULT VAL : NULL		- DESC : Name of the targeted language in its own language.

    #**** Code ****
	if [ "${p_code^^}" == 'NULL' ]; then echo "MISSING ISO 639-1 CODE"; return 1; fi

	# Checking if a valid ISO 639-1 code was passed as first argument.
	if ! BU.Main.Locale.CheckISO_639_1_ValidCode "${p_code}"; then echo "BAD ISO 639-1 CODE"; return 1; fi

	# Checking if the name of the target language in English was passed as 4th argument.
	if [ "${p_langNameEngl^^}" == 'NULL' ]; then echo "MISSING TARGET LANGUAGE'S NAME : ENGLISH"; return 1; fi

	# Checking if the name of the target language in the user's system language was passed as 5th argument.
	if [ "${p_langNameOrig^^}" == 'NULL' ]; then echo "MISSING TARGET LANGUAGE'S NAME : USER'S SYSTEM LANGUAGE"; return 1; fi

    return 0;
}

# ····················································································································································································
# Optimizing the "BU.Main.Locale.PrintLanguageName()" function's code, in order to avoid to modify manually the code and the rendered layout for each of the 200+ supported languages.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.Args__Locale.PrintLanguageName.Optimize()                             -> Main -> Args.lib

#   - BU.Main.Locale.PrintLanguageName.Optimize.HandleParameterErrorsLibCompiler()  -> Main -> Locale.lib (this file)
#   - BU.Main.Locale.PrintLanguageName.Optimize()                                   -> Main -> Locale.lib (this function, this file)
function BU.Main.Locale.PrintLanguageName.Optimize()
{
	#**** Parameters ****
	local p_code=${1:-NULL};            # ARG TYPE : ISO 639-1 code     - REQUIRED | DEFAULT VAL : NULL		- DESC : ISO 639-1 code of the language in which the file must be translated.
	local p_dispOrder=${2:-NULL};		# ARG TYPE : String			    - OPTIONAL | DEFAULT VAL : NULL		- DESC : Display order of the language's name in its own language, in English or in the user's system language.
    local p_print_code=${3:-yes};   	# ARG TYPE : Bool			    - REQUIRED | DEFAULT VAL : yes     	- DESC : Authorization to print the ISO 639-1 code before the language name.

	local p_langNameEngl=${4:-NULL};	# ARG TYPE : String			    - REQUIRED | DEFAULT VAL : NULL		- DESC : Name of the targeted language in English.
	local p_langNameOrig=${5:-NULL};	# ARG TYPE : String			    - REQUIRED | DEFAULT VAL : NULL		- DESC : Name of the targeted language in its own language.
	local p_langNameUser=${6:-NULL};	# ARG TYPE : String			    - REQUIRED | DEFAULT VAL : NULL		- DESC : Name of the targeted language in the user's system language.

    local p_disable_englishNamed=${7:-false};	# ARG TYPE : Bool	    - OPTIONAL | DEFAULT VAL : false	- DESC : Enabling or disabling the displaying of the language's name in English.
    local p_disable_originalName=${8:-false};	# ARG TYPE : Bool	    - OPTIONAL | DEFAULT VAL : false	- DESC : Enabling or disabling the displaying of the language's name in its own language.
    local p_disable_fromUserLang=${9:-false};	# ARG TYPE : Bool	    - OPTIONAL | DEFAULT VAL : false	- DESC : Enabling or disabling the displaying of the language's name in the user's language.

    #**** Variables ****
    local output;		# VAR TYPE : String		# DESC : Storing the final form of the string to display.
	local valid;		# VAR TYPE : Bool		# DESC : Storing the information to inform the post text display condition that the value passed into the "${p_dispOrder}" 'Parameter was valid;

    local cod;			# VAR TYPE : CMD		# DESC : Displaying the targeted language's ISO 639-1 code according to the value passed into the "${p_print_code}" parameter.
    local eng;			# VAR TYPE : CMD		# DESC : Displaying the targeted language's English name according to the value passed into the "${p_disable_englishNamed}" parameter.
    local ori;			# VAR TYPE : CMD		# DESC : Displaying the targeted language's name in its own language according to the value passed into the "${p_disable_originalName}" parameter.
    local usr;			# VAR TYPE : CMD		# DESC : Displaying the targeted language's name in the user's system language according to the value passed into the "${p_disable_fromUserLang}" parameter.
    local tmp;          # VAR TYPE : CMD        # DESC : Storing a complex command substitution called in the previous "${usr}" variable.

	#**** Code ****
    if [[ ${0##*/} != lib-compilerV3.?(ba)sh ]]; then
        if ! BU.Main.Args__Locale.PrintLanguageName.Optimize "${p_code}" "${p_langNameEngl}"    "${p_langNameOrig}" "${p_langNameUser}" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO - 1 ))"; then local C="${?}"; return "${C}"; fi
    else
        BU.Main.Locale.PrintLanguageName.Optimize.HandleParameterErrorsLibCompiler "${p_code}"  "${p_langNameEngl}" "${p_langNameOrig}" || { local C="${?}"; return "${C}"; };
    fi

	# Checking if a boolean value was passed in the "${p_disable_fromUserLang}" parameter.
	if [ "${p_disable_fromUserLang}" != 'false' ] && [ "${p_disable_fromUserLang}" != 'true' ]; then p_disable_fromUserLang='false'; fi

	# Checking if a boolean value was passed in the "${p_disable_englishNamed}" parameter.
	if [ "${p_disable_englishNamed}" != 'false' ] && [ "${p_disable_englishNamed}" != 'true' ]; then p_disable_englishNamed='false'; fi

	# Checking if a boolean value was passed in the "${p_disable_originalName}" parameter.
	if [ "${p_disable_originalName}" != 'false' ] && [ "${p_disable_originalName}" != 'true' ]; then p_disable_originalName='false'; fi


	# Writing the code to display or not the targeted langage's ISO 639-1 code.
	cod="$(echo -n "$([ "${p_print_code,,}" == 'yes' ] && printf "%s, " "${p_code,,}" || printf '')")";

	# Writing the code to display or not the targeted langage's name in English.
	eng="$(echo -n "$([ "${p_disable_englishNamed,,}" == 'false' ] && printf "%s, " "${p_langNameEngl,,}" || printf '')")";

	# Writing the code to display or not the targeted langage's name in its own language.
	ori="$(echo -n "$([ "${p_disable_originalName,,}" == 'false' ] && printf "%s, " "${p_langNameOrig,,}" || printf '')")";

	# Writing the code to display or not the targeted language in the user's system language.
    tmp="$([ "${p_langNameUser^^}" != 'NULL' ] && "${p_langNameUser,,}" || printf "NULL")";

	usr="$(echo -n "$([ "${p_disable_fromUserLang,,}" == 'false' ] && printf "%s, " "${tmp}" || printf '')")";

	# Adaptation of the layout of the language's name according to the value of the "${p_dispOrder}" parameter.
	if   	[[ "${p_dispOrder,,}" == c* ]]; then
		  if [ "${p_dispOrder,,}" == 'cod,eng,ori,usr' ]; then output="${cod}${eng}${ori}${usr}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'cod,eng,usr,ori' ]; then output="${cod}${eng}${usr}${ori}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'cod,ori,eng,usr' ]; then output="${cod}${ori}${eng}${usr}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'cod,ori usr,eng' ]; then output="${cod}${ori}${usr}${eng}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'cod,usr,eng,ori' ]; then output="${cod}${usr}${eng}${ori}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'cod,usr,ori,eng' ]; then output="${cod}${usr}${ori}${eng}"; valid='true';
		  fi

	elif 	[[ "${p_dispOrder,,}" == e* ]]; then
		  if [ "${p_dispOrder,,}" == 'eng,cod,ori,usr' ]; then output="${eng}${cod}${ori}${usr}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'eng,cod,usr,ori' ]; then output="${eng}${cod}${usr}${ori}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'eng,ori,cod,usr' ]; then output="${eng}${ori}${cod}${usr}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'eng,ori,usr,cod' ]; then output="${eng}${ori}${usr}${cod}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'eng,usr,cod,ori' ]; then output="${eng}${usr}${cod}${ori}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'eng,usr,ori,cod' ]; then output="${eng}${usr}${ori}${cod}"; valid='true';
		  fi

	elif 	[[ "${p_dispOrder,,}" == o* ]]; then
		  if [ "${p_dispOrder,,}" == 'ori,cod,eng,usr' ]; then output="${ori}${cod}${eng}${usr}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'ori,cod,usr,eng' ]; then output="${ori}${cod}${usr}${eng}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'ori,eng,cod,usr' ]; then output="${ori}${eng}${cod}${usr}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'ori,eng,usr,cod' ]; then output="${ori}${eng}${usr}${cod}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'ori,usr,cod,eng' ]; then output="${ori}${usr}${cod}${eng}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'ori,usr,eng,cod' ]; then output="${ori}${usr}${eng}${cod}"; valid='true';
		  fi

	elif 	[[ "${p_dispOrder,,}" == u* ]]; then
		  if [ "${p_dispOrder,,}" == 'usr,cod,eng,ori' ]; then output="${usr}${cod}${eng}${ori}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'usr,cod,ori,eng' ]; then output="${usr}${cod}${ori}${eng}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'usr,eng,cod,ori' ]; then output="${usr}${eng}${cod}${ori}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'usr,eng,ori,cod' ]; then output="${usr}${eng}${ori}${cod}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'usr,ori,cod,eng' ]; then output="${usr}${ori}${cod}${eng}"; valid='true';
		elif [ "${p_dispOrder,,}" == 'usr,ori,eng,cod' ]; then output="${usr}${ori}${eng}${cod}"; valid='true';
		  fi
	fi

	# If an invalid value was passed to the "${p_dispOrder}" 'Parameter, a valid value is
	# automatically generated by the computer, and the current function is called again.
	if [ "${valid,,}" != 'true' ]; then
		#**** Variables ****
		declare -a charsArray;	# VAR TYPE : Array	- DESC : This array stores the four valid values of the "${p_dispOrder}" 'Parameter.

		local rand;				# VAR TYPE : CMD	- DESC :

		#**** Code ****
		charsArray+=('cod' 'eng' 'ori' 'usr');

		rand="$(( RANDOM % 4 ))" || echo "FAILED";

		p_dispOrder="${charsArray[${rand}]}";

		# Malheureusement, il n'est pas possible de faire en sorte que la boucle for traite les caractères unicode en utilisant la syntaxe de base de shell.
		# Vous pouvez cependant utiliser une alternative telle que la commande "$(xargs)", qui est capable de traiter les caractères unicode.

		# La commande "$(xargs)" permet de générer des entrées à partir d'une entrée standard, ce qui signifie que vous pouvez l'utiliser pour traiter les caractères unicode.
		# Dans ce cas, la boucle for est remplacée par une commande grep qui permet de filtrer les éléments de la liste array et de les transmettre à la commande "$(xargs)".
		# La commande "$(xargs)" utilise alors la substitution de chaînes pour construire la chaîne de résultat finale.
		printf "%s\n" "${charsArray[@]}" | grep -v "${charsArray[${rand}]}" | xargs -I{} printf "%s,%s" "${p_dispOrder}" "{}";

		echo; echo; echo "Generated string : ${p_dispOrder}"; echo;

		# WARNING : DO NOT EDIT THE "${p_dispOrder}" 'LINE IF YOU DON'T KNOW WHAT YOU ARE DOING, OR ELSE THE SCRIPT WILL ENTER INTO AN INFINITE LOOP !!!!!
		BU.Main.Locale.PrintLanguageName.Optimize "${p_code}" \
			"${p_dispOrder}" \
			"${p_print_code}" \
			"${p_langNameEngl}" \
			"${p_langNameOrig}" \
			"${p_langNameUser}" \
			"${p_disable_englishNamed}" \
			"${p_disable_originalName}" \
			"${p_disable_fromUserLang}";
	fi

    # Removing the ", , " sub-string if the displaying of one of the informations is disabled by the user.
    output="${output// , /,}";

    # Removing the eventual ',,' sub-strings that can be created by the previous operation.
    output="${output//,,/, }";

	# Removing the extra blank space between two names of the targeted language (if there is more than one blank space between two words, if one of the names of the targeted language was hidden by the user).
	output="${output//  / }";

	# Removing the extra / last ', ' from the generated string.
    # shellcheck disable=SC2001
	output="$(echo "${output}" | sed 's/, $//')";

	# Printing the final form of the string to display
	echo "${output}";

	return 0;
}

## ----------------------------------------------

## PRINTING LOCALE
## DEBUG ID : "printing-locale"

__BU_MAIN_LOCALE_LIB__SUBCAT_DEBUG_ID__LOCALE_DISPLAY_FUNCTIONS__PRINTING_LOCALE="${__BU_MAIN_LOCALE_LIB__CAT_DEBUG_ID__LOCALE_DISPLAY_FUNCTIONS}::printing-locale";

# ·····························································································
# Printing the language name in English, in its own language and in the user's system language.

# Temporary : since the compiled file doesn't exists yet AND does not uses the main module's translation files,
# it is necessary to prevent Shellcheck to flag the "${__BU_MAIN_LOCALE_LIB__MSG__PrintLanguageName__CURR_LANG__*}" global variables as "referenced but not assigned".

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BUPLNOptimizer()  -> Main -> Locale.lib (defined into this function, this file)

# shellcheck disable=SC2154
function BU.Main.Locale.PrintLanguageName()
({
	#**** Parameters ****
	local p_code=${1:-NULL};        # ARG TYPE : ISO 639-1 code		- REQUIRED | DEFAULT VAL : NULL		- DESC : ISO 639-1 code of the language in which the file must be translated.
	local p_dispOrder=${2:-$'\0'};  # ARG TYPE : String				- OPTIONAL | DEFAULT VAL : NULL		- DESC : Display order of the name of the targeted language in its own language, in English or in the user's system language.
    local p_print_code=${3:-yes};   # ARG TYPE : Bool				- OPTIONAL | DEFAULT VAL : yes     	- DESC : Authorization to print the ISO 639-1 code before the language name.

    local p_disable_englishNamed=${4:-false};	# ARG TYPE : Bool	- OPTIONAL | DEFAULT VAL : false	- DESC : Enabling or disabling the displaying of the language's name in English.
    local p_disable_originalName=${5:-false};	# ARG TYPE : Bool	- OPTIONAL | DEFAULT VAL : false	- DESC : Enabling or disabling the displaying of the language's name in its own language.
    local p_disable_fromUserLang=${6:-false};	# ARG TYPE : Bool	- OPTIONAL | DEFAULT VAL : false	- DESC : Enabling or disabling the displaying of the language's name in the user's language.

    #**** Functions ****
    # Reducing the text to write in order to call the "$(BU.Main.Locale.PrintLanguageName.Optimize)" function.

    # Thanks to the "BU.Main.Locale.PrintLanguageName()" function's body being written between parenthesis instead of braces, the scope of the "BUPLNOptimizer()" function is local only.

	# ···············································································
    # Featured function(s) and file(s) by module(s) and from the "functions" folder :
    #   - BU.Main.Locale.PrintLanguageName.Optimize()   -> Main -> Locale (this file)
    function BUPLNOptimizer()
    {
        #**** Parameters ****
        local p_langNameEngl="${1:-NULL}";
        local p_langNameOrig="${2:-NULL}";

        #**** Variables ****
        local v_varNameFull="__BU_MAIN_LOCALE_LIB__MSG__PrintLanguageName__CURR_LANG__${p_langNameEngl^^}";

        #**** Code ****
        # The following commented lines are used as test / debug procedures.
        # Please leave them commented if you are not debugging the code of the "BU.Main.Locale.PrintLanguageName/.Optimize()" and "BUPLNOptimizer()" functions.

        # Testing the "${__BU_MAIN_LOCALE_LIB__MSG__PrintLanguageName__CURR_LANG__${p_langNameEngl^^}}" variable with a value,
        # since the main module's files were not translated with the "lang.csv" file as the date of Feb. 02 of 2023, when this function was coded.
#         __BU_MAIN_LOCALE_LIB__MSG__PrintLanguageName__CURR_LANG__FRENCH="FRANÇAISE";
#
#         echo; echo;
#
#         echo "${FUNCNAME[0]}() FUNCTION'S DATA :"; echo;
#         echo "LANG CODE     : ${p_code}";
#         echo "PRINT CODE    : ${p_print_code}";
#         echo "DISP ORDER    : ${p_dispOrder}";
#         echo;
#
#         echo "LANG ENG      : ${p_langNameEngl}";
#         echo "LANG ORI      : ${p_langNameOrig}";
#         echo "LANG USR      : ${!v_varNameFull}";
#         echo;
#
#         echo "DIS ENG       : ${p_disable_englishNamed}";
#         echo "DIS ORI       : ${p_disable_originalName}";
#         echo "DIS SYS       : ${p_disable_fromUserLang}";
#         echo;
#
#         echo "Salut depuis la fonction ${FUNCNAME[0]}(), située dans la fonction ${FUNCNAME[1]}";
#         echo;

        BU.Main.Locale.PrintLanguageName.Optimize "${p_code}" \
        "${p_dispOrder}" \
        "${p_print_code}" \
        "${p_langNameEngl}" \
        "${p_langNameOrig}" \
        "${!v_varNameFull}" \
        "${p_disable_englishNamed}" \
        "${p_disable_originalName}" \
        "${p_disable_fromUserLang}" || { local C="${?}"; echo "FAILED" >&2; return "${C}"; };

        return 0;
    }

	#**** Code ****

	# Checking if a code begins with a certain letter, in order to optimize the verification process.
	if 		[[ "${p_code,,}" == a* ]]; then
		  if [ "${p_code,,}" == 'aa' ]; then BUPLNOptimizer 'Afar'        "Afaraf";
		elif [ "${p_code,,}" == 'ab' ]; then BUPLNOptimizer 'Abkhazian'   "Аҧсуа";
		elif [ "${p_code,,}" == 'ae' ]; then BUPLNOptimizer 'Avestan'     "Avesta";
		elif [ "${p_code,,}" == 'af' ]; then BUPLNOptimizer 'Afrikaans'   "Afrikaans";
		elif [ "${p_code,,}" == 'ak' ]; then BUPLNOptimizer 'Akan'        "Akan";
		elif [ "${p_code,,}" == 'am' ]; then BUPLNOptimizer 'Amharic'     "አማርኛ";
		elif [ "${p_code,,}" == 'an' ]; then BUPLNOptimizer 'Aragonese'   "Aragonés";
		elif [ "${p_code,,}" == 'ar' ]; then BUPLNOptimizer 'Arabic'      "العربية";
		elif [ "${p_code,,}" == 'as' ]; then BUPLNOptimizer 'Assamese'    "অসমীয়া";
		elif [ "${p_code,,}" == 'av' ]; then BUPLNOptimizer 'Avaric'      "авар мацӀ ; магӀарул мацӀ";
		elif [ "${p_code,,}" == 'ay' ]; then BUPLNOptimizer 'Aymara'      "Aymar aru";
		elif [ "${p_code,,}" == 'az' ]; then BUPLNOptimizer 'Azerbaijani' "Azərbaycan dili";
		  fi

	elif 	[[ "${p_code,,}" == b* ]]; then
	  	  if [ "${p_code,,}" == 'ba' ]; then BUPLNOptimizer 'Bashkir'     "башҡорт теле";
		elif [ "${p_code,,}" == 'be' ]; then BUPLNOptimizer 'Belarusian'  "Беларуская";
		elif [ "${p_code,,}" == 'bg' ]; then BUPLNOptimizer 'Bulgarian'   "български език";
		elif [ "${p_code,,}" == 'bh' ]; then BUPLNOptimizer 'Bihari'      "भोजपुरी";
		elif [ "${p_code,,}" == 'bi' ]; then BUPLNOptimizer 'Bislama'     "Bislama";
		elif [ "${p_code,,}" == 'bm' ]; then BUPLNOptimizer 'Bambara'     "Bamanankan";
		elif [ "${p_code,,}" == 'bn' ]; then BUPLNOptimizer 'Bengali'     "বাংলা";
		elif [ "${p_code,,}" == 'bo' ]; then BUPLNOptimizer 'Tibetan'     "བོད་ཡིག";
		elif [ "${p_code,,}" == 'br' ]; then BUPLNOptimizer 'Breton'      "Brezhoneg";
		elif [ "${p_code,,}" == 'bs' ]; then BUPLNOptimizer 'Bosnian'     "Bosanski jezik";
		  fi

	elif 	[[ "${p_code,,}" == c* ]]; then
		  if [ "${p_code,,}" == 'ca' ]; then BUPLNOptimizer 'Catalan'               "Català";
		elif [ "${p_code,,}" == 'ce' ]; then BUPLNOptimizer 'Chechen'               "нохчийн мотт";
		elif [ "${p_code,,}" == 'ch' ]; then BUPLNOptimizer 'Chamorro'              "Chamoru";
		elif [ "${p_code,,}" == 'co' ]; then BUPLNOptimizer 'Corsican'              "Corsu ; lingua corsa";
		elif [ "${p_code,,}" == 'cr' ]; then BUPLNOptimizer 'Cree'                  "ᓀᐦᐃᔭᐍᐏᐣ";
		elif [ "${p_code,,}" == 'cs' ]; then BUPLNOptimizer 'Czech'                 "Česky ; čeština";
		elif [ "${p_code,,}" == 'cu' ]; then BUPLNOptimizer 'Old Church Slavonic'   "Словѣньскъ";
		elif [ "${p_code,,}" == 'cv' ]; then BUPLNOptimizer 'Chuvash'               "чӑваш чӗлхи";
		elif [ "${p_code,,}" == 'cy' ]; then BUPLNOptimizer 'Welsh'                 "Cymraeg";
		  fi

	elif 	[[ "${p_code,,}" == d* ]]; then
		  if [ "${p_code,,}" == 'da' ]; then BUPLNOptimizer 'Danish'            "Dansk";
		elif [ "${p_code,,}" == 'de' ]; then BUPLNOptimizer 'German'            "Deutsch";
		elif [ "${p_code,,}" == 'dv' ]; then BUPLNOptimizer 'Divehi'            "ދިވެހި";
		elif [ "${p_code,,}" == 'dz' ]; then BUPLNOptimizer 'Dzongkha'          "རྫོང་ཁ";
		  fi

	elif 	[[ "${p_code,,}" == e* ]]; then
		  if [ "${p_code,,}" == 'ee' ]; then BUPLNOptimizer 'Ewe'               "Ɛʋɛgbɛ";
		elif [ "${p_code,,}" == 'el' ]; then BUPLNOptimizer 'Greek'             "Ελληνικά";
		elif [ "${p_code,,}" == 'en' ]; then BUPLNOptimizer 'English'           "English";
		elif [ "${p_code,,}" == 'eo' ]; then BUPLNOptimizer 'Esperanto'         "Esperanto";
		elif [ "${p_code,,}" == 'es' ]; then BUPLNOptimizer 'Spanish'           "Español";
		elif [ "${p_code,,}" == 'et' ]; then BUPLNOptimizer 'Estonian'          "Eesti keel";
		elif [ "${p_code,,}" == 'eu' ]; then BUPLNOptimizer 'Basque'            "Euskara";
		  fi

	elif 	[[ "${p_code,,}" == f* ]]; then
		  if [ "${p_code,,}" == 'fa' ]; then BUPLNOptimizer 'Persian'           "فارسی";
		elif [ "${p_code,,}" == 'ff' ]; then BUPLNOptimizer 'Fulah'             "Fulfulde";
		elif [ "${p_code,,}" == 'fi' ]; then BUPLNOptimizer 'Finnish'           "Suomen kieli";
		elif [ "${p_code,,}" == 'fj' ]; then BUPLNOptimizer 'Fijian'            "Vosa Vakaviti";
		elif [ "${p_code,,}" == 'fo' ]; then BUPLNOptimizer 'Faroese'           "Føroyskt";
		elif [ "${p_code,,}" == 'fr' ]; then BUPLNOptimizer 'French'            'Français';
		elif [ "${p_code,,}" == 'fy' ]; then BUPLNOptimizer 'Western Frisian'   "Frysk";
		  fi

	elif 	[[ "${p_code,,}" == g* ]]; then
		  if [ "${p_code,,}" == 'ga' ]; then BUPLNOptimizer 'Irish'             "Gaeilge";
		elif [ "${p_code,,}" == 'gd' ]; then BUPLNOptimizer 'Scottish Gaelic'   "Gàidhlig";
		elif [ "${p_code,,}" == 'gl' ]; then BUPLNOptimizer 'Galician'          "Galego";
		elif [ "${p_code,,}" == 'gn' ]; then BUPLNOptimizer 'Guarani'           "Avañe'ẽ";
		elif [ "${p_code,,}" == 'gu' ]; then BUPLNOptimizer 'Gujarati'          "ગુજરાતી";
		elif [ "${p_code,,}" == 'gv' ]; then BUPLNOptimizer 'Manx'              "Ghaelg";
		  fi

	elif 	[[ "${p_code,,}" == h* ]]; then
		  if [ "${p_code,,}" == 'ha' ]; then BUPLNOptimizer 'Hausa'             "هَوُسَ";
		elif [ "${p_code,,}" == 'he' ]; then BUPLNOptimizer 'Hebrew'            "עברית";
		elif [ "${p_code,,}" == 'hi' ]; then BUPLNOptimizer 'Hindi'             "हिन्दी ; हिंदी";
		elif [ "${p_code,,}" == 'ho' ]; then BUPLNOptimizer 'Hiri Motu'         "Hiri Motu";
		elif [ "${p_code,,}" == 'hr' ]; then BUPLNOptimizer 'Croatian'          "Hrvatski";
		elif [ "${p_code,,}" == 'ht' ]; then BUPLNOptimizer 'Haitian'           "Kreyòl ayisyen";
		elif [ "${p_code,,}" == 'hu' ]; then BUPLNOptimizer 'Hungarian'         "magyar";
		elif [ "${p_code,,}" == 'hy' ]; then BUPLNOptimizer 'Armenian'          "Հայերեն";
		elif [ "${p_code,,}" == 'hz' ]; then BUPLNOptimizer 'Herero'            "Otjiherero";
		  fi

	elif 	[[ "${p_code,,}" == i* ]]; then
		  if [ "${p_code,,}" == 'ia' ]; then BUPLNOptimizer 'Interlingua'       "Interlingua";
		elif [ "${p_code,,}" == 'id' ]; then BUPLNOptimizer 'Indonesian'        "Bahasa Indonesia";
		elif [ "${p_code,,}" == 'ie' ]; then BUPLNOptimizer 'Interlingue'       "Interlingue";
		elif [ "${p_code,,}" == 'ig' ]; then BUPLNOptimizer 'Igbo'              "Igbo";
		elif [ "${p_code,,}" == 'ii' ]; then BUPLNOptimizer 'Sichuan Yi'        "ꆇꉙ";
		elif [ "${p_code,,}" == 'ik' ]; then BUPLNOptimizer 'Inupiaq'           "Iñupiaq ; Iñupiatun";
		elif [ "${p_code,,}" == 'io' ]; then BUPLNOptimizer 'Ido'               "Ido";
		elif [ "${p_code,,}" == 'is' ]; then BUPLNOptimizer 'Icelandic'         "Íslenska";
		elif [ "${p_code,,}" == 'it' ]; then BUPLNOptimizer 'Italian'           "Italiano";
		elif [ "${p_code,,}" == 'iu' ]; then BUPLNOptimizer 'Inuktitut'         "ᐃᓄᒃᑎᑐᑦ";
		  fi

	elif 	[[ "${p_code,,}" == j* ]]; then
		  if [ "${p_code,,}" == 'ja' ]; then BUPLNOptimizer 'Japanese' "日本語 (にほんご)";
		elif [ "${p_code,,}" == 'jv' ]; then BUPLNOptimizer 'Javanese' "Basa Jawa";
		  fi

	elif 	[[ "${p_code,,}" == k* ]]; then
		  if [ "${p_code,,}" == 'ka' ]; then BUPLNOptimizer 'Georgian'      "ქართული";
		elif [ "${p_code,,}" == 'kg' ]; then BUPLNOptimizer 'Kongo'         "KiKongo";
		elif [ "${p_code,,}" == 'ki' ]; then BUPLNOptimizer 'Kikuyu'        "Gĩkũyũ";
		elif [ "${p_code,,}" == 'kj' ]; then BUPLNOptimizer 'Kwanyama'      "Kuanyama";
		elif [ "${p_code,,}" == 'kk' ]; then BUPLNOptimizer 'Kazakh'        "Қазақ тілі";
		elif [ "${p_code,,}" == 'kl' ]; then BUPLNOptimizer 'Greenlandic'   "Kalaallisut ; kalaallit oqaasii";
		elif [ "${p_code,,}" == 'km' ]; then BUPLNOptimizer 'Khmer'         "ភាសាខ្មែរ";
		elif [ "${p_code,,}" == 'kn' ]; then BUPLNOptimizer 'Kannada'       "ಕನ್ನಡ";
		elif [ "${p_code,,}" == 'ko' ]; then BUPLNOptimizer 'Korean'        "한국어 (韓國語) ; 조선말 (朝鮮語)";
		elif [ "${p_code,,}" == 'kr' ]; then BUPLNOptimizer 'Kanuri'        "Kanuri";
		elif [ "${p_code,,}" == 'ks' ]; then BUPLNOptimizer 'Kashmiri'      "कश्मीरी ; كشميري";
		elif [ "${p_code,,}" == 'ku' ]; then BUPLNOptimizer 'Kurdish'       "Kurdî ; كوردی";
		elif [ "${p_code,,}" == 'kv' ]; then BUPLNOptimizer 'Komi'          "коми кыв";
		elif [ "${p_code,,}" == 'kw' ]; then BUPLNOptimizer 'Cornish'       "Kernewek";
		elif [ "${p_code,,}" == 'ky' ]; then BUPLNOptimizer 'Kirghiz'       "кыргыз тили";
		fi

	elif 	[[ "${p_code,,}" == l* ]]; then
		  if [ "${p_code,,}" == 'la' ]; then BUPLNOptimizer 'Latin'         "Latine ; lingua latina";
		elif [ "${p_code,,}" == 'lb' ]; then BUPLNOptimizer 'Luxembourgish' "Lëtzebuergesch";
		elif [ "${p_code,,}" == 'lg' ]; then BUPLNOptimizer 'Ganda'         "Luganda";
		elif [ "${p_code,,}" == 'li' ]; then BUPLNOptimizer 'Limburgish'    "Limburgs";
		elif [ "${p_code,,}" == 'ln' ]; then BUPLNOptimizer 'Lingala'       "Lingála";
		elif [ "${p_code,,}" == 'lo' ]; then BUPLNOptimizer 'Lao'           "ພາສາລາວ";
		elif [ "${p_code,,}" == 'lt' ]; then BUPLNOptimizer 'Lithuanian'    "Lietuvių kalba";
		elif [ "${p_code,,}" == 'lu' ]; then BUPLNOptimizer 'Luba'          "tshiluba";
		elif [ "${p_code,,}" == 'lv' ]; then BUPLNOptimizer 'Latvian'       "Latviešu valoda";
		  fi

	elif 	[[ "${p_code,,}" == m* ]]; then
		  if [ "${p_code,,}" == 'mg' ]; then BUPLNOptimizer 'Malagasy'      "Fiteny malagasy";
		elif [ "${p_code,,}" == 'mh' ]; then BUPLNOptimizer 'Marshallese'   "Kajin M̧ajeļ";
		elif [ "${p_code,,}" == 'mi' ]; then BUPLNOptimizer 'Māori'         "Te reo Māori";
		elif [ "${p_code,,}" == 'mk' ]; then BUPLNOptimizer 'Macedonian'    "македонски јазик";
		elif [ "${p_code,,}" == 'ml' ]; then BUPLNOptimizer 'Malayalam'     "മലയാളം";
		elif [ "${p_code,,}" == 'mn' ]; then BUPLNOptimizer 'Mongolian'     "Монгол";
		elif [ "${p_code,,}" == 'mo' ]; then BUPLNOptimizer 'Moldavian'     "лимба молдовеняскэ";
		elif [ "${p_code,,}" == 'mr' ]; then BUPLNOptimizer 'Marathi'       "मराठी";
		elif [ "${p_code,,}" == 'ms' ]; then BUPLNOptimizer 'Malay'         "Bahasa Melayu ; بهاس ملايو";
		elif [ "${p_code,,}" == 'mt' ]; then BUPLNOptimizer 'Maltese'       "Malti";
		elif [ "${p_code,,}" == 'my' ]; then BUPLNOptimizer 'Burmese'       "ဗမာစာ";
		  fi

	elif	[[ "${p_code,,}" == n* ]]; then
		  if [ "${p_code,,}" == 'na' ]; then BUPLNOptimizer 'Nauru'             "Ekakairũ Naoero";
		elif [ "${p_code,,}" == 'nb' ]; then BUPLNOptimizer 'Norwegian Bokmål'  "Norsk bokmål";
		elif [ "${p_code,,}" == 'nd' ]; then BUPLNOptimizer 'North Ndebele'     "isiNdebele";
		elif [ "${p_code,,}" == 'ne' ]; then BUPLNOptimizer 'Nepali'            "नेपाली";
		elif [ "${p_code,,}" == 'ng' ]; then BUPLNOptimizer 'Ndonga'            "Owambo";
		elif [ "${p_code,,}" == 'nl' ]; then BUPLNOptimizer 'Dutch'             "Nederlands";
		elif [ "${p_code,,}" == 'nn' ]; then BUPLNOptimizer 'Norwegian Nynorsk' "Norsk nynorsk";
		elif [ "${p_code,,}" == 'no' ]; then BUPLNOptimizer 'Norwegian'         "Norsk";
		elif [ "${p_code,,}" == 'nr' ]; then BUPLNOptimizer 'South Ndebele'     "Ndébélé";
		elif [ "${p_code,,}" == 'nv' ]; then BUPLNOptimizer 'Navajo'            "Diné bizaad ; Dinékʼehǰí";
		elif [ "${p_code,,}" == 'ny' ]; then BUPLNOptimizer 'Chichewa'          "ChiCheŵa ; chinyanja";
		  fi

	elif 	[[ "${p_code,,}" == o* ]]; then
		  if [ "${p_code,,}" == 'oc' ]; then BUPLNOptimizer 'Occitan'           "Occitan";
		elif [ "${p_code,,}" == 'oj' ]; then BUPLNOptimizer 'Ojibwa'            "ᐊᓂᔑᓈᐯᒧᐎᓐ";
		elif [ "${p_code,,}" == 'om' ]; then BUPLNOptimizer 'Oromo'             "Afaan Oromoo";
		elif [ "${p_code,,}" == 'or' ]; then BUPLNOptimizer 'Oriya'             "ଓଡ଼ିଆ";
		elif [ "${p_code,,}" == 'os' ]; then BUPLNOptimizer 'Ossetian'          "Ирон ӕвзаг";
		  fi

	elif 	[[ "${p_code,,}" == p* ]] || [[ "${p_code}" == q* ]]; then
		  if [ "${p_code,,}" == 'pa' ]; then BUPLNOptimizer 'Panjabi'           "ਪੰਜਾਬੀ ; پنجابی";
		elif [ "${p_code,,}" == 'pi' ]; then BUPLNOptimizer 'Pāli'              "पािऴ";
		elif [ "${p_code,,}" == 'pl' ]; then BUPLNOptimizer 'Polish'            "Polski";
		elif [ "${p_code,,}" == 'ps' ]; then BUPLNOptimizer 'Pashto'            "پښتو";
		elif [ "${p_code,,}" == 'pt' ]; then BUPLNOptimizer 'Portuguese'        "Português";
		elif [ "${p_code,,}" == 'qu' ]; then BUPLNOptimizer 'Quechua'           "Runa Simi ; Kichwa";
		  fi

	elif 	[[ "${p_code,,}" == r* ]]; then
		  if [ "${p_code,,}" == 'rc' ]; then BUPLNOptimizer 'Reunionese'        "Kréol Rénioné";
		elif [ "${p_code,,}" == 'rm' ]; then BUPLNOptimizer 'Romansh'           "Rumantsch grischun";
		elif [ "${p_code,,}" == 'rn' ]; then BUPLNOptimizer 'Kirundi'           "kiRundi";
		elif [ "${p_code,,}" == 'ro' ]; then BUPLNOptimizer 'Romanian'          "Română";
		elif [ "${p_code,,}" == 'ru' ]; then BUPLNOptimizer 'Russian'           "русский язык";
		elif [ "${p_code,,}" == 'rw' ]; then BUPLNOptimizer 'Kinyarwanda'       "Kinyarwanda";
		  fi

	elif 	[[ "${p_code,,}" == s* ]]; then
		  if [ "${p_code,,}" == 'sa' ]; then BUPLNOptimizer 'Sanskrit'          "संस्कृतम्";
		elif [ "${p_code,,}" == 'sc' ]; then BUPLNOptimizer 'Sardinian'         "sardu";
		elif [ "${p_code,,}" == 'sd' ]; then BUPLNOptimizer 'Sindhi'            "सिन्धी ; سنڌي، سندھی";
		elif [ "${p_code,,}" == 'se' ]; then BUPLNOptimizer 'Northern Sami'     "Davvisámegiella";
		elif [ "${p_code,,}" == 'sg' ]; then BUPLNOptimizer 'Sango'             "Yângâ tî sängö";
		elif [ "${p_code,,}" == 'sh' ]; then BUPLNOptimizer 'Serbo-Croatian'    "srpskohrvatski jezik ; српскохрватски језик";
		elif [ "${p_code,,}" == 'si' ]; then BUPLNOptimizer 'Sinhalese'         "සිංහල";
		elif [ "${p_code,,}" == 'sk' ]; then BUPLNOptimizer 'Slovak'            "Slovenčina";
		elif [ "${p_code,,}" == 'sl' ]; then BUPLNOptimizer 'Slovenian'         "Slovenščina";
		elif [ "${p_code,,}" == 'sm' ]; then BUPLNOptimizer 'Samoan'            "Gagana fa'a Samoa";
		elif [ "${p_code,,}" == 'sn' ]; then BUPLNOptimizer 'Shona'             "chiShona";
		elif [ "${p_code,,}" == 'so' ]; then BUPLNOptimizer 'Somali'            "Soomaaliga ; af Soomaali";
		elif [ "${p_code,,}" == 'sq' ]; then BUPLNOptimizer 'Albanian'          "Shqip ";
		elif [ "${p_code,,}" == 'sr' ]; then BUPLNOptimizer 'Serbian'           "српски језик";
		elif [ "${p_code,,}" == 'ss' ]; then BUPLNOptimizer 'Swati'             "SiSwati";
		elif [ "${p_code,,}" == 'st' ]; then BUPLNOptimizer 'Sotho'             "seSotho";
		elif [ "${p_code,,}" == 'su' ]; then BUPLNOptimizer 'Sundanese'         "Basa Sunda";
		elif [ "${p_code,,}" == 'sv' ]; then BUPLNOptimizer 'Swedish'           "Svenska";
		elif [ "${p_code,,}" == 'sw' ]; then BUPLNOptimizer 'Swahili'           "Kiswahili";
		  fi

	elif 	[[ "${p_code,,}" == t* ]]; then
		  if [ "${p_code,,}" == 'ta' ]; then BUPLNOptimizer 'Tamil'         "தமிழ்";
		elif [ "${p_code,,}" == 'te' ]; then BUPLNOptimizer 'Telugu'        "తెలుగు";
		elif [ "${p_code,,}" == 'tg' ]; then BUPLNOptimizer 'Tajik'         "тоҷикӣ ; toğikī ; تاجیکی";
		elif [ "${p_code,,}" == 'th' ]; then BUPLNOptimizer 'Thai'          "ไทย";
		elif [ "${p_code,,}" == 'ti' ]; then BUPLNOptimizer 'Tigrinya'      "ትግርኛ";
		elif [ "${p_code,,}" == 'tk' ]; then BUPLNOptimizer 'Turkmen'       "Türkmen ; Түркмен";
		elif [ "${p_code,,}" == 'tl' ]; then BUPLNOptimizer 'Tagalog'       "Tagalog";
		elif [ "${p_code,,}" == 'tn' ]; then BUPLNOptimizer 'Tswana'        "seTswana";
		elif [ "${p_code,,}" == 'to' ]; then BUPLNOptimizer 'Tonga'         "faka Tonga";
		elif [ "${p_code,,}" == 'tr' ]; then BUPLNOptimizer 'Turkish'       "Türkçe";
		elif [ "${p_code,,}" == 'ts' ]; then BUPLNOptimizer 'Tsonga'        "xiTsonga";
		elif [ "${p_code,,}" == 'tt' ]; then BUPLNOptimizer 'Tatar'         "татарча ; tatarça ; تاتارچا";
		elif [ "${p_code,,}" == 'tw' ]; then BUPLNOptimizer 'Twi'           "Twi";
		elif [ "${p_code,,}" == 'ty' ]; then BUPLNOptimizer 'Tahitian'      'Reo Mā`ohi';
		  fi

	elif 	[[ "${p_code,,}" == u* ]]; then
		  if [ "${p_code,,}" == 'ug' ]; then BUPLNOptimizer 'Uighur'        "Uyƣurqə ; ئۇيغۇرچ";
		elif [ "${p_code,,}" == 'uk' ]; then BUPLNOptimizer 'Ukrainian'     "українська мова";
		elif [ "${p_code,,}" == 'ur' ]; then BUPLNOptimizer 'Urdu'          "اردو";
		elif [ "${p_code,,}" == 'uz' ]; then BUPLNOptimizer 'Uzbek'         "O'zbek ; Ўзбек; أۇزبېك";
		  fi

	elif 	[[ "${p_code,,}" == v* ]]; then
		  if [ "${p_code,,}" == 've' ]; then BUPLNOptimizer 'Venda'         "tshiVenḓa";
		elif [ "${p_code,,}" == 'vi' ]; then BUPLNOptimizer 'Vietnamese'    "Tiếng Việt";
		elif [ "${p_code,,}" == 'vo' ]; then BUPLNOptimizer 'Volapük'       "Volapük";
		  fi

	elif 	[[ "${p_code,,}" == w* ]]; then
		  if [ "${p_code,,}" == 'wa' ]; then BUPLNOptimizer 'Walloon'       "Walon";
		elif [ "${p_code,,}" == 'wo' ]; then BUPLNOptimizer 'Wolof'         "Wollof";
		  fi

	elif 	[[ "${p_code,,}" == x* ]] || [[ "${p_code}" == y* ]]; then
		  if [ "${p_code,,}" == 'xh' ]; then BUPLNOptimizer 'Xhosa'         "isiXhosa";
		elif [ "${p_code,,}" == 'yi' ]; then BUPLNOptimizer 'Yiddish'       "ייִדיש";
		elif [ "${p_code,,}" == 'yo' ]; then BUPLNOptimizer 'Yoruba'        "Yorùbá";
		  fi

	elif 	[[ "${p_code,,}" == z* ]]; then
		  if [ "${p_code,,}" == 'za' ]; then BUPLNOptimizer 'Zhuang'        "Saɯ cueŋƅ ; Saw cuengh";
		elif [ "${p_code,,}" == 'zh' ]; then BUPLNOptimizer 'Chinese'       "中文, 汉语, 漢語";
		elif [ "${p_code,,}" == 'zu' ]; then BUPLNOptimizer 'Zulu'          "isiZulu";
		  fi
	fi;

	return 0;
})

## ----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #
