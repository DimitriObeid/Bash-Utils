#!/usr/bin/env bash

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo "WARNING !"; echo
    echo "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !"
    echo "Use this script only by sourcing it in your project script."; echo

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### ARGUMENT VALUES CHECKING : UTILITES FUNCTIONS

## ARGUMENT PRESENCE CHECKING

# Checking if an argument is provided (like in the "Is..." functions (check the below "VARIABLES VALUES CHECKING" section for more informations)).
function CheckArgsMain_IsArgcNot0()
{
    if [ "$#" -eq 0 ]; then
        HandleErrors "1" "" "" "" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    fi
}

# -----------------------------------------------

## PATH CHECKING FUNCTIONS

# Check if the script is about to work at the root directory ('/').
function TriggerRootDirWarning()
{
	#***** Parameters *****
	p_path=$1

	#***** Variables *****
#	v_root_directories=$( \/snap
		'/' '/bin' '/boot' \
		'/dev' '/etc' '/home' \
		'/lib' '/lib32' '/lib64' \
		'/libx32' '/lost+found' \
		'/media' '/mnt' '/opt' \
		'/proc' '/root' '/run' '/sbin' \
		'/snap' '/srv' '/sys' \
		'/tmp' '/usr' '/var' \)

	#***** Code *****
	# Checking if the given path points towards the root directory or one of its subfolders
	# TODO : detecting if path points to a root sub-folder (like [ if "$p_path" = "/" ] || [ "$p_path" | cut blablabla ]).
	if [ "$p_path" = "/" ] || [ "$(GetParentDirectoryPath "$p_path")" = '/' ]; then
		if [ "$__STAT_OPERATE_ROOT" = "forbidden" ]; then
			EchoError "WARNING !!!!!! READ THIS MESSAGE CAREFULLY !!!!!!"
			EchoError "The script was trying to operate at the root directory (or one of its sub directories) without authorization"
			EchoError "Given path : $(DechoHighlight "$p_path")"
			Newline

			ExitError
		elif [ "$__STAT_OPERATE_ROOT" = "restricted" ]; then
			EchoWarning "WARNING !!!!!!! DO NOT SKIP THIS MESSAGE BEFORE READING IT !!!!!!"
			EchoWarning "You are about to operate at the root directory or one of its present sub-folders !"
			EchoWarning "Given path : $(DechoHighlight "$p_path")"
			Newline
				
			EchoWarning "Do you want to continue the script's execution ? (yes / no)"
			read -rp "Enter your answer : " __read_TriggerRootDirWarning
			EchoRead "$__read_TriggerRootDirWarning"
			Newline

			# Calling the function that processes the given answer.
			CaseRead_TriggerRootDirWarning
		fi
	fi
}

# -----------------------------------------------

## TEXT FORMATING FUNCTIONS

# Cut the text of the function's name before and with the underscore.
function CutCheck()
{
	#shellcheck disable=SC2001
	sed 's/^[^_]*_//' <<< "$1"
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### "main/Directories.lib" FILE'S FUNCTION

## "main/Directories.lib" FILE'S FUNCTIONS - DIRECTORIES PROCESSING CATEGORY

# "ProcessingDir" function.
function CheckArgsMain_ProcessingDir()
{
    #***** Parameters *****
    local p_function=$1
    local p_parent=$2
    local p_name=$3

    #***** Code *****
    if [ -z "$p_function" ]; then
        HandleErrors "1" "NO FUNCTION NAME PASSED AS ARGUMENT" \
            "THE FUNCTION $(DechoHighlight "$(CutCheck "${FUNCNAME[0]}")") NEEDS A FUNCTION PASSED AS FIRST ARGUMENT TO WORK PROPERLY" \
            "$p_function" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"

    elif [ -z "$p_parent" ] || [ -z "$p_name" ]; then
        HandleErrors "1" "AT LEAST ONE OF THE TWO $(DechoHighlight "$(CutCheck "${FUNCNAME[0]}")")'S LAST ARGUMENTS IS MISSING" \
            "The function $(DechoHighlight "$(CutCheck "${FUNCNAME[0]}")") needs a function passed as first argument to work properly" \
            "$p_function" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    fi
}

# "OverwriteDir" function.
function CheckArgsMain_OverwriteDir()
{
    #***** Parameters ****
    local p_path=$1         # Path of the directory to overwrite.

    #***** Code *****
    # If the target folder path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_path')") PARAMETER HAS NO VALUE" \
            "Please pass the path of the directory to overwrite as argument" "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"

    # Else, if the given folder path is incorrect.
    local lineno="$LINENO"; elif [ ! -d "$p_path" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_path')") PARAMETER'S VALUE IS INCORRECT" \
            "Please pass the correct path of the directory to overwrite as argument" "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"
    fi
}

# "Makedir" function.
function CheckArgsMain_Makedir()
{
    #***** Parameters *****
    local p_parent=$1       # Parent folder's path.
    local p_name=$2         # Name of the folder to create.

    #***** Code *****
    # If the parent folder's path is missing (no path is given).
    local lineno="$LINENO"; if [ -z  "$p_parent" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_parent')") PARAMETER HAS NO VALUE" "" "$p_parent" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"

    # Else, if the parent folder's path is incorrect.
    local lineno="$LINENO"; elif [ ! -d "$p_parent" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_parent')") PARAMETER'S VALUE IS INCORRECT" "" "$p_parent" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"

    # Else, if the folder's name is missing (no name is given).
    local lineno="$LINENO"; elif [ -z "$p_name" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_name')") PARAMETER HAS NO VALUE" "" "$p_name" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"
    fi
}

# -----------------------------------------------

## "main/Directories.lib" FILE'S FUNCTIONS - PATH PROCESSING CATEGORY

# "GetDirectoryName" function.
function CheckArgsMain_GetDirectoryName()
{
    #***** Parameters *****
    local p_path=$1         # Path of the directory to process.

    #***** Code *****
    if [ -z "$p_path" ]; then

        # shellcheck disable=SC2016
        HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_path')") PARAMETER HAS NO VALUE" "The $(DechoHighlight "${FUNCNAME[0]}") function takes a path as argument" "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    fi
}

# "GetDirectoryPath" function.
function CheckArgsMain_GetDirectoryPath()
{
    #***** Parameters *****
    local p_path=$1         # Path of the directory to process.

    #***** Code *****
    if [ -z "$p_path" ]; then

        # shellcheck disable=SC2016
        HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_path')") PARAMETER HAS NO VALUE" "The $(ToLowercase "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight) function takes a path as argument" \
            "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    fi
}

# "GetParentDirectoryName" function.
function CheckArgsMain_GetParentDirectoryName()
{
    #***** Parameters *****
    local p_path=$1         # Path of the directory to process.

    #***** Code *****
    # If the target folder path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_path')") PARAMETER HAS NO VALUE" \
            "Please pass the path of the directory to overwrite as argument" "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"
    fi
}

# "GetParentDirectoryPath" function.
function CheckArgsMain_GetParentDirectoryPath()
{
    #***** Parameters *****
    local p_path=$1         # Path of the directory to process.

    #***** Code *****
    # If the target folder path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_path')") PARAMETER HAS NO VALUE" "Please pass the path of the directory to overwrite as argument" \
            "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"
    fi
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### "main/Files.lib" FILE'S FUNCTIONS

## TEXT FILE PROCESSING CATEGORY

# "ProcessingFile" function.
function CheckArgsMain_ProcessingFile()
{
    #***** Parameters *****
    local p_function=$1     # 

    #***** Code *****
    local lineno="$LINENO"; if [ -z "$p_function" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_function')") PARAMETER'S VALUE IS INCORRECT" \
            "Please pass a valid file processing function as first argument" "$p_function" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"
    fi
}

# "OverwriteFile" function.
function CheckArgsMain_OverwriteFile()
{
    #***** Parameters ****
    local p_path=$1         	# Path of the file to overwrite.
	local p_authorization=$2	# Authorization to overwrite the file.

    #***** Code *****
    # If the target file's path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_path')") PARAMETER HAS NO VALUE" \
            "Please pass the path of the directory to overwrite as argument" "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"

    # Else, if the given file path is incorrect.
    local lineno="$LINENO"; elif [ ! -d "$p_path" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_path')") PARAMETER'S VALUE IS INCORRECT" \
            "Please pass the correct path of the directory to overwrite as argument" "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"
			
	local lineno="$LINENO"; elif [ -z "$p_authorization" ]; then

		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_authorization')") PARAMETER HAS NO VALUE" \
            "Please enter a valid value for the overwrite authorization" "$p_authorization" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno" 
    fi
}

# "Makefile" function's arguments.
function CheckArgsMain_Makefile()
{
    #***** Parameters *****
    local p_parent=$1       # File to create's Parent folder path. 
    local p_name=$2         # Name of the file to create.

    #***** Code *****
    # If the parent folder's path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_parent" ]; then
        
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_parent')") PARAMETER HAS NO VALUE" \
            "Please pass the path of the new directory's parent folder as first argument" "$p_parent" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"

    # Else, if the parent folder's path is incorrect.
    local lineno="$LINENO"; elif [ ! -d "$p_parent" ]; then
    
		# shellcheck disable=SC2016
		HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_parent')") PARAMETER'S VALUE IS INCORRECT" \
            "Please pass a valid parent directory path as first argument" "$p_parent" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"

    # Else, if the file's name is missing (no name is given).
    local lineno="$LINENO"; elif [ -z "$p_name" ]; then

		# shellcheck disable=SC2016
        HandleErrors "1" "THE $(KeepFormating "$(CutCheck "${FUNCNAME[0]}")'s") $(DechoHighlight "$(ToLowercase '$p_name')") PARAMETER HAS NO VALUE" \
            "Please pass the name of the folder to create as second argument" "$p_name" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"
    fi
}

# -----------------------------------------------
