#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : CheckArgsMain.lib
# Module        : Main
# Description   : 
# Author(s)     : Dimitri Obeid
# Version       : 

# ----------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.
# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# shellcheck disable=SC2154,SC2116

# ----------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### ARGUMENT VALUES CHECKING : UTILITES FUNCTIONS

## ARGUMENT PRESENCE CHECKING

# Checking if an argument is provided (like in the "Is..." functions (check the below "VARIABLES VALUES CHECKING" section for more informations)).
function CheckArgsMain_IsBadArgc0()
{
    if [ "$#" -eq 0 ]; then
        HandleErrors "1" "" "" "" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"; return 1
    fi

	return 0
}

# -----------------------------------------------

## PATH CHECKING FUNCTIONS

# Check if the script is about to work at the root directory ('/').
function TriggerRootDirWarning()
{
	#***** Parameters *****
	p_path=$1

	#***** Code *****
	# Checking if the given path points towards the root directory or one of its subfolders
	# TODO : detecting if path points to a root sub-folder (like [ if "$p_path" = "/" ] || [ "$p_path" | cut blablabla ]).
	if [ "$p_path" = "/" ] || [ "$(GetParentDirectoryPath "$p_path")" = '/' ]; then
		if [ "$__BU_MAIN_STAT_OPERATE_ROOT" = "forbidden" ]; then
			EchoError "WARNING !!!!!! READ THIS MESSAGE CAREFULLY !!!!!!"
			EchoError "The script was trying to operate at the root directory (or one of its sub directories) without authorization"
			EchoError "Given path : $(DechoHighlight "$p_path")"
			Newline

			ExitError
		elif [ "$__BU_MAIN_STAT_OPERATE_ROOT" = "restricted" ]; then
			EchoWarning "WARNING !!!!!!! DO NOT SKIP THIS MESSAGE BEFORE READING IT CAREFULLY !!!!!!"
			EchoWarning "You are about to operate at the root directory or one of its present sub-folders !"
			EchoWarning "Given path : $(DechoHighlight "$p_path")"
			Newline

			# Calling the function that processes the given answer.
			if CaseRead_TriggerRootDirWarning; then
				return 0
			else
				return 1
			fi
		fi
	fi

	return 0
}

# -----------------------------------------------

## QUICK MESSAGE PRINTING

# Print a message without the need to write the whole "HandleErrors()" function's second argument, and according to the test option which failed :
function __CheckArgsMain_PrintBadOption()
{
    #***** Parameters *****
    local p_option=$1   # Test option.
    local p_advice=$2   # "HandleErrors()"'s advice argument.
    local p_argname=$3  # Name of the parameter that stores the argument.
    local p_value=$4    # "HandleErrors()"'s value argument.
    local p_funcname=$5 # Name of the function where the test failed.
    local p_lineno=$6   # Line where the test failed.

    #***** Variables *****
	# Changing the "$__BU_MAIN_STAT_ECHO" status variable's value to "true" in case this function is called during a .
	if [ "$__BU_MAIN_STAT_ECHO" = "false" ]; then
		local v_STAT_ECHO_was_false="true"
		
		ChangeSTAT_ECHO "true" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
	fi

    #***** Code *****
	# If no value is passed as argument.
    if [ "$p_option" = 'z' ]; then
		HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER HAS NO VALUE" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

	# Else, if the value passed as argument is not an alphabetic string.
    elif [ "$p_option" = '!alpha' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT AN ALPHABETIC STRING" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

        return 1

	# Else, if the value passed as argument is not an alphanumeric string.
    elif [ "$p_option" = '!alphanum' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT AN ALPHANUMERIC STRING" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

    # Else, if the value passed as argument is not an alphabetic character.
    elif [ "$p_option" = '!char' ]; then
        HandleErrors '1' "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT AN ALPHABETIC CHARACTER" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

        return 1

    # Else, if the value passed as argument is not an alphanumeric character.
    elif [ "$p_option" = '!charnum' ]; then
        HandleErrors '1' "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT AN ALPHANUMERIC CHARACTER" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

        return 1

	# Else, if the value passed as argument is not a valid directory path.
    elif [ "$p_option" = '!d' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT A VALID DIRECTORY PATH" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

	# Else, if the value passed as argument is not a valid file path.
    elif [ "$p_option" = '!f' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT A VALID FILE PATH" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

	# Else, if the value passed as argument is not a floating number.
    elif [ "$p_option" = '!float' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT A FLOAT" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

    # Else, if the value passed as argument is not a negative floating number.
    elif [ "$p_option" = '!floatneg' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT A NEGATIVE FLOAT" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

	# Else, if the value passed as argument is not a positive floating number.
    elif [ "$p_option" = '!floatpos' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT A POSITIVE FLOAT" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

	# Else, if the value passed as argument is not an integer.
    elif [ "$p_option" = '!int' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT AN INTEGER" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

	# Else, if the value passed as argument is not a negative integer.
    elif [ "$p_option" = '!intneg' ]; then

        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT A NEGATIVE INTEGER" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"
		return 1

	# Else, if the value passed as argument is not a positive integer.
    elif [ "$p_option" = '!intpos' ]; then
        HandleErrors "1" "THE $p_funcname FUNCTION'S $(DechoHighlight "$(ToLowercase "$(echo -n '$')$p_argname")") PARAMETER'S VALUE IS NOT A POSITIVE INTEGER" \
            "$p_advice" "$p_value" "$(basename "${BASH_SOURCE[0]}")" ""$p_funcname"" "$p_lineno"

		return 1

    fi

	if [ "$v_STAT_ECHO_was_false" = "true" ]; then
		ChangeSTAT_ECHO "false" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
	fi

	return 0
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### "Checkings.lib" FILE'S FUNCTIONS

## "Checkings.lib" FILE'S FUNCTIONS - FILES PATHS CHECKING CATEGORY

# "CheckProjectRelatedFile" function.
function CheckArgsMain_CheckProjectRelatedFile()
{
	#***** Parameters *****
	local p_parent=$1
	local p_child=$2
	local p_type=$3

	#***** Code *****
	local lineno="$LINENO"; if [ -z "$p_parent" ]; then
		__CheckArgsMain_PrintBadOption 'z' "The function $(CutFromCharacter "$(DechoHighlight "${FUNCNAME[0]}")") needs a function passed as first argument to work properly" \
			'p_parent' "$p_parent" "${FUNCNAME[0]}" "$lineno"

		return 1
	
	local lineno="$LINENO"; elif [ -z "$p_child" ]; then
		__CheckArgsMain_PrintBadOption 'z' "The function $(CutFromCharacter "$(DechoHighlight "${FUNCNAME[0]}")") needs a function passed as second argument to work properly" \
			'p_child' "$p_child" "${FUNCNAME[0]}" "$lineno"

		return 1

	local lineno="$LINENO"; elif [ -z "$p_type" ]; then
		__CheckArgsMain_PrintBadOption 'z' "The function $(CutFromCharacter "$(DechoHighlight "${FUNCNAME[0]}")") needs a function passed as third argument to work properly" \
			'p_type' "$p_type" "${FUNCNAME[0]}" "$lineno"

		return 1

	local lineno="$LINENO"; elif [ "$p_type" != 'd' ] && [ "$p_type" != 'f' ]; then
		__CheckArgsMain_PrintBadOption 'z' "You need to precise if what you want to create is a directory or a file." 'p_type' "$p_type" "${FUNCNAME[0]}" "$lineno"

		return 1
	fi

	return 0
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### "Directories.lib" FILE'S FUNCTION

## "Directories.lib" FILE'S FUNCTIONS - DIRECTORIES PROCESSING CATEGORY

# "ProcessingDir" function.
function CheckArgsMain_ProcessingDir()
{
    #***** Parameters *****
    local p_function=$1
    local p_parent=$2
    local p_name=$3

    #***** Code *****
    local lineno="$LINENO"; if [ -z "$p_function" ]; then
        __CheckArgsMain_PrintBadOption 'z' "The function $(CutFromCharacter "$(DechoHighlight "${FUNCNAME[0]}")") needs a function passed as first argument to work properly" \
            'p_function' "$p_function" "${FUNCNAME[0]}" "$lineno"

		return 1

    local lineno="$LINENO"; elif [ -z "$p_parent" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass a valid parent directory path as second argument" 'p_parent' "$p_parent" "${FUNCNAME[0]}" "$lineno"

		return 1

    local lineno="$LINENO"; elif [ -z "$p_name" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the name of the folder to process as third argument" 'p_name' "$p_name" "${FUNCNAME[0]}" "$lineno"

		return 1
	fi

	return 0
}

# "OverwriteDir" function.
function CheckArgsMain_OverwriteDir()
{
    #***** Parameters ****
    local p_path=$1         # Path of the directory to overwrite.

    #***** Code *****
    # If the target folder path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the path of the directory to overwrite as argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"

		return 1

    # Else, if the given folder path is incorrect.
    local lineno="$LINENO"; elif [ ! -d "$p_path" ]; then
        __CheckArgsMain_PrintBadOption '!d' "Please pass the correct path of the directory to overwrite as argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"

		return 1
    fi

	return 0
}

# "Makedir" function.
function CheckArgsMain_Makedir()
{
    #***** Parameters *****
    local p_parent=$1       # Parent folder's path.
    local p_name=$2         # Name of the folder to create.

    #***** Code *****
    # If the parent folder's path is missing (no path is given).
    local lineno="$LINENO"; if [ -z  "$p_parent" ]; then
        __CheckArgsMain_PrintBadOption 'z' "" 'p_parent' "$p_parent" "${FUNCNAME[0]}" "$lineno"

		return 1

    # Else, if the parent folder's path is incorrect.
    local lineno="$LINENO"; elif [ ! -d "$p_parent" ]; then
        __CheckArgsMain_PrintBadOption '!d' "" 'p_parent' "$p_parent" "${FUNCNAME[0]}" "$lineno"

		return 1

    # Else, if the folder's name is missing (no name is given).
    local lineno="$LINENO"; elif [ -z "$p_name" ]; then
		__CheckArgsMain_PrintBadOption 'z' "" 'p_name' "$p_name" "${FUNCNAME[0]}" "$lineno"

		return 1
    fi

	return 0
}

# -----------------------------------------------

## "Directories.lib" FILE'S FUNCTIONS - PATH PROCESSING CATEGORY

# "GetDirectoryName" function.
function CheckArgsMain_GetDirectoryName()
{
    #***** Parameters *****
    local p_path=$1         # Path of the directory to process.

    #***** Code *****
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        __CheckArgsMain_PrintBadOption 'z' "The $(CutFromCharacter "$(DechoHighlight "${FUNCNAME[0]}")") function takes a path as argument" 'p_path' "${FUNCNAME[0]}" "$lineno"

		return 1
    fi

	return 0
}

# "GetDirectoryPath" function.
function CheckArgsMain_GetDirectoryPath()
{
    #***** Parameters *****
    local p_path=$1         # Path of the directory to process.

    #***** Code *****
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        __CheckArgsMain_PrintBadOption 'z' "The $(CutFromCharacter "$(DechoHighlight "${FUNCNAME[0]}")") function takes a path as argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"

		return 1
    fi

	return 0
}

# "GetParentDirectoryName" function.
function CheckArgsMain_GetParentDirectoryName()
{
    #***** Parameters *****
    local p_path=$1         # Path of the directory to process.

    #***** Code *****
    # If the target folder path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_path" ]; then __CheckArgsMain_PrintBadOption 'z' "Please pass the path of the directory to overwrite as argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"; return 1; fi

	return 0
}

# "GetParentDirectoryPath" function.
function CheckArgsMain_GetParentDirectoryPath()
{
    #***** Parameters *****
    local p_path=$1         # Path of the directory to process.

    #***** Code *****
    # If the target folder path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_path" ]; then __CheckArgsMain_PrintBadOption 'z' "Please pass the path of the directory to overwrite as argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"; return 1; fi

	return 0
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### "Lang.lib" FILE'S FUNCTIONS

## PARSING FUNCTIONS CATEGORY

# Parsing a CSV file containing translations.
function CheckArgsMain_ParseCSVLang()
{
    #***** Parameters *****
    local p_path=$1               # Path of the translations CSV file to parse.
    local p_lang=$2               # Language to fetch.
    local p_success_msg=$3        # Success message to display in the targeted language.
    local p_error_msg=$4          # Error message to display in the targeted language.

    #***** Code *****
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the path of the directory to overwrite as first argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"

		return 1

    local lineno="$LINENO"; elif [ ! -f "$p_path" ]; then
        __CheckArgsMain_PrintBadOption '!f' "Please pass the valid path of the directory to overwrite as first argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"

		return 1

    local lineno="$LINENO"; elif [ -z "$p_lang" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the <...> of the language to fetch as argument" 'p_lang' "$p_lang" "${FUNCNAME[0]}" "$lineno"

		return 1

    ## TODO : Add a fail-safe if the targeted language is not found.

    local lineno="$LINENO"; elif [ -z "$p_success_msg" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the success message of your language as third argument" 'p_success_msg' "$p_success_msg" "${FUNCNAME[0]}" "$lineno"

		return 1

    local lineno="$LINENO"; elif [ -z "$p_error_msg" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the error message of your language as forth argument" 'p_error_msg' "$p_error_msg" "${FUNCNAME[0]}" "$lineno"

		return 1
    fi

	return 0
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### "Files.lib" FILE'S FUNCTIONS

## TEXT FILE PROCESSING CATEGORY

# "ProcessingFile" function.
function CheckArgsMain_ProcessingFile()
{
    #***** Parameters *****
    local p_function=$1     # 

    #***** Code *****
    local lineno="$LINENO"; if [ -z "$p_function" ]; then
		__CheckArgsMain_PrintBadOption 'z' "Please pass a valid file processing function as first argument" 'p_function' "$p_function" "${FUNCNAME[0]}" "$lineno"

		return 1
    fi

	return 0
}

# "OverwriteFile" function.
function CheckArgsMain_OverwriteFile()
{
    #***** Parameters ****
    local p_path=$1         	# Path of the file to overwrite.
	local p_authorization=$2	# Authorization to overwrite the file.

    #***** Code *****
    # If the target file's path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_path" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the path of the directory to overwrite as first argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"

		return 1

    # Else, if the given file path is incorrect.
    local lineno="$LINENO"; elif [ ! -d "$p_path" ]; then
        __CheckArgsMain_PrintBadOption '!d' "Please pass the correct path of the directory to overwrite as first argument" 'p_path' "$p_path" "${FUNCNAME[0]}" "$lineno"

		return 1
			
	local lineno="$LINENO"; elif [ -z "$p_authorization" ]; then
		__CheckArgsMain_PrintBadOption 'z' "Please enter a valid value for the overwrite authorization as second argument" 'p_authorization' "$p_authorization" "${FUNCNAME[0]}" "$lineno" 

		return 1
    fi

	return 0
}

# "Makefile" function's arguments.
function CheckArgsMain_Makefile()
{
    #***** Parameters *****
    local p_parent=$1       # File to create's Parent folder path. 
    local p_name=$2         # Name of the file to create.

    #***** Code *****
    # If the parent folder's path is missing (no path is given).
    local lineno="$LINENO"; if [ -z "$p_parent" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the path of the new directory's parent folder as first argument" 'p_parent' "$p_parent" "${FUNCNAME[0]}" "$lineno"

		return 1

    # Else, if the parent folder's path is incorrect.
    local lineno="$LINENO"; elif [ ! -d "$p_parent" ]; then
        __CheckArgsMain_PrintBadOption '!d' "Please pass a valid parent directory path as first argument" 'p_parent' "$p_parent" "${FUNCNAME[0]}" "$lineno"

		return 1

    # Else, if the file's name is missing (no name is given).
    local lineno="$LINENO"; elif [ -z "$p_name" ]; then
        __CheckArgsMain_PrintBadOption 'z' "Please pass the name of the folder to create as second argument" 'p_name' "$p_name" "${FUNCNAME[0]}" "$lineno"

		return 1
    fi

	return 0
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #
