#!/usr/bin/env bash

# ---------------------
# SCRIPT'S INFORMATIONS

# Name          : OS.lib
# Module        : Main
# Description   : Operating systems types and versions management.
# Author(s)     : Dimitri Obeid
# Version       : beta

# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" = en_* ]]; then
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2; echo >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

fi; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### ANDROID
#### DEBUG ID : "os::android"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__ANDROID="os::android";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__ANDROID__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__ANDROID.checking-informations";

# Checking if current OS is Android, running with the Termux terminal emulator.
function BU.Main.OS.IsAndroidTermux()               { if [[ "$OSTYPE" == 'linux-android' ]];                            then    return 0; else  return 1; fi }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__ANDROID__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__ANDROID.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BSD (GENERAL)
#### DEBUG ID : "os::bsd"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__BSD="os::bsd";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__BSD__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__BSD.checking-informations";

# Checking if the current OS is BSD (general types).
function BU.Main.OS.IsBSD()                         { if BU.Main.OS.IsFreeBSD || BU.Main.OS.IsNetBSD || BU.Main.OS.IsOpenBSD; then return 0; else return 1; fi }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__BSD__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__BSD.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BSD (FREE BSD)
#### DEBUG ID : "os::free-bsd"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__FREE_BSD="os::free-bsd";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__FREE_BSD__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__FREE_BSD.checking-informations";

# Checking if current OS is FreeBSD.
function BU.Main.OS.IsFreeBSD()                   	{ if [[ "$OSTYPE" == 'FreeBSD' ]];                                  then    return 0; else  return 1; fi }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__FREE_BSD__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__FREE_BSD.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BSD (NET BSD)
#### DEBUG ID : "os::free-bsd"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__NET_BSD="os::net-bsd";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__NET_BSD__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__NET_BSD.checking-informations";

# Checking if current OS is NetBSD.
function BU.Main.OS.IsNetBSD()                    	{ if [[ "$OSTYPE" == '' ]];                                         then    return 0; else  return 1; fi }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__NET_BSD__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__NET_BSD.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BSD (OPEN BSD)
#### DEBUG ID : "os::open-bsd"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OPEN_BSD="os::open-bsd";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-information

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OPEN_BSD__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OPEN_BSD.checking-informations";

# Checking if current OS is OpenBSD.
function BU.Main.OS.IsOpenBSD()                   	{ if [[ "$OSTYPE" == 'openbsd'* ]];                                 then    return 0; else  return 1; fi }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OPEN_BSD__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OPEN_BSD.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CHROME OS
#### DEBUG ID : "os::chrome"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__CHROME_OS="os::chrome";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__CHROME_OS__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__CHROME_OS.checking-informations";

# Checking if current OS is Chrome OS.
function BU.Main.OS.IsChromeOS()					{ true; }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__CHROME_OS__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__CHROME_OS.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HAIKU
#### DEBUG ID : "os::haiku"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__HAIKU="os::haiku";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__HAIKU__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__HAIKU.checking-informations";

# Checking if current OS is Haiku OS.
function BU.Main.OS.IsHaiku()                     	{ if [[ "$OSTYPE" == 'haiku' ]];                                    then    return 0; else  return 1; fi }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__HAIKU__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__HAIKU.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### GENERAL OS FUNCTIONS
#### DEBUG ID : "os::general-os-functions"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT="os::general-os-functions";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__GENERAL_OS_FNCT__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT.checking-informations";

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__GENERAL_OS_FNCT__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT.gathering-informations";

# Checking the current operating system, by using the functions declared above.
function BU.Main.OS.GetCurrentOS()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the Fedoramain script with the command "bash -x".
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT" "$__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__GENERAL_OS_FNCT__GATHERING_INFORMATIONS";

    #**** Code ****
    BU.Main.OS.IsAndroidTermux        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
	BU.Main.OS.IsChromeOS				&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsFreeBSD              	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsHaiku                	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsOpenBSD             	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsLinux                	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsLinuxWSLWin10        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsLinuxWSLWin11        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsLinuxWSL             	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsNetBSD               	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsWindows10            	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsWindows11            	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
    BU.Main.OS.IsOSX                    && BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;

    # Return an error code if the OS is not supported.
    BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

    return 1;
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### LINUX
#### DEBUG ID : os::linux

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX="os::linux";

## SPECIFIC OS VERSIONS CHECKINGS FUNCTIONS
## DEBUG ID : specific-os-versions-checkings

## CHECKING INFORMATIONS
## DEBUG ID :

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__LINUX__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX.checking-informations";

# Checking the name of the currently used Linux distribution.
function BU.Main.OS.CheckLinuxDistro()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the main script with the command "bash -x".
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX" "$__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__LINUX__CHECKING_INFORMATIONS";

    #**** Parameters ****
    local v_distro=$1;  # String    - Default : NULL    - Name of the Linux distribution.

    #**** Code ****

    BU.Main.OS.IsLinux && {
        if [ -n "$v_distro" ]; then                      	if BU.Main.OS.GetLinuxDistro "$v_distro"; then return 0; else BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 1; fi

        else
            BU.Main.OS.IsLinuxDistroArchLinux             	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
            BU.Main.OS.IsLinuxDistroDebian                	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
            BU.Main.OS.IsLinuxDistroFedora                	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
            BU.Main.OS.IsLinuxDistroLinuxMint             	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
            BU.Main.OS.IsLinuxDistroManjaro               	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
            BU.Main.OS.IsLinuxDistroUbuntu                	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;

            # Returning an error code if the distribution is not found.
            BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

            return 1;
        fi
    }
}

# Checking the version of the currently used Linux distribution.
function BU.Main.OS.CheckLinuxDistroVersion()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the main script with the command "bash -x".
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX" "$__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__LINUX__CHECKING_INFORMATIONS";

    #**** Parameters ****
	local p_distro=$1;	# String    - Default : NULL    - Name of the Linux distribution.
    local p_version=$2;	# String    - Default : NULL    - Linux distribution's version (can be an integer or a string (like 'Focal Fossa' for Ubuntu 20.04)).

    #**** Code ****
    BU.Main.OS.IsLinux && {
        if [ -n "$p_distro" ] && [ -n "$p_version" ]; then
            if BU.Main.OS.GetLinuxDistro "$p_distro"      	&& BU.Main.OS.GetLinuxDistroVersion "$p_version"; then return 0; else BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 1; fi

        else
            BU.Main.OS.IsLinuxDistroFedora && {
                BU.Main.OS.IsLinuxDistroFedora28          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroFedora29          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroFedora30          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroFedora31          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroFedora32          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroFedora33          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroFedora34          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroFedora35          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroFedora36          	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;

                # Returning an error code if the specific version is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            }

            BU.Main.OS.IsLinuxDistroUbuntu && {
                BU.Main.OS.IsLinuxDistroUbuntu1804        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroUbuntu1810        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroUbuntu1904        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroUbuntu1910        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroUbuntu2004        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroUbuntu2010        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroUbuntu2104        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroUbuntu2110        	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
                BU.Main.OS.IsLinuxDistroUbuntu2204       	&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;

                # Returning an error code if the specific version is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            }

            # Returning an error code if the distribution is not found.
            BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

            return 1;
        fi
    }
}

# Checking the major version of the Kernel of the currently used Linux distribution
function BU.Main.OS.CheckLinuxKernelMajorVersion() { return 0; }

# Checking the minor version of the Kernel of the currently used Linux distribution
function BU.Main.OS.CheckLinuxKernelMinorVersion() { return 0; }

# Checking the version of the Kernel of the currently used Linux distribution.
function BU.Main.OS.CheckLinuxKernelVersion() { return 0; }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__LINUX__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX.gathering-informations";

# Getting the name of the currently used Linux distribution, by reading the content of the "/proc/version" file on Linux.
function BU.Main.OS.GetLinuxDistro()
{
    #**** Parameters ****
    local v_distro=${1:-NULL};  # String    # Default : NULL    - Linux distribution's version (can be an integer or a string (like 'Focal Fossa' for Ubuntu 20.04)).

    #**** Code ****
    if BU.Main.OS.IsLinux; then [ -r /proc/version ] && {
            local X;

            X="$(cat '/proc/version')";

            echo "$X" | grep -qi "$v_distro" || return 1;

            return 0;
        };

        BU.Main.Status.ChangeSTAT_ECHO "true" 'main' "$(basename "${BASH_SOURCE[0]}")" "$LINENO";

        BU.Main.Echo.Warning "$(BU.Main.Decho.Decho.Warning "${FUNCNAME[0]}") : Unable to find or to read the $(BU.Main.Decho.Decho.Path '/proc/version') file";
        BU.Main.Echo.Newline;

        BU.Main.Status.ChangeSTAT_ECHO "false" 'main' "$(basename "${BASH_SOURCE[0]}")" "$LINENO";

        return 1;
    else
        return 1;
    fi
}

# Getting the name of the currently used Linux distribution, by reading the content of the "/proc/version" file on Linux.
function BU.Main.OS.GetLinuxDistroVersion()
{
    BU.Main.OS.GetLinuxDistro "$1" || return 1; return 0;
}

# Getting the major version of the Kernel of the currently used Linux distribution
function BU.Main.OS.GetLinuxKernelMajorVersion()
{
    #**** Parameters ****
    local v_major=${1:-NULL};   # Int   - Default : NULL    - Linux kernel's major version.

    #**** Code ****
    return 0;
}

# Getting the minor version of the Kernel of the currently used Linux distribution
function BU.Main.OS.GetLinuxKernelMinorVersion()
{
    #**** Parameters ****
    local v_minor=${1:-NULL};   # Int   - Default : NULL    - Linux kernel's minor version.

    #**** Code ****
    return 0;
}

# Getting the version of the Kernel of the currently used Linux distribution by reading the content of the "/proc/version" file on Linux.
function BU.Main.OS.GetLinuxKernelVersion()
{
    #**** Parameters ****
    local v_kernelVer=${1:-NULL};   # String    - Default : NULL    - Linux kernel's version (can be passed like this : '5.15.0-53', or this : '5.15.0-53-generic').

    #**** Code ****
    if BU.Main.OS.IsLinux; then [ -r /proc/version ] && {
            local X;

            X="$(cat '/proc/version')";

            echo "$X" | grep -qi "$v_distro" || return 1;

            return 0;
        };

        BU.Main.Status.ChangeSTAT_ECHO "true" 'main' "$(basename "${BASH_SOURCE[0]}")" "$LINENO";

        BU.Main.Echo.Warning "$(BU.Main.Decho.Decho.Warning "${FUNCNAME[0]}") : Unable to find or to read the $(BU.Main.Decho.Decho.Path '/proc/version') file";
        BU.Main.Echo.Newline;

        BU.Main.Status.ChangeSTAT_ECHO "false" 'main' "$(basename "${BASH_SOURCE[0]}")" "$LINENO";

        return 1;
    else
        return 1;
    fi
}

# Checking if current OS is Linux (or Android without the Termux terminal emulator).
function BU.Main.OS.IsLinux()                           { [[ "$OSTYPE" == 'linux'* ]];                              &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroArchLinux()          	{ BU.Main.OS.GetLinuxDistro ARCH                            &&      return 0;       return 1; }


# Checking if current Linux distribution is Debian.
function BU.Main.OS.IsLinuxDistroDebian()             	{ BU.Main.OS.GetLinuxDistro debian                          &&      return 0;       return 1; }

# Checking debian versions.
function BU.Main.OS.IsLinuxDistroDebian6()            	{ BU.Main.OS.CheckLinuxDistroVersion 'Debian' '6'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian7()            	{ BU.Main.OS.CheckLinuxDistroVersion 'Debian' '7'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian8()            	{ BU.Main.OS.CheckLinuxDistroVersion 'Debian' '8'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian9()            	{ BU.Main.OS.CheckLinuxDistroVersion 'Debian' '9'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian10()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Debian' '10'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian11()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Debian' '11'          &&      return 0;       return 1; }


# Checking if current Linux distribution is Fedora.
function BU.Main.OS.IsLinuxDistroFedora()             	{ BU.Main.OS.GetLinuxDistro Fedora                          &&      return 0;       return 1; }

# Checking Fedora versions.
function BU.Main.OS.IsLinuxDistroFedora28()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '28'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora29()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '29'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora30()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '30'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora31()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '31'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora32()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '32'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora33()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '33'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora34()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '34'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora35()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '35'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora36()           	{ BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '36'          &&      return 0;       return 1; }


# Checking if current Linux distribution is Manjaro.
function BU.Main.OS.IsLinuxDistroManjaro()           	{ BU.Main.OS.GetLinuxDistro Manjaro                       	&&      return 0;       return 1; }


# Checking if current Linux distribution is Linux Mint.
function BU.Main.OS.IsLinuxDistroLinuxMint()          	{ BU.Main.OS.GetLinuxDistro ''                              &&      return 0;       return 1; }


# Checking if current Linux distribution is SUSE.
function BU.Main.OS.IsLinuxDistroSUSE()               	{ BU.Main.OS.GetLinuxDistro ''                              &&      return 0;       return 1; }


# Checking if current Linux distribution is Ubuntu.
function BU.Main.OS.IsLinuxDistroUbuntu()             	{ BU.Main.OS.GetLinuxDistro Ubuntu                          &&      return 0;       return 1; }

# Checking Ubuntu versions.
function BU.Main.OS.IsLinuxDistroUbuntu1804()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '18.04'       &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu1810()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '18.10'       &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu1904()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '19.04'       &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu1910()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '19.10'       &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu2004()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '20.04'       &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu2010()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '20.10'       &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu2104()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '21.04'       &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu2110()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '21.10'       &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu2204()         	{ BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '22.04'       &&      return 0;       return 1; }

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### OSX
#### DEBUG ID : "os::osx"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OSX="os::osx";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OSX__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OSX.checking-informations";

# Checking the version of the currently used OS X operating system.
function BU.Main.OS.CheckOSXVersion()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the main script with the command "bash -x".
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OSX" "$__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OSX__CHECKING_INFORMATIONS";

	#**** Parameters ****
    local p_version=$1;	# String    # Default : NULL    - OS X version (can be an integer or a string (like 'Yosemite' for Mac OS X 10.10)).

	#**** Code ****
	BU.Main.OS.IsOSX && {
		# TODO : Manage the dots between the major and the minor versions.
		if [ -n "$p_version" ]; then if BU.Main.Checkings.IsInt "$p_version"; then sw_vers | grep -q "$p_version"; fi;

		else
			BU.Main.OS.IsOSXMavericks					&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
			BU.Main.OS.IsOSXYosemite					&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
			BU.Main.OS.IsOSXElCapitan					&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
			BU.Main.OS.IsOSXSierra						&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
			BU.Main.OS.IsOSXHighSierra					&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
			BU.Main.OS.IsOSXMojave						&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
			BU.Main.OS.IsOSXCatalina					&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
			BU.Main.OS.IsOSXBigSur						&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;
			BU.Main.OS.IsOSXMonterey					&& BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0;

            # Returning an error code if the specific version is not found.
            BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

            return 1;
		fi
	}
}

# Checking if current OS is OSx.
function BU.Main.OS.IsOSX()                             { if [[ "$OSTYPE" == 'darwin'* ]];                                      then return 0; else return 1; fi;                    }

# Checking OSX versions.
function BU.Main.OS.IsOSXMavericks()					{ if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.9; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXYosemite()                    	{ if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.10; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXElCapitan()                    { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.11; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXSierra()                       { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.12; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXHighSierra()                   { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.13; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXMojave()                       { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.14; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXCatalina()                     { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.15; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXBigSur() 	                    { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 11;		then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXMonterey()                     { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 12;		then return 0; else return 1; fi; else return 1; fi; }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OSX__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OSX.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### VIRTUAL MACHINES
#### DEBUG ID : "os::vms"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__VMS="os::vms";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__VMS__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__VMS.checking-informations";

# Checking if the system is running in Qemu()
function BU.Main.OS.IsRunningInQemu()               { true; }

# Checking if the system is running in VMware.
function BU.Main.OS.IsRunningInVMware()             { if dmesg | grep -i VMware > /dev/null; then return 0; else return 1; fi; }

# Checking if the system is running in VirtualBox.
function BU.Main.OS.IsRunningInVirtualBox()         { if dmesg | grep -i VirtualBox > /dev/null; then return 0; else return 1; fi; }

# Checking if the system is running in a virtual machine.
function BU.Main.OS.IsVirtualized()                 { true; }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__VMS__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__VMS.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### WINDOWS
#### DEBUG ID : "os::windows"

__BU_MAIN_OS_LIB__CAT_DEBUG_ID__WINDOWS="os::windows";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__WINDOWS__CHECKING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__WINDOWS.checking-informations";

# Checking the Microsoft Windows version.
function BU.Main.Checkings.CheckOSWindowsVersion()
{
    #**** Parameters ****
    local p_versionNumber=${1:-NULL};   # Int       - Default : NULL    - Microsoft Windows operating system's version number.

    #**** Code ****
    if [ -z "$__BU_MAIN_OS_LIB__WINDOWS_MAJOR_VERSION_NUMBER" ]; then __BU_MAIN_OS_LIB__WINDOWS_MAJOR_VERSION_NUMBER="$(if command -v powershell.exe > /dev/null; then powershell.exe '[System.Environment]OSVersion.Version' | awk 'FNR == 4 {print $1}'; fi)"; fi

    if [ "$p_versionNumber" -eq "$__BU_MAIN_OS_LIB__WINDOWS_MAJOR_VERSION_NUMBER" ]; then return 0; else return 1; fi

    return 0;
}

# Checking if the current Windows' architecture is 32 bits.
function BU.Main.OS.IsWindows32bits()					{ if command -v powershell.exe > /dev/null; then if powershell.exe '(Get-WmiObject Win32_OperatingSystem).OSArchitecture' | grep -q 32; then return 0; else return 1; fi else return 1; fi; }

# Checking if the current Windows' architecture is 64 bits.
function BU.Main.OS.IsWindows64bits()					{ if command -v powershell.exe > /dev/null; then if powershell.exe '(Get-WmiObject Win32_OperatingSystem).OSArchitecture' | grep -q 64; then return 0; else return 1; fi else return 1; fi; }

# Checking if the current Windows licence is the Family licence.
function BU.Main.OS.IsWindowsFamily()					{ true; }

# Checking if the current Windows licence is the Professionnal licence.
function BU.Main.OS.IsWindowsPro()						{ true; }

# Checking if the current Windows licence is the Enterprise licence.
function BU.Main.OS.IsWindowsLTSC() 					{ true; }

# Checking if the currently used version of Windows is the 10th version.
function BU.Main.OS.IsWindows10()                    	{ if BU.Main.Checkings.CheckOSWindowsVersion '10';          								then    return 0; else  return 1; fi }

# Checking if the currently used version of Windows is the Windows 10 Family version.
function BU.Main.OS.IsWindows10Family()					{ if BU.Main.Checkings.CheckOSWindowsVersion '10' 			&& BU.Main.OS.IsWindowsFamily;	then 	return 0; else return 1; fi }

# Checking if the currently used version of Windows is the Windows 10 Professionnal version.
function BU.Main.OS.IsWindows10Pro()					{ if BU.Main.Checkings.CheckOSWindowsVersion '10' 			&& BU.Main.OS.IsWindowsPro;		then 	return 0; else return 1; fi }

# Checking if the currently used version of Windows is the Windows 10 LTSC version.
function BU.Main.OS.IsWindows10LTSC()					{ if BU.Main.Checkings.CheckOSWindowsVersion '10' 			&& BU.Main.OS.IsWindowsLTSC;	then 	return 0; else return 1; fi }

# Checking if the currently used version of Windows is the 11th.
function BU.Main.OS.IsWindows11()                     	{ if BU.Main.Checkings.CheckOSWindowsVersion '11';          								then    return 0; else  return 1; fi }

# Checking if the currently used version of Windows is the Windows 11 Family version.
function BU.Main.OS.IsWindows11Family()					{ if BU.Main.Checkings.CheckOSWindowsVersion '11' 			&& BU.Main.OS.IsWindowsFamily;	then return 0; else return 1; fi }

# Checking if the currently used version of Windows is the Windows 11 Professionnal version.
function BU.Main.OS.IsWindows11Pro()					{ if BU.Main.Checkings.CheckOSWindowsVersion '11' 			&& BU.Main.OS.IsWindowsPro;		then return 0; else return 1; fi }

# Checking if the currently used version of Windows is the Windows 11 LTSC version.
function BU.Main.OS.IsWindows11LTSC()					{ if BU.Main.Checkings.CheckOSWindowsVersion '11' 			&& BU.Main.OS.IsWindowsLTSC;	then return 0; else return 1; fi }

# Checking if current OS is a Linux distribution running on Windows Subsystem for Linux, on any Windows version.
function BU.Main.OS.IsLinuxWSL()                        { if [[ "$(< /proc/sys/kernel/osrelease)" == *[M-m]icrosoft* ]];    then    return 0; else  return 1; fi }

# Checking if current OS is a Linux distribution running on Windows Subsystem for Linux version 1, on any Windows version (WARNING : here, the 'M' from the "Microsoft" string MUST be in uppercase, as the 'm' in lower case is form the WSL version 2).
function BU.Main.OS.IsLinuxWSL1()                     	{ uname -r | grep Microsoft                                 &&      return 0;       return 1; }

# Checking if current OS is a Linux distribution running on Windows Subsystem for Linux version 2, on any Windows version (WARNING : here, the 'm' from the "microsoft" string MUST be in lowercase, as the 'M' in upper case is form the WSL version 1).
function BU.Main.OS.IsLinuxWSL2()                     	{ uname -r | grep microsoft                                 &&      return 0;       return 1; }

# -----------------------------------------------

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__WINDOWS__GATHERING_INFORMATIONS="$__BU_MAIN_OS_LIB__CAT_DEBUG_ID__WINDOWS.gathering-informations";

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #
