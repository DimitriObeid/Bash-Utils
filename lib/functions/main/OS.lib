#!/usr/bin/env bash

# ---------------------
# FILE'S INFORMATIONS :

# Name          : OS.lib
# Module        : Main
# Author(s)     : Dimitri OBEID
# Version       : beta


# ----------------------
# SCRIPT'S DESCRIPTION :

# Operating systems types and versions management.


# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the "$(shellcheck)" command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT ADD A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE THE "$(shellcheck)" COMMAND WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154


# ----------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "${__BU_MAIN_FUNCTIONS_FILES_PATH}" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as it is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then if [[ "${LANG}" == de_* ]]; then
    echo -e "ACHTUNG !" >&2; echo >&2;
    echo -e "Dieses Shell-Skript (${BASH_SOURCE[0]}) ist nicht dazu gedacht, direkt ausgeführt zu werden !" >&2; echo >&2;
    echo -e "Verwenden Sie nur dieses Skript, indem Sie es in Ihr Projekt aufnehmen." >&2;

elif [[ "${LANG}" == es_* ]]; then
    echo -e "ATENCIÓN !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) no debe ejecutarse directamente !" >&2; echo >&2;
    echo -e "Utilice sólo este script incluyéndolo en el script de su proyecto." >&2;

elif [[ "${LANG}" == fr_* ]]; then
    echo -e "ATTENTION !" >&2; echo >&2;
    echo -e "Ce script shell (${BASH_SOURCE[0]}) n'est pas conçu pour être directement exécuté !" >&2; echo >&2;
    echo -e "Utilisez seulement ce script en l'incluant dans votre projet." >&2;

elif [[ "${LANG}" == id_* ]]; then
    echo -e "PERINGATAN !" >&2; echo >&2;
    echo -e "Skrip shell ini (${BASH_SOURCE[0]}) tidak dimaksudkan untuk dieksekusi secara langsung !" >&2; echo >&2;
    echo -e "Gunakan skrip ini hanya dengan memasukkannya ke dalam skrip proyek Anda." >&2;

elif [[ "${LANG}" == pt_* ]]; then
    echo -e "ATENÇÃO !" >&2; echo >&2;
    echo -e "Este script de shell (${BASH_SOURCE[0]}) não é para ser executado directamente !" >&2; echo >&2;
    echo -e "Utilize este guião apenas incluindo-o no seu projecto." >&2;

elif [[ "${LANG}" == ru_* ]]; then
    echo -e "ВНИМАНИЕ !" >&2; echo >&2;
    echo -e "Этот сценарий оболочки (${BASH_SOURCE[0]}) не предназначен для непосредственного выполнения !" >&2; echo >&2;
    echo -e "Используйте только этот скрипт, включив его в свой проект." >&2;

elif [[ "${LANG}" == uk_* ]]; then
    echo -e "УВАГА !" >&2; echo >&2;
    echo -e "Цей скрипт оболонки (${BASH_SOURCE[0]}) не призначений для безпосереднього виконання !" >&2; echo >&2;
    echo -e "Використовуйте тільки цей скрипт, включивши його в скрипт вашого проекту." >&2;

else
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2; echo >&2;
    echo -e "Use only this script by including it in your project script." >&2;

fi; echo >&2; exit 1; fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### ANDROID
#### DEBUG ID : "os::android"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__ANDROID="os::android";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__ANDROID__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__ANDROID}::checking-informations";

# ·············································································
# Checking if current OS is Android, running with the Termux terminal emulator.

function BU.Main.OS.IsAndroid()         { if [[ "${OSTYPE}" == 'linux-android' ]]; then return 0; else return 1; fi }
function BU.Main.OS.IsAndroidTermux()   { if [[ "${OSTYPE}" == 'linux-android' ]]; then return 0; else return 1; fi }

alias BU.Main.OS.IsAndroid='BU.Main.OS.IsAndroidTermux';

# ·····································
# Checking the current Android version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid() -> OS.lib (this file)

function BU.Main.OS.IsAndroid4()    { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroid5()    { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroid6()    { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroid7()    { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroid8()    { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroid9()    { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroid10()   { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroid11()   { BU.Main.OS.IsAndroid && return 0; return 1; }

# ·········································
# Checking if the Android device is rooted.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid() -> Main -> OS.lib (this file)

function BU.Main.OS.IsAndroidRooted()                       { BU.Main.OS.IsAndroid && return 0; return 1; }

# ···········································
# Checking for specific Android manufacturer.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid() -> Main -> OS.lib (this file)

function BU.Main.OS.IsAndroidManufacturerAlcatel()          { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerASUS()             { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerBlackBerry()       { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerFujitsu()          { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerGoogle()           { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerHTC()              { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerHuawei()           { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerLenovo()           { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerLG()               { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerMotorola()         { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerNokia()            { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerOppo()             { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerPanasonic()        { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerSamsung()          { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerSony()             { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerVivo()             { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerWiko()             { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidManufacturerXiaomi()           { BU.Main.OS.IsAndroid && return 0; return 1; }

# ·······················································
# Checking if the current Android device is a smartphone.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid()                    -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsAndroidDeviceSmartphone()    -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsAndroidRooted()              -> Main -> OS.lib (this file)

function BU.Main.OS.IsAndroidDeviceSmartphone()             { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidDeviceSmartphoneRooted()       { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidRooted                        && return 0; return 1; }

# ······················································
# Checking for specific Android smartphone manufacturer.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroidDeviceSmartphone()    -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsAndroidManufacturer*()       -> Main -> OS.lib (this file)

function BU.Main.OS.IsAndroidSmartphoneManufacturerAlcatel()    { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerAlcatel       && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerASUS()       { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerASUS          && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerBlackBerry() { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerBlackBerry    && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerFujitsu()    { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerFujitsu       && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerGoogle()     { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerGoogle        && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerHTC()        { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerHTC           && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerHuawei()     { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerHuawei        && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerLenovo()     { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerLenovo        && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerLG()         { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerLG            && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerMotorola()   { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerMotorola      && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerNokia()      { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerNokia         && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerOppo()       { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerOppo          && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerPanasonic()  { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerPanasonic     && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerSamsung()    { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerSamsung       && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerSony()       { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerSony          && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerVivo()       { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerVivo          && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerWiko()       { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerWiko          && return 0; return 1; }
function BU.Main.OS.IsAndroidSmartphoneManufacturerXiaomi()     { BU.Main.OS.IsAndroidDeviceSmartphone && BU.Main.OS.IsAndroidManufacturerXiaomi        && return 0; return 1; }

# ···················································
# Checking if the current Android device is a Tablet.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid()                -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsAndroidDeviceTablet()    -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsAndroidRooted()          -> Main -> OS.lib (this file)

function BU.Main.OS.IsAndroidDeviceTablet()                 { BU.Main.OS.IsAndroid && return 0; return 1; }
function BU.Main.OS.IsAndroidDeviceTabletRooted()           { BU.Main.OS.IsAndroidDeviceTablet      && BU.Main.OS.IsAndroidRooted           && return 0; return 1; }

# ··················································
# Checking for specific Android tablet manufacturer.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroidDeviceTablet()    -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsManufacturer*()          -> Main -> OS.lib (this file)

function BU.Main.OS.IsAndroidTabletManufacturerAlcatel()    { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerAlcatel       && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerASUS()       { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerASUS          && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerBlackBerry() { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerBlackBerry    && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerGoogle()     { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerGoogle        && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerFujitsu()    { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerFujitsu       && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerHTC()        { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerHTC           && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerHuawei()     { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerHuawei        && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerLenovo()     { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerLenovo        && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerLG()         { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerLG            && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerMotorola()   { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerMotorola      && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerNokia()      { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerNokia         && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerOppo()       { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerOppo          && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerPanasonic()  { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerPanasonic     && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerSamsung()    { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerSamsung       && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerSony()       { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerSony          && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerVivo()       { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerVivo          && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerWiko()       { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerWiko          && return 0; return 1; }
function BU.Main.OS.IsAndroidTabletManufacturerXiaomi()     { BU.Main.OS.IsAndroidDeviceTablet && BU.Main.OS.IsAndroidManufacturerXiaomi        && return 0; return 1; }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__ANDROID__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__ANDROID}::gathering-informations";

# ···································
# Getting the Android device's model.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid() -> Main -> OS.lib (this file)

function BU.Main.OS.GetAndroidDeviceModel()         { BU.Main.OS.IsAndroid && getprop ro.product.model && return 0; return 1; }

# ··········································
# Getting the Android device's manufacturer.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid() -> Main -> OS.lib (this file)

function BU.Main.OS.GetAndroidDeviceManufacturer()  { BU.Main.OS.IsAndroid && getprop && return 0; return 1; }

# ·············································
# Getting the Android operating system's build.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid() -> Main -> OS.lib (this file)

function BU.Main.OS.GetAndroidOSBuild()             { BU.Main.OS.IsAndroid && getprop ro.build.display.id && return 0; return 1; }

# ···············································
# Getting the Android operating system's version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsAndroid() -> Main -> OS.lib (this file)

function BU.Main.OS.GetAndroidOSVersion()           { BU.Main.OS.IsAndroid && getprop ro.build.version.release && return 0; return 1; }

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BSD (GENERAL)
#### DEBUG ID : "os::bsd"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__BSD="os::bsd";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__BSD__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__BSD}::checking-informations";

# ··················································
# Checking if the current OS is BSD (general types).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsFreeBSD() -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsNetBSD()  -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsOpenBSD() -> Main -> OS.lib (this file)

function BU.Main.OS.IsBSD()                         { if BU.Main.OS.IsFreeBSD || BU.Main.OS.IsNetBSD || BU.Main.OS.IsOpenBSD; then return 0; else return 1; fi }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__BSD__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__BSD}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BSD (FREE BSD)
#### DEBUG ID : "os::free-bsd"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__FREE_BSD="os::free-bsd";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__FREE_BSD__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__FREE_BSD}::checking-informations";

# ··································
# Checking if current OS is FreeBSD.

function BU.Main.OS.IsFreeBSD()                   	{ if [[ "${OSTYPE}" == 'FreeBSD' ]];                                then    return 0; else  return 1; fi }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__FREE_BSD__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__FREE_BSD}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BSD (NET BSD)
#### DEBUG ID : "os::free-bsd"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__NET_BSD="os::net-bsd";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__NET_BSD__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__NET_BSD}::checking-informations";

# ·································
# Checking if current OS is NetBSD.

# shellcheck disable=
function BU.Main.OS.IsNetBSD()                    	{ if [[ "${OSTYPE}" == '' ]];                                       then    return 0; else  return 1; fi }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__NET_BSD__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__NET_BSD}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### BSD (OPEN BSD)
#### DEBUG ID : "os::open-bsd"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__OPEN_BSD="os::open-bsd";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-information

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OPEN_BSD__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OPEN_BSD}::checking-informations";

# ··································
# Checking if current OS is OpenBSD.

function BU.Main.OS.IsOpenBSD()                   	{ if [[ "${OSTYPE}" == 'openbsd'* ]];                               then    return 0; else  return 1; fi }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OPEN_BSD__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OPEN_BSD}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### CHROME OS
#### DEBUG ID : "os::chrome"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__CHROME_OS="os::chrome";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__CHROME_OS__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__CHROME_OS}::checking-informations";

# ····································
# Checking if current OS is Chrome OS.

# shellcheck disable=
function BU.Main.OS.IsChromeOS()					{ true; }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__CHROME_OS__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__CHROME_OS}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### HAIKU
#### DEBUG ID : "os::haiku"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__HAIKU="os::haiku";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__HAIKU__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__HAIKU}::checking-informations";

# ···································
# Checking if current OS is Haiku OS.

# shellcheck disable=
function BU.Main.OS.IsHaiku()                     	{ if [[ "${OSTYPE}" == 'haiku' ]];                                  then    return 0; else  return 1; fi }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__HAIKU__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__HAIKU}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### GENERAL OS FUNCTIONS
#### DEBUG ID : "os::general-os-functions"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT="os::general-os-functions";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__GENERAL_OS_FNCT__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT}::checking-informations";

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__GENERAL_OS_FNCT__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT}::gathering-informations";

# ······································································································································
# Checking the current operating system, by using the functions declared above, and returning '0' if the OS is supported, or '1' if not.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.Echo.Debug()
#   - BU.Main.Echo.DebugEnd()

#   - BU.Main.OS.IsAndroidTermux()
#   - BU.Main.OS.IsChromeOS()
#   - BU.Main.OS.IsFreeBSD()
#   - BU.Main.OS.IsHaiku()
#   - BU.Main.OS.IsLinux()
#   - BU.Main.OS.IsLinuxWSLWin10()
#   - BU.Main.OS.IsLinuxWSLWin11()
#   - BU.Main.OS.IsNetBSD()
#   - BU.Main.OS.IsOSX()
#   - BU.Main.OS.IsWindows10()
#   - BU.Main.OS.IsWindows11()

# shellcheck disable=
function BU.Main.OS.GetCurrentOS()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the Fedoramain script with the "$(bash -x)" command.
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT}" "${__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__GENERAL_OS_FNCT__GATHERING_INFORMATIONS}";

    #**** Code ****
    BU.Main.OS.IsAndroidTermux        	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
	BU.Main.OS.IsChromeOS				&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsFreeBSD              	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsHaiku                	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsOpenBSD             	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsLinux                	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsLinuxWSLWin10        	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsLinuxWSLWin11        	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsNetBSD               	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsOSX                    && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsWindows10            	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
    BU.Main.OS.IsWindows11            	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

    # Return an error code if the OS is not supported.
    BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

    return 1;
}

# ···········································································································
# Printing the name of the current operating system, and returning '0' if the OS is supported, or '1' if not.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.Echo.Debug()
#   - BU.Main.Echo.DebugEnd()

#   - BU.Main.OS.IsAndroidTermux()
#   - BU.Main.OS.IsChromeOS()
#   - BU.Main.OS.IsFreeBSD()
#   - BU.Main.OS.IsHaiku()
#   - BU.Main.OS.IsLinux()
#   - BU.Main.OS.IsLinuxWSLWin10()
#   - BU.Main.OS.IsLinuxWSLWin11()
#   - BU.Main.OS.IsNetBSD()
#   - BU.Main.OS.IsOSX()
#   - BU.Main.OS.IsWindows10()
#   - BU.Main.OS.IsWindows11()

function BU.Main.OS.PrintCurrentOS()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the Fedoramain script with the "$(bash -x)" command.
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__GENERAL_OS_FNCT}" "${__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__GENERAL_OS_FNCT__GATHERING_INFORMATIONS}";

    #**** Code ****
    BU.Main.OS.IsAndroidTermux          && { BU.Main.Echo.Msg 'Android';                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsChromeOS               && { BU.Main.Echo.Msg 'Chrome OS';              BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsFreeBSD                && { BU.Main.Echo.Msg 'Free BSD';               BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsHaiku                  && { BU.Main.Echo.Msg 'Haiku';                  BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsLinux                  && { BU.Main.Echo.Msg 'Linux';                  BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsLinuxWSLWin10          && { BU.Main.Echo.Msg 'Linux WSL Windows 10';   BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsLinuxWSLWin11          && { BU.Main.Echo.Msg 'Linux WSL Windows 11';   BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsNetBSD                 && { BU.Main.Echo.Msg 'Net BSD';                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsOpenBSD                && { BU.Main.Echo.Msg 'OpenBSD';                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsOSX                    && { BU.Main.Echo.Msg 'OSX';                    BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsWindows10              && { BU.Main.Echo.Msg 'Windows 10';             BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };
    BU.Main.OS.IsWindows11              && { BU.Main.Echo.Msg 'Windows 11';             BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; };

    # Return an error code if the OS is not supported.
    BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

    return 1;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### LINUX
#### DEBUG ID : os::linux

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX="os::linux";

## SPECIFIC OS VERSIONS CHECKINGS FUNCTIONS
## DEBUG ID : specific-os-versions-checkings

## CHECKING INFORMATIONS
## DEBUG ID :

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__LINUX__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX}::checking-informations";

# ···························································
# Checking the name of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.Echo.Debug()      -> Main -> Echo.lib
#   - BU.Main.Echo.DebugEnd()   -> Main -> Echo.lib

#   - BU.Main.OS.IsLinux()      -> Main -> OS.lib

# shellcheck disable=
function BU.Main.OS.CheckLinuxDistro()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the main script with the "$(bash -x)" command.
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX}" "${__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__LINUX__CHECKING_INFORMATIONS}";

    #**** Parameters ****
    local v_distro=${1:-$'\0'}; # ARG TYPE : String     - REQUIRED | DEFAULT VAL : NULL     - DESC : Name of the Linux distribution.

    #**** Code ****
    BU.Main.OS.IsLinux && {
        if [ -n "${v_distro}" ]; then                      	if BU.Main.OS.GetLinuxDistro "${v_distro}"; then return 0; else BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 1; fi

        else
            BU.Main.OS.IsLinuxDistroArchLinux             	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
            BU.Main.OS.IsLinuxDistroDebian                	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
            BU.Main.OS.IsLinuxDistroFedora                	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
            BU.Main.OS.IsLinuxDistroLinuxMint             	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
            BU.Main.OS.IsLinuxDistroManjaro               	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
            BU.Main.OS.IsLinuxDistroUbuntu                	&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

            # Returning an error code if the distribution is not found.
            BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

            return 1;
        fi
    }
}

# ······························································
# Checking the version of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.Echo.Debug()                      -> Main -> Echo.lib
#   - BU.Main.Echo.DebugEnd()                   -> Main -> Echo.lib

#   - BU.Main.OS.IsLinux()                      -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsLinuxDistroAlpineLinux*()    -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsLinuxDistroArchLinux*()      -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsLinuxDistroDebian*()         -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsLinuxDistroFedora*()         -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsLinuxDistroLinuxMint*()      -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsLinuxDistroManjaro*()        -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsLinuxDistroSUSE*()           -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsLinuxDistroUbuntu*()         -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.CheckLinuxDistroVersion()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the main script with the "$(bash -x)" command.
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX}" "${__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__LINUX__CHECKING_INFORMATIONS}";

    #**** Parameters ****
	local p_distro=${1:-$'\0'};     # ARG TYPE : String         - REQUIRED | DEFAULT VAL : NULL     - DESC : Name of the Linux distribution.
    local p_version=${2:-$'\0'};    # ARG TYPE : Int | String   - REQUIRED | DEFAULT VAL : NULL     - DESC : Linux distribution's version (can be an integer or a string (like 'Focal Fossa' for Ubuntu 20.04)).

    #**** Code ****
    BU.Main.OS.IsLinux && {
        if [ -n "${p_distro}" ] && [ -n "${p_version}" ]; then
            if BU.Main.OS.GetLinuxDistro "${p_distro}"          && BU.Main.OS.GetLinuxDistroVersion "${p_version}"; then return 0; else BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 1; fi

        else

            BU.Main.OS.IsLinuxDistroAlpineLinux && {
                BU.Main.OS.IsLinuxDistroAlpineLinux3_17         && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_16         && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_15         && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_14         && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_13         && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_12         && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_11         && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_10         && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroAlpineLinux3_9          && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_8          && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroAlpineLinux3_7          && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
            }

            # Please call the newer versions first, in order to optimize the conditions for the most used distribution.
            BU.Main.OS.IsLinuxDistroArchLinux && {
                BU.Main.OS.IsLinuxDistroArchLinux2023_04_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2023_03_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2023_02_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2023_01_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroArchLinux2022_12_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_11_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_10_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_09_03     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_08_05     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_07_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_06_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_05_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_04_05     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_04_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_03_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_02_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroArchLinux2022_01_01     && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                # Returning an error code if the specific version of Arch Linux is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            };

            # Please call the newer versions first, in order to optimize the conditions for the most used distribution.
            BU.Main.OS.IsLinuxDistroDebian && {
                BU.Main.OS.IsLinuxDistroDebian11                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroDebian10                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroDebian9                 && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroDebian8                 && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroDebian7                 && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroDebian6                 && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroDebian5                 && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                # Returning an error code if the specific version of Debian is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            };

            # Please call the newer versions first, in order to optimize the conditions for the most used distribution.
            BU.Main.OS.IsLinuxDistroFedora && {
                BU.Main.OS.IsLinuxDistroFedora38                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora37                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora36                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora35                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora34                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora33                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora32                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora31                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora30                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroFedora29                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora28                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora27                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora26                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora25                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora24                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora23                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora22                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora21                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora20                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroFedora19                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora18                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora17                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora16                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora15                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora14                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora13                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroFedora12                && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                # Returning an error code if the specific version of Fedora is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            };

            # Please call the newer versions first, in order to optimize the conditions for the most used distribution.
            BU.Main.OS.IsLinuxDistroLinuxMint && {
                BU.Main.OS.IsLinuxDistroLinuxMint21_1           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint21             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroLinuxMint20_3           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint20_2           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint20_1           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint20             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroLinuxMint19_3           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint19_2           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint19_1           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint19             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroLinuxMint18_3           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint18_2           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint18_1           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint18             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroLinuxMint17_3           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint17_2           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint17_1           && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint17             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroLinuxMint16             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint15             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint14             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint13             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint12             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint11             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroLinuxMint9              && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroLinuxMint8              && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }



                # Returning an error code if the specific version of Arch Linux is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            };

            # Please call the newer versions first, in order to optimize the conditions for the most used distribution.
            BU.Main.OS.IsLinuxDistroManjaro && {
                true;

                # Returning an error code if the specific version of Arch Linux is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            };

            # Please call the newer versions first, in order to optimize the conditions for the most used distribution.
            BU.Main.OS.IsLinuxDistroSUSE && {
                true;

                # Returning an error code if the specific version of Arch Linux is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            };

            # Please call the newer versions first, in order to optimize the conditions for the most used distribution.
            BU.Main.OS.IsLinuxDistroUbuntu && {
                BU.Main.OS.IsLinuxDistroUbuntu23_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu22_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu22_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu21_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu21_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu20_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu20_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroUbuntu19_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu19_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu18_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu18_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu17_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu17_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu16_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu16_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu15_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu15_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                BU.Main.OS.IsLinuxDistroUbuntu14_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu14_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu13_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu13_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu12_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu12_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu11_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu11_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu10_10             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
                BU.Main.OS.IsLinuxDistroUbuntu10_04             && { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

                # Returning an error code if the specific version of Ubuntu is not found.
                BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

                return 1;
            };

            # Returning an error code if the Linux distribution is not found.
            BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

            return 1;
        fi
    }
}

# ·················································································
# Checking the full version of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.CheckLinuxKernelFullVersion() { return 0; }

# ··················································································
# Checking the major version of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.CheckLinuxKernelMajorVersion() { return 0; }

# ··················································································
# Checking the minor version of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.CheckLinuxKernelMinorVersion() { return 0; }

# ·················································································
# Checking the patch number of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.CheckLinuxKernelPatchNumber() { return 0; }

# ··················································································
# Checking the configuration of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.CheckLinuxKernelConfiguration() { return 0; }

# ··················································································
# Checking if current OS is Linux (or Android without the Termux terminal emulator).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinux()                           { [[ "${OSTYPE}" == 'linux'* ]]                                 &&      return 0;       return 1; }

# ·······················································
# Checking if current Linux distribution is Alpine Linux.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinuxDistroAlpineLinux()          { BU.Main.OS.GetLinuxDistro ''                                  &&      return 0;       return 1; }

# ································································································································································
# Checking Alpine Linux versions (WARNING : verify that you correctly pass the second mandatory argument, or else the script will be stuck into an infinite loop).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.OS.IsLinuxDistroAlpineLinux3_7()       { BU.Main.OS.CheckLinuxDistroVersion '' '3.7'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_8()       { BU.Main.OS.CheckLinuxDistroVersion '' '3.8'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_9()       { BU.Main.OS.CheckLinuxDistroVersion '' '3.9'  &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroAlpineLinux3_10()      { BU.Main.OS.CheckLinuxDistroVersion '' '3.10' &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_11()      { BU.Main.OS.CheckLinuxDistroVersion '' '3.11' &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_12()      { BU.Main.OS.CheckLinuxDistroVersion '' '3.12' &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_13()      { BU.Main.OS.CheckLinuxDistroVersion '' '3.13' &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_14()      { BU.Main.OS.CheckLinuxDistroVersion '' '3.14' &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_15()      { BU.Main.OS.CheckLinuxDistroVersion '' '3.15' &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_16()      { BU.Main.OS.CheckLinuxDistroVersion '' '3.16' &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroAlpineLinux3_17()      { BU.Main.OS.CheckLinuxDistroVersion '' '3.17' &&      return 0;       return 1; }


# --------------------

# ·····················································
# Checking if current Linux distribution is Arch Linux.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.OS.IsLinuxDistroArchLinux()            { BU.Main.OS.GetLinuxDistro 'Arch Linux'                        &&      return 0;       return 1; }

# ······························································································································································
# Checking Arch Linux versions (WARNING : verify that you correctly pass the second mandatory argument, or else the script will be stuck into an infinite loop).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

function BU.Main.OS.IsLinuxDistroArchLinux2023_04_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2023.04.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2023_03_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2023.03.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2023_02_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2023.02.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2023_01_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2023.01.01'  &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroArchLinux2022_12_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.12.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_11_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.11.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_10_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.10.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_09_03()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.09.03'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_08_05()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.08.05'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_07_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.07.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_06_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.06.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_05_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.05.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_04_05()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.04.05'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_04_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.04.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_03_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.03.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_02_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.02.01'  &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroArchLinux2022_01_01()  { BU.Main.OS.CheckLinuxDistroVersion 'Arch Linux' '2022.01.01'  &&      return 0;       return 1; }


# --------------------

# ·················································
# Checking if current Linux distribution is Debian.

function BU.Main.OS.IsLinuxDistroDebian()               { BU.Main.OS.GetLinuxDistro debian                              &&      return 0;       return 1; }

# ··························································································································································
# Checking Debian versions (WARNING : verify that you correctly pass the second mandatory argument, or else the script will be stuck into an infinite loop).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckLinuxDistroVersion() -> Main -> OS.lib (this file)

function BU.Main.OS.IsLinuxDistroDebian4()              { BU.Main.OS.CheckLinuxDistroVersion 'Debian' '4'               &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian5()              { BU.Main.OS.CheckLinuxDistroVersion 'Debian' '5'               &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian6()              { BU.Main.OS.CheckLinuxDistroVersion 'Debian' '6'               &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian7()              { BU.Main.OS.CheckLinuxDistroVersion 'Debian' '7'               &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian8()              { BU.Main.OS.CheckLinuxDistroVersion 'Debian' '8'               &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian9()              { BU.Main.OS.CheckLinuxDistroVersion 'Debian' '9'               &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian10()             { BU.Main.OS.CheckLinuxDistroVersion 'Debian' '10'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroDebian11()             { BU.Main.OS.CheckLinuxDistroVersion 'Debian' '11'              &&      return 0;       return 1; }


# --------------------

# ·················································
# Checking if current Linux distribution is Fedora.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinuxDistroFedora()               { BU.Main.OS.GetLinuxDistro Fedora                              &&      return 0;       return 1; }

# ··························································································································································
# Checking Fedora versions (WARNING : verify that you correctly pass the second mandatory argument, or else the script will be stuck into an infinite loop).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckLinuxDistroVersion() -> Main -> OS.lib (this file)

function BU.Main.OS.IsLinuxDistroFedora12()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '12'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora13()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '13'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora14()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '14'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora15()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '15'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora16()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '16'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora17()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '17'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora18()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '18'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora19()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '19'              &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroFedora20()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '20'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora21()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '21'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora22()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '22'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora23()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '23'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora24()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '24'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora25()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '25'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora26()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '26'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora27()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '27'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora28()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '28'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora29()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '29'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora30()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '30'              &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroFedora31()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '31'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora32()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '32'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora33()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '33'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora34()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '34'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora35()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '35'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora36()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '36'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora37()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '37'              &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroFedora38()             { BU.Main.OS.CheckLinuxDistroVersion 'Fedora' '38'              &&      return 0;       return 1; }


# --------------------

# ·····················································
# Checking if current Linux distribution is Linux Mint.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinuxDistroLinuxMint()            { BU.Main.OS.GetLinuxDistro 'Linux Mint'                        &&      return 0;       return 1; }

# ······························································································································································
# Checking Linux Mint versions (WARNING : verify that you correctly pass the second mandatory argument, or else the script will be stuck into an infinite loop).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckLinuxDistroVersion() -> Main -> OS.lib (this file)

function BU.Main.OS.IsLinuxDistroLinuxMint8()           { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '8'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint9()           { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '9'           &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroLinuxMint10()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '10'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint11()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '11'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint12()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '12'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint13()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '13'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint14()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '14'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint15()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '15'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint16()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '16'          &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroLinuxMint17()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '17'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint17_1()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '17.1'        &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint17_2()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '17.2'        &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint17_3()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '17.3'        &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroLinuxMint18()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '18'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint18_1()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '18.1'        &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint18_2()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '18.2'        &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint18_3()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '18.3'        &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroLinuxMint19()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '19'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint19_1()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '19.1'        &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint19_2()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '19.2'        &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint19_3()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '19.3'        &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroLinuxMint20()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '20'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint20_1()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '20.1'        &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint20_2()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '20.2'        &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint20_3()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '20.3'        &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroLinuxMint21()          { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '21'          &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroLinuxMint21_1()        { BU.Main.OS.CheckLinuxDistroVersion 'Linux Mint' '21.1'        &&      return 0;       return 1; }


# --------------------

# ··················································
# Checking if current Linux distribution is Manjaro.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinuxDistroManjaro()              { BU.Main.OS.GetLinuxDistro Manjaro                             &&      return 0;       return 1; }

# ···························································································································································
# Checking Manjaro versions (WARNING : verify that you correctly pass the second mandatory argument, or else the script will be stuck into an infinite loop).


# --------------------

# ···············································
# Checking if current Linux distribution is SUSE.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinuxDistroSUSE()                 { BU.Main.OS.GetLinuxDistro ''                                  &&      return 0;       return 1; }

# ························································································································································
# Checking SUSE versions (WARNING : verify that you correctly pass the second mandatory argument, or else the script will be stuck into an infinite loop).


# --------------------

# ·················································
# Checking if current Linux distribution is Ubuntu.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsLinuxDistroUbuntu() -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsLinuxDistroUbuntu()               { BU.Main.OS.GetLinuxDistro Ubuntu                              &&      return 0;       return 1; }

# ··························································································································································
# Checking Ubuntu versions (WARNING : verify that you correctly pass the second mandatory argument, or else the script will be stuck into an infinite loop).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckLinuxDistroVersion()  -> Main -> OS.lib (this file)

function BU.Main.OS.IsLinuxDistroUbuntu10_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '10.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu10_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '10.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu11_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '11.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu11_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '11.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu12_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '12.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu12_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '12.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu13_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '13.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu13_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '13.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu14_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '14.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu14_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '14.10'           &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroUbuntu15_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '15.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu15_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '15.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu16_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '16.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu16_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '16.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu17_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '17.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu17_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '17.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu18_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '18.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu18_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '18.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu19_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '19.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu19_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '19.10'           &&      return 0;       return 1; }

function BU.Main.OS.IsLinuxDistroUbuntu20_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '20.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu20_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '20.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu21_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '21.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu21_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '21.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu22_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '22.04'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu22_10()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '22.10'           &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxDistroUbuntu23_04()          { BU.Main.OS.CheckLinuxDistroVersion 'Ubuntu' '23.04'           &&      return 0;       return 1; }

# --------------------

# ················································
# Checking the current major Linux kernel version.

function BU.Main.OS.IsLinuxKernelMajor2() { local x; x="$(BU.Main.OS.GetLinuxKernelMajorVersion)"; [ "${x}" == '2' ]    &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxKernelMajor3() { local x; x="$(BU.Main.OS.GetLinuxKernelMajorVersion)"; [ "${x}" == '3' ]    &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxKernelMajor4() { local x; x="$(BU.Main.OS.GetLinuxKernelMajorVersion)"; [ "${x}" == '4' ]    &&      return 0;       return 1; }
function BU.Main.OS.IsLinuxKernelMajor5() { local x; x="$(BU.Main.OS.GetLinuxKernelMajorVersion)"; [ "${x}" == '5' ]    &&      return 0;       return 1; }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__LINUX__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__LINUX}::gathering-informations";

# ·······················································································································
# Getting the name of the currently used Linux distribution, by reading the content of the "/proc/version" file on Linux.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.Echo.Newline()            -> Main -> Echo.lib
#   - BU.Main.Echo.Warning()            -> Main -> Echo.lib

#   - BU.Main.OS.IsLinux()              -> Main -> OS.lib

#   - BU.Main.Status.ChangeSTAT_ECHO()  -> Main -> Status.lib

function BU.Main.OS.GetLinuxDistro()
{
    #**** Parameters ****
    local p_distro=${1:-NULL}; # ARG TYPE : String      - REQUIRED | DEFAULT VAL : NULL     - DESC : Linux distribution's version (can be an integer or a string (like 'Focal Fossa' for Ubuntu 20.04)).

    #**** Variables ****
    local v_distro; # VAR TYPE : String                 - DESC : Stores the name of the current Linux distribution.

    #**** Code ****
    if BU.Main.OS.IsLinux; then
        if [ -n "${p_distro}" ]; then [ -r /proc/version ] && {
                local X;

                X="$(cat '/proc/version')";

                echo "${X}" | grep -qi "${p_distro}" || return 1;

                return 0;
            };

            BU.Main.Status.ChangeSTAT_ECHO "true" 'main' "$(basename "${BASH_SOURCE[0]}")" "${LINENO}";

            BU.Main.Echo.Warning "$(BU.Main.Decho.Decho.Warning "${FUNCNAME[0]}") : Unable to find or to read the $(BU.Main.Decho.Decho.Path '/proc/version') file";
            BU.Main.Echo.Newline;

            BU.Main.Status.ChangeSTAT_ECHO "false" 'main' "$(basename "${BASH_SOURCE[0]}")" "${LINENO}";

            return 1;
        else
            v_distro="$(grep '^NAME=' '/etc/os-release' | cut -d '"' -f 2)";

            if [ -n "${v_distro}" ]; then
                return 0;
            else
                BU.Main.Status.ChangeSTAT_ECHO "true" 'main' "$(basename "${BASH_SOURCE[0]}")" "${LINENO}";

                BU.Main.Echo.Warning "$(BU.Main.Decho.Decho.Warning "${FUNCNAME[0]}") : Unable to get the name of the current Linux distribution";
                BU.Main.Echo.Newline;

                BU.Main.Status.ChangeSTAT_ECHO "false" 'main' "$(basename "${BASH_SOURCE[0]}")" "${LINENO}";

                return 1;
            fi
        fi
    else
        return 1;
    fi
}

# ·······················································································································
# Getting the name of the currently used Linux distribution, by reading the content of the "/proc/version" file on Linux.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.GetLinuxDistro() -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.GetLinuxDistroVersion()
{
    BU.Main.OS.GetLinuxDistro "${1}" || return 1; return 0;
}

# ················································································
# Getting the full version of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsLinux() -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.GetLinuxKernelFullVersion()
{
    BU.Main.OS.IsLinux && uname -r && return 0; return 1;
}

# ·················································································
# Getting the major version of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsLinux() -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.GetLinuxKernelMajorVersion()
{
    BU.Main.OS.IsLinux && uname -r | cut -d. -f1 && return 0; return 1;
}

# ·················································································
# Getting the minor version of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsLinux() -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.GetLinuxKernelMinorVersion()
{
    BU.Main.OS.IsLinux && uname -r | cut -d. -f2 && return 0; return 1;
}

# ················································································
# Getting the patch number of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsLinux() -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.GetLinuxKernelPatchNumber()
{
    BU.OS.IsLinux && uname -r | cut -d"-" -f2 && return 0; return 1;
}

# ·················································································
# Getting the configuration of the Kernel of the currently used Linux distribution.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsLinux() -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.GetLinuxKernelConfiguration()
{
    BU.OS.IsLinux && uname -r | cut -d"-" -f3 && return 0; return 1;
}

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### OSX
#### DEBUG ID : "os::osx"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__OSX="os::osx";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OSX__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OSX}::checking-informations";

# ·································································
# Checking the version of the currently used OS X operating system.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.Checkings.IsInt() -> Main -> Checkings.lib

#   - BU.Main.Echo.Debug()      -> Main -> Echo.lib
#   - BU.Main.Echo.DebugEnd()   -> Main -> Echo.lib

#   - BU.Main.OS.IsOSX*()       -> Main -> OS.lib

# shellcheck disable=
function BU.Main.OS.CheckOSXVersion()
{
    # This function makes it easier for the user to find the current function and its executed content if it is called during the execution of the main script with the "$(bash -x)" command.
    BU.Main.Echo.Debug "main" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OSX}" "${__BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OSX__CHECKING_INFORMATIONS}";

	#**** Parameters ****
    local p_version=${1:-$'\0'}; # ARG TYPE : String    - REQUIRED | DEFAULT VAL : NULL     - DESC : OS X version (can be an integer or a string (like 'Yosemite' for Mac OS X 10.10)).

	#**** Code ****
	BU.Main.OS.IsOSX && {
		# TODO : Manage the dots between the major and the minor versions.
		if [ -n "${p_version}" ]; then if BU.Main.Checkings.IsInt "${p_version}"; then sw_vers | grep -q "${p_version}"; return 0; fi;

		else
			BU.Main.OS.IsOSXMavericks					&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
			BU.Main.OS.IsOSXYosemite					&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
			BU.Main.OS.IsOSXElCapitan					&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
			BU.Main.OS.IsOSXSierra						&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
			BU.Main.OS.IsOSXHighSierra					&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
			BU.Main.OS.IsOSXMojave						&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
			BU.Main.OS.IsOSXCatalina					&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
			BU.Main.OS.IsOSXBigSur						&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }
			BU.Main.OS.IsOSXMonterey					&& { BU.Main.Echo.DebugEnd "${FUNCNAME[0]}"; return 0; }

            # Returning an error code if the specific version is not found.
            BU.Main.Echo.DebugEnd "${FUNCNAME[0]}";

            return 1;
		fi
	}
}

# ······························
# Checking if current OS is OSX.

# shellcheck disable=
function BU.Main.OS.IsOSX()                             { if [[ "${OSTYPE}" == 'darwin'* ]];                                    then return 0; else return 1; fi;                    }

# ······················
# Checking OSX versions.

function BU.Main.OS.IsOSXMavericks()					{ if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.9; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXYosemite()                    	{ if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.10; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXElCapitan()                    { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.11; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXSierra()                       { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.12; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXHighSierra()                   { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.13; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXMojave()                       { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.14; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXCatalina()                     { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 10.15; 	then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXBigSur() 	                    { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 11;		then return 0; else return 1; fi; else return 1; fi; }
function BU.Main.OS.IsOSXMonterey()                     { if command -v sw_vers > /dev/null; then if sw_vers | grep -q 12;		then return 0; else return 1; fi; else return 1; fi; }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__OSX__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__OSX}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### VIRTUAL MACHINES
#### DEBUG ID : "os::vms"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__VMS="os::vms";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__VMS__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__VMS}::checking-informations";

# ············································
# Checking if the system is running in Qemu().

function BU.Main.OS.IsRunningInQemu.Android()           { return 0; }
function BU.Main.OS.IsRunningInQemu.BSD()               { if BU.Main.OS.IsRunningInQemu.FreeBSD || BU.Main.OS.IsRunningInQemu.NetBSD || BU.Main.OS.IsRunningInQemu.OpenBSD; then return 0; else return 1; fi }
function BU.Main.OS.IsRunningInQemu.FreeBSD()           { return 0; }
function BU.Main.OS.IsRunningInQemu.Haiku()             { return 0; }
function BU.Main.OS.IsRunningInQemu.Linux()             { if dmesg | grep -i Qemu > /dev/null; then return 0; else return 1; fi; }
function BU.Main.OS.IsRunningInQemu.NetBSD()            { return 0; }
function BU.Main.OS.IsRunningInQemu.OpenBSD()           { return 0; }
function BU.Main.OS.IsRunningInQemu.OSX()               { return 0; }
function BU.Main.OS.IsRunningInQemu.Windows()           { return 0; }


function BU.Main.OS.IsRunningInQemu()                   { return 0; }

# ··························································································
# Checking if the current system is running in VMware, according to its own system commands.

function BU.Main.OS.IsRunningInVMware.Android()         { return 0; }
function BU.Main.OS.IsRunningInVMware.BSD()             { if BU.Main.OS.IsRunningInVMware.FreeBSD || BU.Main.OS.IsRunningInVMware.NetBSD || BU.Main.OS.IsRunningInVMware.OpenBSD; then return 0; else return 1; fi }
function BU.Main.OS.IsRunningInVMware.FreeBSD()         { return 0; }
function BU.Main.OS.IsRunningInVMware.Haiku()           { return 0; }
function BU.Main.OS.IsRunningInVMware.Linux()           { if dmesg | grep -i VMware > /dev/null; then return 0; else return 1; fi; }
function BU.Main.OS.IsRunningInVMware.NetBSD()          { return 0; }
function BU.Main.OS.IsRunningInVMware.OpenBSD()         { return 0; }
function BU.Main.OS.IsRunningInVMware.OSX()             { return 0; }
function BU.Main.OS.IsRunningInVMware.Windows()         { return 0; }

function BU.Main.OS.IsRunningInVMware()                 { BU.Main.OS.IsRunningInVMware."${}"; }

# ······························································································
# Checking if the current system is running in VirtualBox, according to its own system commands.

function BU.Main.OS.IsRunningInVirtualBox.Android()     { return 0; }
function BU.Main.OS.IsRunningInVirtualBox.BSD()         { if BU.Main.OS.IsRunningInVirtualBox.FreeBSD || BU.Main.OS.IsRunningInVirtualBox.NetBSD || BU.Main.OS.IsRunningInVirtualBox.OpenBSD; then return 0; else return 1; fi }
function BU.Main.OS.IsRunningInVirtualBox.FreeBSD()     { return 0; }
function BU.Main.OS.IsRunningInVirtualBox.Haiku()       { return 0; }
function BU.Main.OS.IsRunningInVirtualBox.Linux()       { if dmesg | grep -i VirtualBox > /dev/null; then return 0; else return 1; fi; }
function BU.Main.OS.IsRunningInVirtualBox.NetBSD()      { return 0; }
function BU.Main.OS.IsRunningInVirtualBox.OpenBSD()     { return 0; }
function BU.Main.OS.IsRunningInVirtualBox.OSX()         { return 0; }
function BU.Main.OS.IsRunningInVirtualBox.Windows()     { return 0; }

function BU.Main.OS.IsRunningInVirtualBox()             { BU.Main.OS.BU.Main.OS.IsRunningInVirtualBox."${}"; }

# ·······················································
# Checking if the system is running in a virtual machine.

# shellcheck disable=
function BU.Main.OS.IsVirtualized()                     { return 0; }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__VMS__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__VMS}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### WINDOWS
#### DEBUG ID : "os::windows"

declare -r __BU_MAIN_OS_LIB__CAT_DEBUG_ID__WINDOWS="os::windows";

## CHECKING INFORMATIONS
## DEBUG ID : "checking-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__WINDOWS__CHECKING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__WINDOWS}::checking-informations";

# ·······································
# Checking the Microsoft Windows version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - Feel free to call a function if it is needed for your contribution.

# shellcheck disable=
function BU.Main.OS.CheckOSWindowsVersion()
{
    #**** Parameters ****
    local p_versionNumber=${1:-NULL};   # ARG TYPE : Int    - REQUIRED | DEFAULT VAL : NULL     - DESC : Microsoft Windows operating system's version number.

    #**** Code ****
    if [ -z "${__BU_MAIN_OS_LIB__WINDOWS_MAJOR_VERSION_NUMBER}" ]; then __BU_MAIN_OS_LIB__WINDOWS_MAJOR_VERSION_NUMBER="$(if command -v powershell.exe > /dev/null; then powershell.exe '[System.Environment]OSVersion.Version' | awk 'FNR == 4 {print $1}'; fi)"; fi

    if [ "${p_versionNumber}" -eq "${__BU_MAIN_OS_LIB__WINDOWS_MAJOR_VERSION_NUMBER}" ]; then return 0; else return 1; fi
}

# ·························································
# Checking if the current Windows' architecture is 32 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - Feel free to call a function if it is needed for your contribution.

# shellcheck disable=
function BU.Main.OS.IsWindows32bits()					{ if command -v powershell.exe > /dev/null; then if powershell.exe '(Get-WmiObject Win32_OperatingSystem).OSArchitecture' | grep -q 32; then return 0; else return 1; fi else return 1; fi; }

# ·························································
# Checking if the current Windows' architecture is 64 bits.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - Feel free to call a function if it is needed for your contribution.

# shellcheck disable=
function BU.Main.OS.IsWindows64bits()					{ if command -v powershell.exe > /dev/null; then if powershell.exe '(Get-WmiObject Win32_OperatingSystem).OSArchitecture' | grep -q 64; then return 0; else return 1; fi else return 1; fi; }

# ······························································
# Checking if the current Windows licence is the Family licence.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsWindows10Family()                    -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindows11Family()                    -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindowsFamily()					{ if BU.Main.OS.IsWindows10Family   || BU.Main.OS.IsWindows11Family;                        then    return 0; else  return 1; fi; }

# ·····································································
# Checking if the current Windows licence is the Professionnal licence.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsWindows10Pro()                       -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindows11Pro()                       -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindowsPro()						{ if BU.Main.OS.IsWindows10Pro      || BU.Main.OS.IsWindows11Pro;                           then    return 0; else  return 1; fi; }

# ··································································
# Checking if the current Windows licence is the Enterprise licence.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.IsWindows10LTSC()                      -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindows11LTSC()                      -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindowsLTSC() 					{ if BU.Main.OS.IsWindows10LTSC     || BU.Main.OS.IsWindows11LTSC;                          then    return 0; else  return 1; fi; }

# ······································································
# Checking if the currently used version of Windows is the 10th version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckOSWindowsVersion()                -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindows10()                    	{ if BU.Main.OS.CheckOSWindowsVersion '10';          								        then    return 0; else  return 1; fi; }

# ···················································································
# Checking if the currently used version of Windows is the Windows 10 Family version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckOSWindowsVersion()                -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindowsFamily()                      -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindows10Family()					{ if BU.Main.OS.CheckOSWindowsVersion '10' 			&& BU.Main.OS.IsWindowsFamily;	        then 	return 0; else 	return 1; fi; }

# ··························································································
# Checking if the currently used version of Windows is the Windows 10 Professionnal version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckOSWindowsVersion()                -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindowsPro()                         -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindows10Pro()					{ if BU.Main.OS.CheckOSWindowsVersion '10' 			&& BU.Main.OS.IsWindowsPro;		        then 	return 0; else 	return 1; fi; }

# ·················································································
# Checking if the currently used version of Windows is the Windows 10 LTSC version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckOSWindowsVersion()                -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindowsLTSC()                        -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindows10LTSC()					{ if BU.Main.OS.CheckOSWindowsVersion '10' 			&& BU.Main.OS.IsWindowsLTSC;	        then 	return 0; else 	return 1; fi; }

# ······································································
# Checking if the currently used version of Windows is the 11th version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckOSWindowsVersion()                -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindows11()                     	{ if BU.Main.OS.CheckOSWindowsVersion '11';          								        then    return 0; else 	return 1; fi; }

# ···················································································
# Checking if the currently used version of Windows is the Windows 11 Family version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckOSWindowsVersion()                -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindowsFamily()                      -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindows11Family()					{ if BU.Main.OS.CheckOSWindowsVersion '11' 			&& BU.Main.OS.IsWindowsFamily;	        then 	return 0; else 	return 1; fi; }

# ··························································································
# Checking if the currently used version of Windows is the Windows 11 Professionnal version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckOSWindowsVersion()                -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindowsPro()                         -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindows11Pro()					{ if BU.Main.OS.CheckOSWindowsVersion '11' 			&& BU.Main.OS.IsWindowsPro;		        then 	return 0; else 	return 1; fi; }

# ·················································································
# Checking if the currently used version of Windows is the Windows 11 LTSC version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   - BU.Main.OS.CheckOSWindowsVersion()                -> Main -> OS.lib (this file)
#   - BU.Main.OS.IsWindowsLTSC()                        -> Main -> OS.lib (this file)

# shellcheck disable=
function BU.Main.OS.IsWindows11LTSC()					{ if BU.Main.OS.CheckOSWindowsVersion '11' 			&& BU.Main.OS.IsWindowsLTSC;	        then 	return 0; else 	return 1; fi; }

# ··············································································································
# Checking if current OS is a Linux distribution running on Windows Subsystem for Linux, on any Windows version.

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinuxWSL()                        { if [[ "$(< /proc/sys/kernel/osrelease)" == *[M-m]icrosoft* ]];    						then    return 0; else  return 1; fi; }

# ·······················································································································································································································································
# Checking if current OS is a Linux distribution running on Windows Subsystem for Linux version 1, on any Windows version (WARNING : here, the 'M' from the "Microsoft" string MUST be in uppercase, as the 'm' in lower case is form the WSL version 2).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinuxWSL1()                     	{ uname -r | grep Microsoft                                 &&      								return 0;       return 1; }

# ·······················································································································································································································································
# Checking if current OS is a Linux distribution running on Windows Subsystem for Linux version 2, on any Windows version (WARNING : here, the 'm' from the "microsoft" string MUST be in lowercase, as the 'M' in upper case is form the WSL version 1).

# Featured function(s) and file(s) by module(s) and from the "functions" folder :
#   -

# shellcheck disable=
function BU.Main.OS.IsLinuxWSL2()                     	{ uname -r | grep microsoft                                 &&      								return 0;       return 1; }

## ==============================================

## GATHERING INFORMATIONS
## DEBUG ID : "gathering-informations"

declare -r __BU_MAIN_OS_LIB__SUBCAT_DEBUG_ID__WINDOWS__GATHERING_INFORMATIONS="${__BU_MAIN_OS_LIB__CAT_DEBUG_ID__WINDOWS}::gathering-informations";

## ==============================================



# /////////////////////////////////////////////////////////////////////////////////////////////// #
