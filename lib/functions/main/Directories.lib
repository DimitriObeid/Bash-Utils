#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : Directories.lib
# Description   : 
# Author(s)     : Dimitri Obeid
# Version       : 

# DO NOT EXECUTE IT DIRECTLY, instead, just source it by calling the "__BASH_UTILS_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### DIRECTORIES FUNCTIONS

## PROCESSING FUNCTIONS

# Separate processing steps displays from the rest of the main script with a line.

# Featured functions and files from the "functions" folder :
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function ProcessingDir()
{
    #***** Parameters *****
    local p_function=$1
    local p_parent=$2
    local p_name=$3
    
    #***** Variables *****
    local v_char='"'
    local v_path="$p_parent/$p_name"
    
    #***** Code *****
    # Arguments checking.
	CheckArgsMain_ProcessingDir "$p_function" "$p_parent" "$p_name"
    
	sleep "$PROJECT_STATUS_SLEEP_LINE"
    EchoMsg "$(DrawLine "$__COL_RESET" "$v_char")" '-n' 'nodate'
    EchoNewstep "Processing the $(DechoHighlight "$p_name") folder in the parent folder $(DechoHighlight "$p_parent")."
    Newline
    
    if "$p_function"; then
        EchoSuccess "End of processing the $(DechoHighlight "$p_name/") folder."
		EchoMsg "$(DrawLine "$__COL_RESET" "$v_char")" '-n' 'nodate'
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    else
        EchoError "End of processing the $(DechoHighlight "$p_name/") folder."
		EchoMsg "$(DrawLine "$__COL_RESET" "$v_char")" '-n' 'nodate'
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    fi
}

# -----------------------------------------------

## FOLDER CREATION FUNCTIONS

# Overwriting an existing directory's content

# Featured functions and files from the "functions" folder :
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
function OverwriteDir()
{
    #***** Parameters *****
    local p_path=$1
	local p_authorization=$2

    #***** Code *****
    # Checking first if the awaited arguments are given
    if ! CheckArgsMain_OverwriteDir "$p_path" "$p_authorization"; then return 1; fi
	
    # Checking second if the script is operating at the root directory.
    TriggerRootDirWarning "$p_path"

    EchoNewstep "A non-empty folder with exactly the same name ($(DechoHighlight "$p_name")) is already in the target folder $(DechoHighlight "$p_parent/")"
	EchoNewstep "Deleting the contents of the $(DechoHighlight "$v_path/") folder"
	Newline

	if [ "$p_authorization" = "true" ]; then
        # TODO : Si la CheckTxtFmt n'est pas initialisÃ©e.
        if [ -n "${p_path+x}" ]; then
            # WARNING ! DO NOT MODIFY THE FOLLOWING COMMAND, UNLESS YOU KNOW >>> EXACTLY <<< WHAT YOU DO !!!
            # WARNING ! IF YOU MODIFY THE NAME OF THE VARIABLES, PLEASE CHECK THE NAME OF EVERY
            # VARIABLES INTO THIS FUNCTION, OR ELSE THIS PROGRAM COULD OPERATE FROM THE ROOT DIRECTORY !!!!!!!!!

            # Check this link for more informations about this command --> https://github.com/koalaman/shellcheck/wiki/SC2115
            rm -rfv "${v_path/:?}/"*
            HandleErrors "$?" "UNABLE TO DELETE THE CONTENT OF THE $(KeepFormatting "$(DechoHighlight "$v_path/")") FOLDER." \
                "Please check the permissions of the targeted directory" "$v_path" "$v_path" \
                "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"

            EchoSuccess "Deletion of the contents of the folder $(DechoHighlight "$v_path/") performed successfully"
            Newline

			return 0
        else
            HandleErrors "1" "" "" "" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"

			return 1
        fi
	fi

    return 0
}



# Folder creation AND recursively assigning read and write rights to the user.
# When this function is called, if a log file is used in the project, the output of this function must be redirected either to the terminal AND the log file (2>&1 | tee -a "$FILE_LOG_PATH"), or to the log file only (>> "$FILE_LOG_PATH") after passing all the mandatory arguments. Otherwise, leave everything blank after passing the arguments.

# Featured functions and files from the "functions" folder :
#   - Echo.sh       -> EchoErrorTimer
#   - Echo.sh       -> EchoNewstepTimer
#   - Echo.sh       -> EchoSuccessTimer
#   - Headers.sh    -> DrawLine   
#   - Headers.sh    -> HandleErrors
function Makedir()
{
	#***** Parameters *****
	local p_parent=$1  # Emplacement of the currently processed directory's parent folder from the root directory.
	local p_name=$2    # Name of the folder to process (into its parent directory).

	#***** Variables *****
	local v_path="$p_parent/$p_name"	# Path of the file to process.

	#***** Code *****
	# Checking first if the awaited arguments are given
    if ! CheckArgsMain_Makedir "$p_parent" "$p_name"; then return 1; fi
    
    # Checking second if the script is operating at the root directory.
    if ! TriggerRootDirWarning "$v_path"; then return 1; fi
	
	# If the folder to create doesn't exists, ths script creates it with the help of the "mkdir" command.
	if [ ! -d "$v_path" ]; then
		EchoNewstep "Creating the $(DechoHighlight "$p_name") folder in the parent folder $(DechoHighlight "$p_parent/")."
		Newline

        mkdir -pv "$v_path"
        HandleErrors "$?" \
            "THE $(KeepFormatting "$(DechoHighlight "$p_name/")") FOLDER CANNOT BE CREATED IN THE PARENT FOLDER $(KeepFormatting "$(DechoHighlight "$p_parent/")") !" \
            "Please check the permissions of the targeted directory" "$v_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
        EchoSuccess "The $(DechoHighlight "$p_name") folder was successfully created in the $(DechoHighlight "$p_parent/") folder."
        Newline
        
        return 0

    # Else, if the folder to create already exists in its parent directory AND this folder already contains AT LEAST one file or folder.
	elif [ -d "$v_path" ] && [ "$(ls -A "$v_path")" ]; then
        OverwriteDir "$p_parent" "$p_name"
        if test "$?" -eq 0; then
            return 0
		else
            return 1
		fi

	# Else, if the folder to create already exists in its parent directory AND this folder is empty.
	elif [ -d "$v_path" ] && [ ! "$(ls -A "$v_path")" ]; then
		EchoSuccess "The $(DechoHighlight "$p_name/") folder already exists in the $(DechoHighlight "$p_parent/") folder and is empty."
		Newline

		return 0
    fi
}

# The function "CheckSTAT_LOG()" creates the log file and its path when the __BU_MAIN_STAT_LOG CheckTxtFmt's value is "true",
# but in case the value is "false", it's necessary to check if the project's temporary folder exists anyway.
function MkTmpDir()
{
    local lineno="$LINENO"; if [ ! -d "$__BU_MAIN_PROJECT_TMP_DIR_PATH" ]; then
        mkdir -p "$__BU_MAIN_PROJECT_TMP_DIR_PATH" ||
		{
			ChangeSTAT_ECHO "true" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
			
			HandleErrors "1" "THE $(CheckDirPathExists "$(DechoHighlight "$__BU_MAIN_PROJECT_TMP_DIR_PATH")") CANNOT BE CREATED !" \
            "Please check at the mentionned line in the mentionned file." "$__BU_MAIN_PROJECT_TMP_DIR_PATH" \
            "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$lineno"

			ChangeSTAT_ECHO "false" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

			return 1
		}
    
		return 0
	fi

	return 0
}

# -----------------------------------------------

## PATH PROCESSING

# Getting the name of a target directory without its path.
function GetDirectoryName()
{
    #***** Parameters *****
    local p_path=$1
    
    #***** Code *****
    CheckArgsMain_GetDirectoryName "$p_path"
    
    if [ -d "$p_path" ]; then
        shopt -s extglob            # enable +(...) glob syntax

        result=${p_path%%+(/)}      # trim however many trailing slashes exist
        result=${result##*/}        # remove everything before the last / that still remains

        echo -e "$result"

		return 0
    else
        HandleErrors "1" "THE PROVIDED PATH IS INCORRECT !" "Check if the provided path is correct." \
            "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-6 ))"
		
		return 1
    fi
}

# Checking if the directory's sub-folders paths passed as argument exists, then print its path.
function GetDirectoryPath()
{
    #***** Parameters *****
    local p_path=$1

    #***** Code *****
    CheckArgsMain_GetDirectoryPath "$p_path"

    if [ -d "$p_path" ]; then
        echo -e "$p_path"

		return 0
    else
        HandleErrors "1" "THE PROVIDED PATH IS INCORRECT !" "Please check if the provided path is correct." \
            "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-3 ))"

		return 1
    fi
}

# Getting parent folder's name only (without its full path from the root directory), then printing it.
function GetParentDirectoryName()
{
    #***** Parameters *****
    local p_path=$1         # Path of the child file or folder.
    local p_iterations=$2   # Number of iterations, corresponding to the number of folders to go up in the directory tree.

    #***** Code *****
    CheckArgsMain_GetParentDirectoryName "$p_path" "$p_iterations"

    if ! IsInt "$p_iterations"; then
        EchoWarning "$(DechoHighlight "${FUCNAME[0]}()") --> Warning : this function's third argument must be an integer."; p_iterations='1'
    fi

    if [ -z "$p_iterations" ] || [ "$p_iterations" -lt 1 ]; then
        p_iterations='1'
    fi

    for ((i=0; i<p_iterations; i++)); do
        local v_parent; v_parent="$( cd "$(dirname "$p_path")" > /dev/null 2>&1 \
            || {
                HandleErrors "1" "UNABLE TO GET THE PARENT DIRECTORY'S NAME" "Please check if the provided path is correct." "$p_path" \
                    "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO"; return 1
            }; pwd -P )"

        p_path="$v_parent"
    done

    shopt -s extglob            # enable +(...) glob syntax.
    result=${p_path%%+(/)}      # trim however many trailing slashes exist.
    result=${result##*/}        # remove everything before the last / that still remains.

    echo -e "$result"
}

# Getting parent folder's path from the root directory, then printing it
function GetParentDirectoryPath()
{
    #***** Parameters *****
    local p_path=$1         # Path of the child file or folder.
    local p_iterations=$2   # Number of iterations, corresponding to the number of folders to go up in the directory tree.

    #***** Code *****
    CheckArgsMain_GetParentDirectoryPath "$p_path" "$p_iterations"

    if [ -z "$p_iterations" ] || [ "$p_iterations" -lt 1 ]; then
        p_iterations='1'
    fi

    if [ -d "$p_path" ]; then
        for ((i=0; i<p_iterations; i++)); do
            local v_parent; v_parent="$( cd "$(dirname "$p_path")" > /dev/null 2>&1 \
                || {
                    HandleErrors "1" "UNABLE TO GET THE PARENT DIRECTORY'S NAME" "Please check if the provided path is correct." "$p_path" \
                        "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO"; return 1
                }; pwd -P )"

            p_path="$v_parent"
        done
        
        shopt -s extglob            # enable +(...) glob syntax.
        result=${p_path%%+(/)}      # trim however many trailing slashes exist.

        echo -e "$result"
    else
        local v_path_str=""
        local v_current_path="$p_path"

        for ((i=0; i<p_iterations; i++)); do
            local v_parent; v_parent="$( cd "$(dirname "$p_path")" > /dev/null 2>&1 \
                || {
                    HandleErrors "1" "UNABLE TO GET THE PARENT DIRECTORY'S NAME" "Please check if the provided path is correct." "$p_path" \
                        "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO"; return 1
                }; pwd -P )"
            
            local v_path_cut; v_path_cut="${v_parent##*/}"
            local v_path_str+="$v_path_cut/"

            # Removing the unnecessary folders.
            # WARNING !!!! USE THE "rmdir" COMMAND ONLY !!!!
            # DO NOT USE THE "rm -rf" COMMAND AT ALL, OR FILES AND FOLDERS COULD BE UNINTENTIONNALY ERASED !!!!
            rmdir "$v_current_path"; HandleErrors "$?" "UNABLE TO ERASE THE $(DechoHighlight "$v_current_path") NEWLY CREATED FOLDER !"
            
            local v_current_path="$v_parent"
        done

        ReverseStringWordsOrder "$v_path_str" '/'
    fi
}
