#!/usr/bin/env bash

# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### DIRECTORIES FUNCTIONS

## PROCESSING FUNCTIONS

# Separate processing steps displays from the rest of the main script with a line.

# Featured functions and files from the "functions" folder :
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function ProcessingDir
{
    #***** Parameters *****
    p_function=$1
    p_parent=$2
    p_name=$3
    
    #***** Variables *****
    v_char='"'
    v_path="$p_parent/$p_name"
    
    #***** Code *****
    # On commence par dessiner la première ligne du bloc.
	sleep "$PROJECT_STATUS_SLEEP_LINE"
    DrawLine "$COL_RESET" "$v_char"
    EchoNewstep "Processing the $(DechoN "$p_name") folder in the parent folder $(DechoN "$p_parent")."
    Newline
    
    eval "$p_function"
    
    if test "$?" -eq 0; then
        EchoSuccess "End of processing the $(DechoS "$v_path/") folder."
		DrawLine "$COL_RESET" "$v_char"
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    else
        EchoError "End of processing the $(DechoE "$path/") folder."
		DrawLine "$COL_RESET" "$v_char"
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    fi
}

# -----------------------------------------------

## FOLDER CREATION FUNCTIONS

# Overwriting an existing directory's content

# Featured functions and files from the "functions" folder :
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
function OverwriteDir
{
    #***** Parameters *****
    p_parent=$1
    p_name=$2
    
    #***** Variables *****
    v_path="$p_parent/$p_name"

    #***** Code *****
    EchoNewstep "A non-empty folder with exactly the same name ($(DechoN "$p_name")) is already in the target folder $(DechoN "$p_parent/")"
	EchoNewstep "Deleting the contents of the $(DechoN "$v_path/") folder"
	Newline
	
	# WARNING ! DO NOT MODIFY THE FOLLOWING COMMAND, UNLESS YOU KNOW EXACTLY WHAT YOU DO !!!
	# Check this link for more informations about this command --> https://github.com/koalaman/shellcheck/wiki/SC2115
    rm -rfv "${path/:?}/"*
    HandleErrors "$?" "UNABLE TO DELETE THE CONTENT OF THE $(DechoE "$v_path/") FOLDER." "Please check the permissions of the targeted directory" "$path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    EchoSuccess "Deletion of the contents of the folder $(DechoS "$v_path/") performed successfully"
    Newline

    return 0
}



# Folder creation AND recursively assigning read and write rights to the user.
# When this function is called, if a log file is used in the project, the output of this function must be redirected either to the terminal AND the log file (2>&1 | tee -a "$FILE_LOG_PATH"), or to the log file only (>> "$FILE_LOG_PATH") after passing all the mandatory arguments. Otherwise, leave everything blank after passing the arguments.

# Featured functions and files from the "functions" folder :
#   - Echo.sh       -> EchoErrorTimer
#   - Echo.sh       -> EchoNewstepTimer
#   - Echo.sh       -> EchoSuccessTimer
#   - Headers.sh    -> DrawLine   
#   - Headers.sh    -> HandleErrors
function Makedir
{
	#***** Parameters *****
	p_parent=$1		# Emplacement depuis la racine du dossier parent du dossier à traiter.
	p_name=$2		# Nom du dossier à traiter (dans son dossier parent).

	#***** Variables *****
	v_path="$parent/$name"	# Chemin du dossier à traiter.

	#***** Code *****
	# Si le dossier à traiter n'existe pas, alors le script le crée.
	if [ ! -d "$v_path" ]; then
		EchoNewstep "Creating the $(DechoN "$p_name") folder in the parent folder $(DechoN "$p_parent/")."
		Newline

		# On crée une variable nommée "lineno". Elle enregistre la valeur de la variable globale "$LINENO", qui enregistre le numéro de la ligne dans laquelle est est appelée dans un script.
        mkdir -pv "$v_path"
        HandleErrors "$?" "${FUNCNAME[0]} : THE $(DechoE "$p_name") FOLDER CANNOT BE CREATED IN THE PARENT FOLDER $(DechoE "$p_parent/") !" "" "$v_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
        EchoSuccess "The $(DechoS "$p_name") folder was successfully created in the $(DechoS "$p_parent/") folder."
        Newline
        
        return 0
            # On vérifie si le dossier a bien été créé en vérifiant le code de retour de la commande "mkdir" via la fonction "HandleErrors"

    # Sinon, si le dossier à créer existe déjà dans son dossier parent ET que ce dossier contient AU MOINS un fichier ou dossier.
	elif [ -d "$v_path" ] && [ "$(ls -A "$v_path")" ]; then
        OverwriteDir "$p_parent" "$p_name"
        if test "$?" -eq 0; then
            return 0
		else
            return 1
		fi

	# Sinon, si le dossier à créer existe déjà dans son dossier parent ET que ce dossier est vide.
	elif [ -d "$v_path" ] && [ ! "$(ls -A "$v_path")" ]; then
		EchoSuccess "The $(DechoS "$p_name") folder already exists in the $(DechoS "$p_parent/") folder and is empty."
		Newline

		return 0
    fi
}

# -----------------------------------------------

## PATH PROCESSING

# Getting parent folder's name only (without its full path from the root directory), then printing it.
function GetParentDirectoryName
{
    #***** Parameters *****
    p_path=$1

    #***** Code *****
    parent="$( cd "$(dirname "$p_path")" >/dev/null 2>&1 \
        || { HandleErrors "1" "UNABLE TO GET THE PARENT DIRECTORY'S PATH" "Check if the provided path is correct." "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME}" "$LINENO"; }; \
        pwd -P )"
    dirname="$parent"
    
    shopt -s extglob           # enable +(...) glob syntax
    result=${dirname%%+(/)}    # trim however many trailing slashes exist
    result=${result##*/}       # remove everything before the last / that still remains
    echo "$dirname"
}

# Getting parent folder's path from the root directory, then printing it
function GetParentDirectoryPath
{
    #***** Parameters *****
    p_path=$1

    #***** Code *****
    parent="$( cd "$(dirname "$p_path")" >/dev/null 2>&1 \
        || { HandleErrors "1" "UNABLE TO GET THE PARENT DIRECTORY'S NAME" "Check if the provided path is correct." "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO"; }; \
        pwd -P )"
    dirname="$parent"

    shopt -s extglob           # enable +(...) glob syntax
    result=${dirname%%+(/)}    # trim however many trailing slashes exist
    echo "$result"
}

# Getting the name of a directory without its path.
function GetDirectoryName
{
    #***** Parameters *****
    p_path=$1
    
    #***** Code *****
    if [ -z "$p_path" ]; then
        HandleErrors "1" "NO PATH ARGUMENT PASSED" "The ${FUNCNAME[0]} function takes a path as argument" "$(basename "${BASH_SOURCE[0]}")" "$(( LINENO-1 ))"
    else
        if [ -d "$p_path" ]; then
            shopt -s extglob            # enable +(...) glob syntax
            result=${p_path%%+(/)}      # trim however many trailing slashes exist
            result=${result##*/}        # remove everything before the last / that still remains
            echo "$dirname"
        else
            HandleErrors "1" "THE PATH PROVIDED FOR THE $(DechoE "$p_path") IS INCORRECT !" "Check if the provided path is correct." "$(basename "${BASH_SOURCE[0]}")"
        fi
    fi
}

# Checking if the directory's sub-folders paths passed as argument exists.
function GetDirectoryPath
{
    #***** Parameters *****
    p_path=$1

    #***** Code *****
    if [ -z "$p_path" ]; then
        HandleErrors "1" "NO PATH ARGUMENT PASSED" "The ${FUNCNAME[0]} function takes a path as argument" "$(basename "${BASH_SOURCE[0]}")" "$(( LINENO-1 ))"
    else
        if [ -d "$p_path" ]; then
            EchoSuccess "Got this subfolder : $(DechoS "$p_path")"
        else
            HandleErrors "1" "THE PATH PROVIDED FOR THE $(DechoE "$p_path") IS INCORRECT !" "Check if the provided path is correct." "$(basename "${BASH_SOURCE[0]}")"
        fi
    fi
}
