#!/usr/bin/env bash

# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### DIRECTORIES FUNCTIONS

## PROCESSING FUNCTIONS

# Separate processing steps displays from the rest of the main script with a line.

# Featured functions and files from the "functions" folder :
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function ProcessingDir
{
    #***** Parameters *****
    local p_function=$1
    local p_parent=$2
    local p_name=$3
    
    #***** Variables *****
    local v_char='"'
    local v_path="$p_parent/$p_name"
    
    #***** Code *****
    # Arguments checking.
    if [ -z "$p_function" ]; then
        HandleErrors "1" "NO FUNCTION NAME PASSED AS ARGUMENT" \
            "The function $(DechoE "${FUNCNAME[0]}") needs a function passed as first argument to work properly" \
            "$p_function" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    elif [ -z "$p_parent" ] || [ -z "$p_name" ]; then
        HandleErrors "1" "AT LEAST ONE OF THE TWO $(DechoE "${FUNCNAME[0]}")'S LAST ARGUMENTS IS MISSING" \
            "The function $(DechoE "${FUNCNAME[0]}") needs a function passed as first argument to work properly" \
            "$p_function" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    fi
    
	sleep "$PROJECT_STATUS_SLEEP_LINE"
    EchoMsg "$(DrawLine "$__COL_RESET" "$v_char")" '-n' 'nodate'
    EchoNewstep "Processing the $(DechoN "$p_name") folder in the parent folder $(DechoN "$p_parent")."
    Newline
    
    if "$p_function"; then
        EchoSuccess "End of processing the $(DechoS "$p_name/") folder."
		EchoMsg "$(DrawLine "$__COL_RESET" "$v_char")" '-n' 'nodate'
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    else
        EchoError "End of processing the $(DechoE "$p_name/") folder."
		EchoMsg "$(DrawLine "$__COL_RESET" "$v_char")" '-n' 'nodate'
		sleep "$PROJECT_STATUS_SLEEP_LINE"
		Newline
    fi
}

# -----------------------------------------------

## FOLDER CREATION FUNCTIONS

# Overwriting an existing directory's content

# Featured functions and files from the "functions" folder :
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
function OverwriteDir
{
    #***** Parameters *****
    local p_parent=$1
    local p_name=$2
    
    #***** Variables *****
    local v_path="$p_parent/$p_name"

    #***** Code *****
    EchoNewstep "A non-empty folder with exactly the same name ($(DechoN "$p_name")) is already in the target folder $(DechoN "$p_parent/")"
	EchoNewstep "Deleting the contents of the $(DechoN "$v_path/") folder"
	Newline
	
	# WARNING ! DO NOT MODIFY THE FOLLOWING COMMAND, UNLESS YOU KNOW >>> EXACTLY <<< WHAT YOU DO !!!
	# WARNING ! IF YOU MODIFY THE NAME OF THE VARIABLES, PLEASE CHECK THE NAME OF EVERY
	# VARIABLES INTO THIS FUNCTION, OR ELSE THIS PROGRAM WILL OPERATE FROM THE ROOT DIRECTORY !!!!!!!!!

	# Check this link for more informations about this command --> https://github.com/koalaman/shellcheck/wiki/SC2115
    rm -rfv "${v_path/:?}/"*
    HandleErrors "$?" "UNABLE TO DELETE THE CONTENT OF THE $(DechoE "$v_path/") FOLDER." \
        "Please check the permissions of the targeted directory" "$v_path" "$v_path" \
        "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    EchoSuccess "Deletion of the contents of the folder $(DechoS "$v_path/") performed successfully"
    Newline

    return 0
}



# Folder creation AND recursively assigning read and write rights to the user.
# When this function is called, if a log file is used in the project, the output of this function must be redirected either to the terminal AND the log file (2>&1 | tee -a "$FILE_LOG_PATH"), or to the log file only (>> "$FILE_LOG_PATH") after passing all the mandatory arguments. Otherwise, leave everything blank after passing the arguments.

# Featured functions and files from the "functions" folder :
#   - Echo.sh       -> EchoErrorTimer
#   - Echo.sh       -> EchoNewstepTimer
#   - Echo.sh       -> EchoSuccessTimer
#   - Headers.sh    -> DrawLine   
#   - Headers.sh    -> HandleErrors
function Makedir
{
	#***** Parameters *****
	local p_parent=$1  # Emplacement of the currently processed directory's parent folder from the root directory.
	local p_name=$2    # Name of the folder to process (into its parent directory).

	#***** Variables *****
	local v_path="$p_parent/$p_name"	# Path of the file to process.

	#***** Code *****
	# Checking first if the awaited arguments are given
    CheckArgs_Makedir "$p_parent" "$p_name"
	
	# If the folder to create doesn't exists, ths script creates it with the help of the "mkdir" command.
	if [ ! -d "$v_path" ]; then
		EchoNewstep "Creating the $(DechoN "$p_name") folder in the parent folder $(DechoN "$p_parent/")."
		Newline

        mkdir -pv "$v_path"
        HandleErrors "$?" "${FUNCNAME[0]} : THE $(DechoE "$p_name") FOLDER CANNOT BE CREATED IN THE PARENT FOLDER $(DechoE "$p_parent/") !" \
            "Please check the permissions of the targeted directory" "$v_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
        EchoSuccess "The $(DechoS "$p_name") folder was successfully created in the $(DechoS "$p_parent/") folder."
        Newline
        
        return 0

    # Else, if the folder to create already exists in its parent directory AND this folder already contains AT LEAST one file or folder.
	elif [ -d "$v_path" ] && [ "$(ls -A "$v_path")" ]; then
        OverwriteDir "$p_parent" "$p_name"
        if test "$?" -eq 0; then
            return 0
		else
            return 1
		fi

	# Else, if the folder to create already exists in its parent directory AND this folder is empty.
	elif [ -d "$v_path" ] && [ ! "$(ls -A "$v_path")" ]; then
		EchoSuccess "The $(DechoS "$p_name") folder already exists in the $(DechoS "$p_parent/") folder and is empty."
		Newline

		return 0
    fi
}

# -----------------------------------------------

## PATH PROCESSING

# Getting parent folder's name only (without its full path from the root directory), then printing it.
function GetParentDirectoryName
{
    #***** Parameters *****
    local p_path=$1

    #***** Code *****
    parent="$( cd "$(dirname "$p_path")" >/dev/null 2>&1 \
        || { 
            HandleErrors "1" "UNABLE TO GET THE PARENT DIRECTORY'S PATH" "Check if the provided path is correct." "$p_path" \
                "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))";
        }; pwd -P )"
    dirname="$parent"
    
    shopt -s extglob           # enable +(...) glob syntax
    result=${dirname%%+(/)}    # trim however many trailing slashes exist
    result=${result##*/}       # remove everything before the last / that still remains
    echo "$dirname"
}

# Getting parent folder's path from the root directory, then printing it
function GetParentDirectoryPath
{
    #***** Parameters *****
    local p_path=$1

    #***** Code *****
    parent="$( cd "$(dirname "$p_path")" >/dev/null 2>&1 \
        || {
            HandleErrors "1" "UNABLE TO GET THE PARENT DIRECTORY'S NAME" "Check if the provided path is correct." "$p_path" \
                "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO";
        }; pwd -P )"
    dirname="$parent"

    shopt -s extglob           # enable +(...) glob syntax
    result=${dirname%%+(/)}    # trim however many trailing slashes exist
    echo "$result"
}

# Getting the name of a target directory without its path.
function GetDirectoryName
{
    #***** Parameters *****
    local p_path=$1
    
    #***** Code *****
    if [ -z "$p_path" ]; then
        HandleErrors "1" "NO PATH ARGUMENT PASSED" "The $(DechoE "${FUNCNAME[0]}") function takes a path as argument" \
            "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    else
        if [ -d "$p_path" ]; then
            shopt -s extglob            # enable +(...) glob syntax
            result=${p_path%%+(/)}      # trim however many trailing slashes exist
            result=${result##*/}        # remove everything before the last / that still remains
            echo "$dirname"
        else
            HandleErrors "1" "THE PROVIDED PATH IS INCORRECT !" "Check if the provided path is correct." \
                "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-6 ))"
        fi
    fi
}

# Checking if the directory's sub-folders paths passed as argument exists, then print its path.
function GetDirectoryPath
{
    #***** Parameters *****
    local p_path=$1

    #***** Code *****
    if [ -z "$p_path" ]; then
        HandleErrors "1" "NO PATH ARGUMENT PASSED" "The $(DechoE "${FUNCNAME[0]}") function takes a path as argument" \
            "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
    else
        if [ -d "$p_path" ]; then
            echo "$p_path"
        else
            HandleErrors "1" "THE PROVIDED PATH IS INCORRECT !" "Check if the provided path is correct." \
                "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-3 ))"
        fi
    fi
}
