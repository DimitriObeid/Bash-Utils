#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : Permissions.lib
# Description   : 
# Author(s)     : Dimitri Obeid
# Version       : 

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### RECURSIVE PERMISSION AND OWNERSHIP PROCESSING

## RECURSIVE OWNERSHIP SWAPPING

# Calling the "chown" command to change recursively directory ownership

# Required functions and files into the "Bash-Utils/src/functions" folder :
#	- CheckRootEUID		-> Checkings.lib
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
#	- HandleErrors		-> Headers.lib
function ChownRec()
{
    #***** Paramètres *****
    local p_currentOwner=$1    # This parameter is used in the messages.
    local p_newOwner=$2
    local p_path=$3

    #***** Code *****
    # The "chown" command has to be used with super-user privileges,
    CheckRootEUID

    # If the path passed as argument doesn't exists.
    if [ ! -d "$p_path" ]; then
        HandleError "1" "" "" ""
    fi

    EchoNewstep "Recursive change of the ownership rights of the new folder $(DechoHighlight "$p_path/") from $(DechoHighlight "$p_currentOwner") to $(DechoHighlight "$p_newOwner")"
	Newline

    # On change les droits du fichier créé par le script.
	# Comme il est exécuté en mode super-utilisateur, tout dossier ou fichier créé appartient à l'utilisateur root.
	# Pour attribuer les droits de lecture, d'écriture et d'exécution (rwx) à l'utilisateur normal, on appelle
	# la commande chown avec pour arguments :
	#		- Le nom de l'utilisateur à qui donner les droits.
	#		- Le chemin du dossier cible.
	if chown -Rv "$p_newOwner" "$p_path"; then
		EchoSuccess "The rights of the $(DechoHighlight "$p_path/") folder have been successfully changed from $(DechoHighlight "$p_currentOwner") to $(DechoHighlight "$p_newOwner")"
		Newline

		return 0
	else
        EchoError "Unable to change the rights of the $(DechoHighlight "$p_path/") folder"
		Newline

		return 1
    fi
}


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### NON-RECURSIVE PERMISSION AND OWNERSHIP PROCESSING

## NON-RECURSIVE OWNERSHIP SWAPPING

# Fonctions d'attribution de propriété de fichier à l'utilisateur.

# Required functions and files into the "Bash-Utils/src/functions" folder :
#   - CheckRootEUID -> Checkings.lib
#   - EchoError     -> Echo.lib
#   - EchoNewstep   -> Echo.lib
#   - EchoSuccess   -> Echo.lib
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function Chown()
{
    #***** Parameters *****
    p_currentOwner=$1    # This parameter is used in the translated messages, stored into their own variables.
    p_newOwner=$2
    p_path=$3
    p_option=$4   # Recursive swapping or not.
    
    #***** Code *****
    # The "chown" command has to be used with super-user privileges,
    CheckRootEUID

    # If the path passed as argument doesn't exists.
    if [ -d "$p_path" ]; then
        EchoNewstep "Changing the ownership rights of the  $(DechoHighlight "$p_path/") folder from $(DechoHighlight "$p_currentOwner") to $(DechoHighlight "$p_newOwner")."
        Newline
        
        # Changing ownership recursively.
        case "$p_option" in
            'R')
                if chown -Rv "$p_newOwner" "$p_path"; then
                    EchoSuccess "The rights of the $(DechoHighlight "$p_path") folder have been successfully changed from $(DechoHighlight "$p_currentOwner") to $(DechoHighlight "$p_newOwner")"
                    Newline

                    return 0
                else
                    HandleErrors "1" "Unable to change the rights of the $(DechoHighlight "$p_path/") folder" "" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-7 ))"
                    Newline

                    return 1
                fi
                ;;
            '')
                # Changing ownership non-recursively.
                if chown -v "$p_newOwner" "$p_path"; then
                    EchoSuccess "The rights of the $(DechoHighlight "$p_path") folder have been successfully changed from $(DechoHighlight "$p_currentOwner") to $(DechoHighlight "$p_newOwner")"
                    Newline

                    return 0

                else
                    HandleErrors "1" "UNABLE TO CHANGE THE RIGHTS OF THE $(DechoHighlight "$p_path/") FOLDER" \
                        "Please run the script with the command $(DechoHighlight "bash -x $PROJECT_NAME") to check what happened" \
                        "$p_option" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-11 ))"
                    Newline

                    return 1
                fi
                ;;
            *)
                HandleError "1" "THE $(DechoHighlight "${FUNCNAME[0]}")'S FUNCTION $(DechoHighlight "$p_option") OPTION PASSED AS 4TH ARGUMENT IS NOT SUPPORTED" \
                    "The supported options for directory processing are :" "$p_option" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
                ;;
        esac
        
        
    else
        # Checking first if the path is a filepath. If not, then no correct path is passed as argument.
        if [ -f "$p_path" ]; then
            EchoNewstep "Changing the ownership rights of the  $(DechoHighlight "$p_path/") file from $(DechoHighlight "$p_currentOwner") to $(DechoHighlight "$p_newOwner")."
            Newline

            # Changing ownership
            if chown -v "$p_newOwner" "$p_path"; then
                EchoSuccess "The rights of the $(DechoHighlight "$p_path") file have been successfully changed from $(DechoHighlight "$p_currentOwner") to $(DechoHighlight "$p_newOwner")."
                Newline

                return 0
            else
                HandleErrors "$?" "Unable to change the rights of the $(DechoHighlight "$p_path") file !"
                Newline

                return 1
            fi
        else
            HandleErrors "1" "THE $(DechoHighlight "$p_path") FILE DOESN'T EXISTS" && return 1
        fi
    fi
}

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #
