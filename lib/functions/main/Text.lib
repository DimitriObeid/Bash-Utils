#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : Text.lib
# Description   : Functions specially made for text processing (cutting fields / characters, ).
# Author(s)     : Dimitri Obeid
# Version       : 

# DO NOT EXECUTE IT DIRECTLY, instead, just source it by calling the "__BASH_UTILS_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### 

## 

# Cut the date displayed before a string.
function CutDateFromString()
{
    #***** Parameters *****
    local p_string=$1

    #***** Code *****
    p_string="${p_string##*] }"; echo -e "$p_string"
}

# Cut the dash written before a command option call (to be improved).
function CutDashFromOption()
{
    #***** Parameters *****
    local p_string=$1

    #***** Code *****
    p_string="${p_string##*-}"; echo -e "$p_string"
}

# Cut every part of a string before and with the delimiter.
function CutFromCharacter()
{
    #***** Parameters *****
    p_target=$1         # string to process
    #   $2  --> delimiter
    p_iterations=$3     # iterations

    #***** Code *****
    if ! IsInt "$p_iterations"; then
        EchoWarning "$(DechoHighlight "${FUCNAME[0]}()") --> Warning : this function's third argument must be an integer."
    fi

    if [ "$p_iterations" -eq 0 ]; then
        p_iterations='1'
    fi

    for ((i=0; i<p_iterations; i++)); do
        #shellcheck disable=SC2001
        p_target="$(sed "s/^[^$2]*$2//" <<< "$p_target")"
        p_target="$p_target"

        echo "$p_target"
    done

    return 0
}

# Cut the last field of a string.
function CutLastFieldFromDelimiter()
{
    #***** Parameters *****
    #   $1  --> string to process
    #   $2  --> delimiter

    #***** Code *****
    "$1"="${1##*$2)}"; echo -ne "$1" && return 0
}

# Cut any part of a string after a delimiter.
function CutStringAfterDelim()
{
    #***** Parameters *****
    #   $1  --> string to process
    #   $2  --> delimiter
    #   $3  --> iterations

    #***** Code *****
    return
}

# Reverse words of a string according to a delimiter.

# Examples with the '|' and '/' delimiter:
# animal | big | car | donut    --> donut | car | big | animal
# /home/user/Documents          --> Documents/user/home
function ReverseStringWordsOrder()
{
    #***** Parameters *****
    #   $1  --> string to process
    #   $2  --> delimiter

    #***** Code *****
    echo -ne "$1" | tr "$2" '\n' | tac | tr '\n' "$2" && return 0
}
