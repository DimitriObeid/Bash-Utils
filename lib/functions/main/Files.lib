#!/usr/bin/env bash

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### TEXT FILES PROCESSING FUNCTIONS

# Separate processing steps displays from the rest of the main script with a line.

# Featured functions and files from the "functions" folder :
#   - DrawLine      -> Headers.lib
#   - HandleErrors  -> Headers.lib
function ProcessingFile
{
    #***** Parameters *****
    function=$1
    
    #***** Variables *****
    char="'"
    
    #***** Code *****
    if [ -z "$function" ]; then
        HandleErrors "1" "NO FUNCTION NAME PASSED AS ARGUMENT" \
            "The function $(DechoE "${FUNCNAME[0]}") needs a function passed as first argument to work properly" \
            "$function" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
    fi
    
	sleep "$__STAT_TIME_TXT"
    DrawLine "$__COL_RESET" "$char"
    EchoNewstep "Processing the $(DechoN "$name") file."
    Newline
    
    if "$function"; then
        EchoSuccess "End of processing the $(DechoS "$name") file"
		DrawLine "$__COL_RESET" "$char"
		sleep "$__STAT_TIME_TXT"
		Newline
    else
        EchoError "End of processing the $(DechoE "$name") file"
		DrawLine "$__COL_RESET" "$char"
		sleep "$__STAT_TIME_TXT"
		Newline
    fi
}

## OVERWRITING CONTENT

# Overwrite a file

# Featured functions and files from the "functions" folder :
#	- EchoError			-> Echo.lib
#	- EchoNewstep		-> Echo.lib
#	- EchoSuccess		-> Echo.lib
#	- Newline			-> Echo.lib
function OverwriteFile
{
    #***** Parameters *****
    p_path=$1
    
    #***** Code *****
    EchoNewstep "The $(DechoN "$p_path/") file already exists and is not empty."
	EchoNewstep "Overwriting data from file $(DechoN "$p_path/")"
	Newline

	true > "$p_path"
	HandleErrors "$?" "THE CONTENT OF THE $(DechoE "$p_path/") FILE HAD NOT BEEN OVERWRITTEN" "" "$p_path" \
        "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
	EchoSuccess "The content of the $(DechoS "$p_path/") file has been successfully overwritten"
	Newline

	return 0
}

# -----------------------------------------------

## FILE CREATION

# File creation function.
# LORS DE SON APPEL, LA SORTIE DE CETTE FONCTION DOIT ÊTRE REDIRIGÉE SOIT VERS LE TERMINAL ET LE FICHIER DE LOGS, SOIT VERS LE FICHIER DE LOGS UNIQUEMENT.

# Featured functions and files from the "functions" folder :
#   - DrawLine          -> Headers.lib
#   - EchoError         -> Echo.lib
#   - EchoNewstep       -> Echo.lib
#   - EchoSuccess       -> Echo.lib
#   - HandleErrors      -> Handles.lib
function Makefile
{
	#***** Paramètres *****
	p_parent=$1      # Emplacement depuis la racine du dossier parent du fichier à traiter.
	p_name=$2        # Nom du fichier à traiter (dans son dossier parent).

	#***** Autres variables *****
	p_path="$p_parent/$p_name"	# Chemin du fichier à traiter.

	#***** Code *****
	if [ -z "$p_parent" ] || [ -z "$p_name" ]; then
        HandleErrors "1" "AT LEAST AN ARGUMENT IS MISSING" \
            "The two awaited arguments for this function are the $(DechoE "parent directory") and the $(DechoE "name of the file to create")" \
            "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-3 ))"

	elif [ ! -d "$p_parent" ]; then
        HandleErrors "1" "THE $(DechoE "PARENT") ARGUMENT IS INVALID" "Check the name of the targeted directory in your code" \
            "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
	fi
	
	# If the file to create doesn't exists, ths script creates it with the help of the "touch" command.
	if [ ! -f "$p_path" ]; then
        EchoNewstep "Creating the $(DechoN "$p_name") file in the parent folder $(DechoN "$p_parent/")."

		touch "$p_path"
        # Testing if the file has been created by checking the return code of the "touch" command via the "HandleErrors" function.
        # An error may come from the fact that the user did not run the script in superuser mode, a script that tried to create a
        # file in a folder where the user is not allowed to create a file without superuser privileges.
        HandleErrors "$?" "THE $(DechoE "$p_name") FILE CANNOT BE CREATED IN THE PARENT FOLDER $(DechoE "$p_parent/")." \
            "Please check the permissions of the targeted directory" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-4 ))"
        EchoSuccess "The $(DechoS "$p_name") file was successfully created in the $(DechoS "$p_parent") folder."
        Newline
        
        return 0
	
	# Else, if the file to be created already exists AND it is NOT empty.
	elif [ -f "$p_path" ] && [ -s "$p_path" ]; then
        OverwriteFile "$p_path"
		return 0

	# Else, if the file to be created already exists AND it is empty.
	elif [ -f "$p_path" ] && [ ! -s "$p_path" ]; then
		EchoSuccess "The $(DechoS "$p_path/") file already exists in the $(DechoS "$p_parent/") folder and is empty."
		Newline

		return 0
	fi
}

# -----------------------------------------------

## FILE SOURCING

# Sourcing dependencies files.
function SourceFile
{
    #***** Parameters *****
    p_path=$1

    #***** Code *****
    if [ -f "$p_path" ]; then
        # shellcheck disable=SC1090
        if source "$p_path"; then
            EchoSuccess "Sourced file : $(DechoS "$p_path")"
        else
            HandleErrors "1" "UNABLE TO FIND THIS PATH" "" "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-5 ))"
        fi
    else
        HandleErrors "1" "UNABLE TO FIND THIS PATH" "Verify the path passed as argument" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-8 ))"
    fi
}

# -----------------------------------------------

## TEXT FILES PARSING

# Getting a specific line from a text file.
function GetLineFromTextFile
{
    #***** Parameters *****
    source=$1           # File to parse
    wanted_line=$2      # Line to get in the file
    
    #***** Variables *****
    i=0     # Line incrementer
    
    #***** Code *****
    cat "$source" | while read -r line; do
        # Incrementing the line incrementer variable's value...
        i=$(( i+1 ))
        
        # ... until it reaches the wanted line.
        if [ "$i" -eq "$wanted_line" ]; then
            # Creating a variable and storing the wanted line's text.
            FILE_GETTXTLINE="$line"
        fi
    done
}

# -----------------------------------------------


# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### ARCHIVES PROCESSING FUNCTIONS

## (UN)COMPRESSION FUNCTIONS

# 

# Featured functions and files from the "functions" folder :
#   - 
function Compress
{
    #***** Parameters *****
    cmd=$1      # Compression command.
    opts=$2     # Options of the compression command.
    p_path=$3     # Path to the file/folder to archivate.
    p_name=$4     # Archive's name (only used into displayed messages).
    
    #***** Code *****
    
    
    return 0
}

# Uncompressing archives according to the used compression method.

# Featured functions and files from the "functions" folder :
#   - HandleErrors      -> Handles.lib
#   - EchoSuccess       -> Echo.lib
#   - Newline           -> Echo.lib
function Uncompress
{
    #***** Paramètres *****
    cmd=$1      # Compression command.
    # TODO : Vérifier si cette procédure est bonne
    opts=$2     # Options of the compression command. (in case a command call is not mandatory, please leave an empty string as second argument while calling this function).
    p_path=$3     # Path to the l'archive to uncompress.
    p_name=$4     # Archive's name (only used into displayed messages).

    #***** Code *****
    # On exécute la commande de décompression en passant en arguments ses options et le chemin vers l'archive.
    "$cmd $opts $p_path"
    HandleErrors "$?" "${FUNCNAME[0]} : LA DÉCOMPRESSION DE L'ARCHIVE $(DechoE "$p_name") A ÉCHOUÉE"
    EchoSuccess "La décompression de l'archive $(DechoS "$p_name") s'est effectuée avec brio."
    Newline
    
    return 0
}
