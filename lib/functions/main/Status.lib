#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : CheckSTAT.lib
# Module        : Main
# Description   :
# Author(s)     : Dimitri Obeid
# Version       :

# ----------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# shellcheck disable=SC2154

# ----------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

    exit 1;
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### VARIABLES VALUES FUNCTIONS

## CHECKING VALUES

# Easy writing text function.
function BU::Main::Status::ConfEcho()
{
    #**** Parameters ****
    local p_file=$1;        # File where the function is called (mainly from the "BU::Main::StatusCheckSTAT<...>()" functions).
    local p_lineno=$2;      # Line where the function is called (mainly from the "BU::Main::StatusCheckSTAT<...>()" functions).
    local p_bad_value=$3;   # Bad value passed as "BU::Main::StatusCheckSTAT<...>()" function's argument.
    local p_var_name=$4     # Name of the variable that stores the bad value.

    # Shifting the same number of time as the former arguments number
    # to avoid including these arguments values in the allowed values array.
    shift 4;
    local pa_correctValues=("$@");

    #**** Variables ****
    local i=0;      # 

    #**** Code ****
    if [ -f "$__BU_MAIN_PROJECT_LOG_FILE_PATH" ]; then
        {
			BU::Main::Headers::DrawLine "$__BU_MAIN_TXT_CHAR_HEADER_LINE" "$__BU_MAIN_COLOR_TXT_ERROR";

			echo "AN ERROR OCCURED DURING THIS STATUS VARIABLE CHECKING --> $p_var_name    |    VALUE : $p_bad_value !!!";
			
			BU::Main::Headers::DrawLine "$__BU_MAIN_TXT_CHAR_HEADER_LINE" "$__BU_MAIN_COLOR_TXT_ERROR";
		} 2>&1 | tee -a "$__BU_MAIN_PROJECT_LOG_FILE_PATH";

    else
        BU::Main::Headers::DrawLine "$__BU_MAIN_TXT_CHAR_HEADER_LINE" "$__BU_MAIN_COLOR_TXT_ERROR";

        echo "AN ERROR OCCURED DURING A STATUS VARIABLE CHECKING !!!";

        BU::Main::Headers::DrawLine "$__BU_MAIN_TXT_CHAR_HEADER_LINE" "$__BU_MAIN_COLOR_TXT_ERROR";
    fi

    echo -ne "${__BU_MAIN_COLOR_TXT_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}In ${__BU_MAIN_COLOR_TXT_HIGHLIGHT}$p_file${__BU_MAIN_COLOR_TXT_ERROR}, line ${__BU_MAIN_COLOR_TXT_HIGHLIGHT}$p_lineno${__BU_MAIN_COLOR_TXT_ERROR} --> " >&2;
    echo -e "Error : the ${__BU_MAIN_COLOR_TXT_HIGHLIGHT}$p_var_name${__BU_MAIN_COLOR_TXT_ERROR} variable's value is incorrect.${__BU_MAIN_COLOR_TXT_RESET}" >&2;

    if [ -z "$p_bad_value" ]; then
        echo >&2; echo -e "${__BU_MAIN_COLOR_TXT_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}Bad value :${__BU_MAIN_COLOR_TXT_YELLOW} An empty string.${__BU_MAIN_COLOR_TXT_RESET}" >&2;
    else
        echo >&2; echo -e "${__BU_MAIN_COLOR_TXT_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}Bad value : ${__BU_MAIN_COLOR_TXT_VAR}$p_bad_value.${__BU_MAIN_COLOR_TXT_RESET}" >&2;
    fi

    echo >&2; echo -e "${__BU_MAIN_COLOR_TXT_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}The allowed values are :${__BU_MAIN_COLOR_TXT_RESET}" >&2;

    # Displaying the list of every allowed arguments.
    for val in "${pa_correctValues[@]}"; do
        i=$(( i+1 ));

        # If an empty argument is allowed.
        if [ -z "$val" ]; then
            echo -e "${__BU_MAIN_COLOR_TXT_ERROR}$i/${#pa_correctValues[@]}  --> ${__BU_MAIN_COLOR_TXT_ORANGE}An empty argument.${__BU_MAIN_COLOR_TXT_RESET}" >&2;
        else
            echo -e "${__BU_MAIN_COLOR_TXT_ERROR}$i/${#pa_correctValues[@]}  --> ${__BU_MAIN_COLOR_TXT_HIGHLIGHT}$val${__BU_MAIN_COLOR_TXT_RESET}" >&2;
        fi
    done

    echo >&2; BU::Main::Errors::ExitError 1;
}

# -----------------------------------------------

## CHECKINGS

# Checking the "$__BU_MAIN_STAT_DEBUG" status variable's value.
function BU::Main::Status::CheckSTAT_DEBUG()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("true" "false");

    #**** Code ****
    if [ "${__BU_MAIN_STAT_DEBUG,,}" != "true" ] && [ "${__BU_MAIN_STAT_DEBUG,,}" != "false" ]; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_DEBUG" "__BU_MAIN_STAT_DEBUG" "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Check the "$__BU_MAIN_STAT_DECHO" status variable's value.
function BU::Main::Status::CheckSTAT_DECHO()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("authorize" "forbid" "restrict");

    #**** Code ****
    if [ "${__BU_MAIN_STAT_DECHO,,}" != "authorize" ] && [ "${__BU_MAIN_STAT_DECHO,,}" != "forbid" ] && [ "${__BU_MAIN_STAT_DECHO,,}" != "restrict" ]; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_DECHO" "__BU_MAIN_STAT_DECHO" "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Check the "$__BU_MAIN_STAT_ECHO" status variable's value.
function BU::Main::Status::CheckSTAT_ECHO()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("true" "false");

    #**** Code ****
    if [ "${__BU_MAIN_STAT_ECHO,,}" != "true" ] && [ "${__BU_MAIN_STAT_ECHO,,}" != "false" ]; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_ECHO" "__BU_MAIN_STAT_ECHO" "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_ERROR" status variable's value.
function BU::Main::Status::CheckSTAT_ERROR()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("" "fatal");

    #**** Code ****
    if [ -n "$__BU_MAIN_STAT_ERROR" ] && [ "${__BU_MAIN_STAT_ERROR,,}" != "fatal" ]; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_ERROR" "__BU_MAIN_STAT_ERROR" "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_INITIALIZING" status variable's value.
function BU::Main::Status::CheckSTAT_INITIALIZING()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("true" "false");

    #**** Code ****
    if [ "${__BU_MAIN_STAT_INITIALIZING,,}" != "true" ] && [ "${__BU_MAIN_STAT_INITIALIZING,,}" != "false" ]; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_INITIALIZING" "__BU_MAIN_STAT_INITIALIZING" "${pa_correctValues[@]}"; return 1;
	fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_LOG" status variable's value.
function BU::Main::Status::CheckSTAT_LOG()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("true" "false");

    #**** Code ****
    if [ "${__BU_MAIN_STAT_LOG,,}" != "true" ] && [ "${__BU_MAIN_STAT_LOG,,}" != "false" ]; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_LOG" "__BU_MAIN_STAT_LOG" "${pa_correctValues[@]}"; return 1;

    elif [ "$__BU_MAIN_STAT_LOG" = "true" ] && [ "$__BU_MAIN_STAT_INITIALIZING" = 'false' ] && [ ! -f "$__BU_MAIN_PROJECT_LOG_FILE_PATH" ]; then
        BU::Main::Files::CreateProjectLogFile || return 1;
	fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_LOG_REDIRECT" status variable's value.
function BU::Main::Status::CheckSTAT_LOG_REDIRECT()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("" "log" "tee");

    #**** Code ****
    if [ -n "$__BU_MAIN_STAT_LOG_REDIRECT" ] && [ "${__BU_MAIN_STAT_LOG_REDIRECT,,}" != 'log' ] && [ "${__BU_MAIN_STAT_LOG_REDIRECT,,}" != 'tee' ]; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_LOG_REDIRECT" "__BU_MAIN_STAT_LOG_REDIRECT" "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_OPERATE_ROOT" status variable's value.
function BU::Main::Status::CheckSTAT_OPERATE_ROOT()
{
	#**** Parameters ****
	local p_file=$1;
	local p_lineno=$2;

	#**** Variables ****
	local pa_correctValues=("authorized" "forbidden" "restricted");

	#**** Code ****
	if [ "${__BU_MAIN_STAT_OPERATE_ROOT,,}" != "authorized" ] && [ "${__BU_MAIN_STAT_OPERATE_ROOT,,}" != "forbidden" ] && [ "${__BU_MAIN_STAT_OPERATE_ROOT,,}" != "restricted" ]; then
		BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_OPERATE_ROOT" "__BU_MAIN_STAT_OPERATE_ROOT" "${pa_correctValues[@]}"; return 1;
	fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_TIME_HEADER" status variable's value.
function BU::Main::Status::CheckSTAT_TIME_HEADER()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("${__BU_MAIN_COLOR_TXT_VAR}An integer or a floating number");

    #**** Code ****
    # If the status variable's value is not a float or an integer.
    if ! BU::IsFloat "$__BU_MAIN_STAT_TIME_HEADER"; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_TIME_HEADER" "__BU_MAIN_STAT_TIME_HEADER" "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_TIME_NEWLINE" status variable's value.
function BU::Main::Status::CheckSTAT_TIME_NEWLINE()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("${__BU_MAIN_COLOR_TXT_VAR}An integer or a floating number");

    #**** Code ****
    # If the status variable's value is not a float or an integer.
    if ! BU::IsFloat "$__BU_MAIN_STAT_TIME_HEADER"; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_TIME_NEWLINE" "__BU_MAIN_STAT_TIME_NEWLINE" "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_TIME_TXT" status variable's value.
function BU::Main::Status::CheckSTAT_TIME_TXT()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("${__BU_MAIN_COLOR_TXT_ORANGE}An integer or a floating number");

    #**** Code ****
    # If the status variable's value is not a float or an integer.
    if ! BU::IsFloat "$__BU_MAIN_STAT_TIME_TXT"; then
        BU::Main::Status::ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_TIME_TXT" "__BU_MAIN_STAT_TIME_TXT" "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_TXT_FMT" status variable's value.
function BU::Main::Status::CheckSTAT_TXT_FMT()
{
    #**** Parameters ****
    p_file=$1;
    p_lineno=$2;

    #**** Variables ****
    local pa_correctValues=("true" "false");

    #**** Code ****
    if [ "${__BU_MAIN_STAT_TXT_FMT,,}" != "true" ] && [ "${__BU_MAIN_STAT_TXT_FMT,,}" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_TXT_FMT" '__BU_MAIN_STAT_TXT_FMT' "${pa_correctValues[@]}"; return 1;
    fi

    return 0;
}

# Checking the "$__BU_MAIN_STAT_USER_OS" status variable's value.
# This function is empty now, as the OS handling is still in work.
function BU::Main::Status::CheckSTAT_USER_OS()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;
    shift 2;

    # local pa_supported_os=("$@")    # Array storing the list of the operating systems which support a feature to be deployed.

    #**** Variables ****

    #**** Code ****
    return 0;
}


# Checking all the project's status variables values if multiple values had been modified.
function BU::Main::Status::CheckProjectStatusVars()
{
    #**** Parameters ****
    local p_file=$1;
    local p_lineno=$2;

    #**** Code ****
    # Processing first the "__BU_MAIN_STAT_LOG_REDIRECT" variable, to make sure the following error messages will be correctly displayed if another error happened.
    BU::Main::Status::CheckSTAT_LOG_REDIRECT   "$p_file" "$p_lineno" || return 1;
    BU::Main::Status::CheckSTAT_DECHO          "$p_file" "$p_lineno" || return 1;
    BU::Main::Status::CheckSTAT_ECHO           "$p_file" "$p_lineno" || return 1;
    BU::Main::Status::CheckSTAT_DEBUG          "$p_file" "$p_lineno" || return 1;
    BU::Main::Status::CheckSTAT_ERROR          "$p_file" "$p_lineno" || return 1;
	BU::Main::Status::CheckSTAT_INITIALIZING   "$p_file" "$p_lineno" || return 1;
    BU::Main::Status::CheckSTAT_LOG            "$p_file" "$p_lineno" || return 1;
	BU::Main::Status::CheckSTAT_OPERATE_ROOT   "$p_file" "$p_lineno" || return 1;
	BU::Main::Status::CheckSTAT_TIME_HEADER    "$p_file" "$p_lineno" || return 1;
	BU::Main::Status::CheckSTAT_TIME_NEWLINE   "$p_file" "$p_lineno" || return 1;
    BU::Main::Status::CheckSTAT_TIME_TXT       "$p_file" "$p_lineno" || return 1;
    BU::Main::Status::CheckSTAT_TXT_FMT        "$p_file" "$p_lineno" || return 1;
    BU::Main::Status::CheckSTAT_USER_OS        "$p_file" "$p_lineno" || return 1;

	return 0;
}

# -----------------------------------------------

## CHANGING VALUES MORE EASILY

# Positionnal parameters :
#   $1  --> new value.
#   $2  --> file where the change was made.
#   $3  --> line where the change was made.

# Changing the "$__BU_MAIN_STAT_DEBUG" status variable's value.
function BU::Main:Status::ChangeSTAT_DEBUG           { __BU_MAIN_STAT_DEBUG="$1";            BU::Main::Status::CheckSTAT_DEBUG          "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_DECHO" status variable's value.
function BU::Main:Status::ChangeSTAT_DECHO           { __BU_MAIN_STAT_DECHO="$1";            BU::Main::Status::CheckSTAT_DECHO          "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_ECHO" status variable's value.
function BU::Main:Status::ChangeSTAT_ECHO            { __BU_MAIN_STAT_ECHO="$1";             BU::Main::Status::CheckSTAT_ECHO           "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_ERROR" status variable's value.
function BU::Main:Status::ChangeSTAT_ERROR           { __BU_MAIN_STAT_ERROR="$1";           BU::Main::Status::CheckSTAT_ERROR           "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_INITIALIZING" status variable's value.
# WARNING : Do NOT change it's value from 'false' to 'true'. Otherwise, expect bugs.
function BU::Main:Status::ChangeSTAT_INITIALIZING    {
	if [ "$__BU_MAIN_STAT_INITIALIZING" = 'false' ] && [ 'true' = "$1" ]; then
		BU::EchoWarning "WARNING : It's strongly discouraged to change the $(BU::DechoHighlight "$__BU_MAIN_STAT_INITIALIZING") value from $(BU::DechoHighlightVar 'false') to $(BU::DechoHighlightVar 'true')"; return 1
	else
		__BU_MAIN_STAT_INITIALIZING="$1";     BU::Main::Status::CheckSTAT_INITIALIZING      "$2" "$3" || return 1;
	fi; return 0; }

# Changing the "$__BU_MAIN_STAT_LOG" status variable's value.
function BU::Main:Status::ChangeSTAT_LOG            { __BU_MAIN_STAT_LOG="$1";              BU::Main::Status::CheckSTAT_LOG             "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_LOG_REDIRECT" status variable's value.
function BU::Main:Status::ChangeSTAT_LOG_REDIRECT   { __BU_MAIN_STAT_LOG_REDIRECT="$1";     BU::Main::Status::CheckSTAT_LOG_REDIRECT    "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_OPERATE_ROOT" status variable's value.
function BU::Main:Status::ChangeSTAT_OPERATE_ROOT   { __BU_MAIN_STAT_OPERATE_ROOT="$1";     BU::Main::Status::CheckSTAT_OPERATE_ROOT    "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_TIME_HEADER" status variable's value.
function BU::Main:Status::ChangeSTAT_TIME_HEADER    { __BU_MAIN_STAT_TIME_HEADER="$1";      BU::Main::Status::CheckSTAT_TIME_HEADER     "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_TIME_NEWLINE" status variable's value.
function BU::Main:Status::ChangeSTAT_TIME_NEWLINE   { __BU_MAIN_STAT_TIME_NEWLINE="$1";     BU::Main::Status::CheckSTAT_TIME_NEWLINE    "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_TIME_TXT" status variable's value.
function BU::Main:Status::ChangeSTAT_TIME_TXT       { __BU_MAIN_STAT_TIME_TXT="$1";         BU::Main::Status::CheckSTAT_TIME_TXT        "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_TXT_FMT" status variable's value.
function BU::Main:Status::ChangeSTAT_TXT_FMT        { __BU_MAIN_STAT_TXT_FMT="$1";          BU::Main:Status::CheckSTAT_TXT_FMT          "$2" "$3" || return 1; return 0; }

# -----------------------------------------------

## EASIER CHECKING BOOLEAN VALUES

# Checking if the debug mode is active.
function BU::Main::Status::CheckStatIsDebugging()     { if [ "$__BU_MAIN_STAT_DEBUG"          = 'true' ]; then return 0; else return 1; fi; }

# Checking if the "BU::Echo<...>()" functions can call the "BU::CheckProjectLogStatus()" function without provoking an infinite loop.
function BU::Main::Status::CheckStatIsBackupEchoing() { if [ "$__BU_MAIN_STAT_ECHO"           = 'true' ]; then return 0; else return 1; fi; }

# Checking if the library is into its initialization process ($__BU_MAIN_STAT_INITIALIZING).
function BU::Main::Status::CheckStatIsInitializing()  { if [ "$__BU_MAIN_STAT_INITIALIZING"   = "true" ]; then return 0; else return 1; fi; }

# Checking if the log redirection mode is active.
function BU::Main::Status::CheckStatIsLogging()       { if [ "$__BU_MAIN_STAT_LOG"            = 'true' ]; then return 0; else return 1; fi; }

# Checking if the initialization logs can be printed on the terminal.
function BU::Main::Status::CheckStatIsPrintingInit()  { if [ "$__BU_MAIN_STAT_PRINT_INIT_LOG" = 'true' ]; then return 0; else return 1; fi; }

# Checking if the text formatting is allowed.
function BU::Main::Status::CheckStatAllowFormatting() { if [ "$__BU_MAIN_STAT_TXT_FMT"        = 'true' ]; then return 0; else return 1; fi; }
