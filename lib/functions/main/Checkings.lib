#!/usr/bin/env bash

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !"; echo
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !"
    echo -e "Use this script only by sourcing it in your project script."; echo

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### VARIABLES VALUES CHECKING

## NUMBER VALUES

# Checking floating value.
function IsFloat()
{
    #***** Parameters *****
    local p_value=$1

    #***** Code *****
    CheckArgsMain_IsArgcNot0 "$p_value"

    if [[ "$p_value" =~ ^[+-]?[0-9]+\.?[0-9]*$ ]]; then
        return 0
    else
        return 1
    fi
}

# Checking floating and integer value.
function IsFloatInt()
{
    #***** Parameters *****
    local p_value=$1

    #***** Code *****
    CheckArgsMain_IsArgcNot0 "$p_value"

    if [[ "$p_value" =~ ^([0-9]+\.?|[0-9]*\.[0-9]+)$ ]]; then
        return 0
    else
        return 1
    fi
}

# Checking integer value.
function IsInt()
{
    #***** Parameters *****
    local p_value=$1

    #***** Code *****
    CheckArgsMain_IsArgcNot0 "$p_value"

    if [[ "$p_value" =~ ^[+-]?[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# -----------------------------------------------

## STRING VALUES

# Checking if value is an alphabetic string (not any number allowed)
function IsAlpha()
{
    #***** Parameters *****
    local p_value=$1
    
    #***** Code *****
    CheckArgsMain_IsArgcNot0 "$p_value"

    if [[ "$p_value" =~ [A-Z] ]]; then
        return 0
    else
        return 1
    fi
}

# Checking if vialue is an aplhanumeric string.
function IsAlphaNum()
{
    #***** Parameters *****
    local p_value=$1

    #***** Code *****
    CheckArgsMain_IsArgcNot0 "$p_value"

    if [[ "$p_value" =~ [^a-zA-Z0-9\ ] ]]; then
        return 0
    else
        return 1
    fi
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### DIFFERENT CHECKINGS

## CHECKING FOR IDENTIFIANTS

# Checking if the current effective UID (EUID) is not equal to 0 (root user's EUID).

# Required functions and files :
#   - HandleErrors      --> From this file.
function CheckRootEUID()
{
    if [ "$EUID" -ne 0 ]; then
        HandleErrors "1" "YOU NEED ROOT USER'S PRIVILEGES TO PERFORM THIS ACTION !" "Please launch your script with super-user privileges." \
            "EUID = 0" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
    fi
}

# -----------------------------------------------

## INITIALIZATION CHECKINGS

# Checking if the library is into its initialization process.
function CheckInitialization()
{
    if [ "$__INIT_IS_INITIALIZING" = "true" ]; then
        return 0
    else
        return 1
    fi
}


# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### PATHS CHECKING

## DIRECTORIES PATHS CHECKING

# Checking for an existent directory path (for the "HandleErrors()" function mainly).
function CheckDirPathExists()
{
    #***** Parameters *****
    p_path=$1               # Path of the (in)existent directory.

    #***** Code *****
    if [ ! -f "$p_path" ]; then
        Decho_FMT_BI "<missing directory path>"
    fi
}

# -----------------------------------------------

## FILE PATHS CHECKING

# Checking for an existent file path (for the "HandleErrors()" function mainly).
function CheckFilePathExists()
{
    #***** Parameters *****
    p_path=$1               # Path of the (in)existent file.

    #***** Code *****
    if [ ! -f "$p_path" ]; then
        Decho_FMT_BI "<missing file path>"
    fi
}

# Checking for "$PROJECT_LOG_PATH"

# Required functions and files :
function CheckProjectLogPath()
{
    if [ -z "$__BU_PROJECT_LOG_FILE_PATH" ]; then
        echo -ne "${__BU_COLOR_ERROR}IN $(DechoHighlight "$(basename "${BASH_SOURCE[0]}")"), function $(DechoHighlight "${FUNCNAME[0]}"), LINE $(DechoHighlight "$(( LINENO-1 ))") --> " >&2
        echo -e "FATAL ERROR : NO PATH PROVIDED INTO THE $(DechoHighlight "PROJECT_LOG_PATH") VARIABLE" >&2
        echo -e "Please add the path as argument.${__BU_COLOR_RESET}" >&2; echo >&2
        ExitError

    elif [ ! -f "$__BU_PROJECT_LOG_FILE_PATH" ]; then
        echo -ne "${__BU_COLOR_ERROR}IN $(DechoHighlight "$(basename "${BASH_SOURCE[0]}")"), FUNCTION $(DechoHighlight "${FUNCNAME[0]}"), LINE $(DechoHighlight "$(( LINENO-1 ))") --> " >&2
        echo -e "FATAL ERROR : BAD PATH PROVIDED INTO THE $(DechoHighlight "PROJECT_LOG_PATH") VARIABLE" >&2
        echo -e "Please correct the path passed as argument.${__BU_COLOR_RESET}" >&2; echo >&2
        ExitError

    fi
}

# Checking for project's log file's status, then write the wanted text with 'echo' command's parameters.

# Accepted arguments : "nodate", '<an empty string>'
function CheckProjectLogStatus()
{
    #***** Parameters *****
    local p_string=$1       # String to display.
    local p_option=$2       # "echo" command options.
    shift 2

    local p_extraArgs=("$@")    # More processing arguments (like the processing of a whole line-long string).

    #***** Variables *****
    local v_errorEcho
		v_errorEcho="${__BU_COLOR_ERROR}Unable to write into the $(DechoHighlight "$__BU_PROJECT_LOG_FILE_PATH") file.${__BU_COLOR_RESET}"
	
	local v_warning_array_value
		v_warning_array_value="${__BU_COLOR_WARNING}Warning : incorrect argument given as extra argument array in $(DechoHighlight "${BASH_SOURCE[0]}"), function $(DechoHighlight "${FUNCNAME[0]}") --> $val${__BU_COLOR_RESET}"
    
    #**** Code *****
    CheckProjectLogPath
    CheckSTAT_LOG           "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckSTAT_LOG_REDIRECT  "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckSTAT_TIME_TXT      "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

    # If a log file exists AND if "$__STAT_LOG" value is "false" AND if "$__STAT_LOG_REDIRECT" has a redirection value.
    if [ -f "$__BU_PROJECT_LOG_FILE_PATH" ] && [ "$__STAT_LOG" = "true" ] && [ -n "$__STAT_LOG_REDIRECT" ]; then

        # If messages must be redirected in the log file only ("$__STAT_LOG_REDIRECT" value is equal to "log")
        if [ "$__STAT_LOG_REDIRECT" = "log" ]; then

            for val in "${p_extraArgs[@]}"; do

                # If the "nodate" value is passed as argument.
                if [ "$val" = "nodate" ]; then
                    case "$p_option" in
                        '-n')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$p_string")
                            else
                                echo -ne "$p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }                            
                            fi
                            ;;
                        '')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$p_string")
                            else
                                echo -e "$p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }                            
                            fi
                            ;;
                    esac

                # Else, if no argument is passed in "$p_extraArgs" parameter array.
                elif [ "$val" = '' ]; then
                    case "$p_option" in
                        '-n')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$__BU_TIME_DATE_DISPLAY $p_string")
                            else
                                echo -ne "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            fi
                            ;;
                        '')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$__BU_TIME_DATE_DISPLAY $p_string")
                            else
                                echo -e "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            fi
                            ;;
                    esac
                # Else, if an unsupported option is passed (note for myself : the extra args checking
                # "for" loop (for val in "${p_extraArgs[@]}"; do) is still running (for the "log" option)).
                else
                    case "$p_option" in
                        '-n')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$__BU_TIME_DATE_DISPLAY $p_string")
                                CheckProjectLogStatus "$v_warning_array_value" '-n' '' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            else
                                echo -ne "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                CheckProjectLogStatus "$v_warning_array_value" '-n' '' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            fi
                            ;;
                        '')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$__BU_TIME_DATE_DISPLAY $p_string")
                                CheckProjectLogStatus "$v_warning_array_value" '-n' '' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            else
                                echo -e "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                CheckProjectLogStatus "$v_warning_array_value" '-n' '' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            fi
                            ;;
                    esac
                fi

            done

        # Else, if messages must be redirected in the log file AND to the terminal ("$__STAT_LOG_REDIRECT" value is equal to "tee")
        elif [ "$__STAT_LOG_REDIRECT" = "tee" ]; then

            for val in "${p_extraArgs[@]}"; do

                # If the "nodate" value is passed as argument.
                if [ "$val" = "nodate" ]; then
                    case "$p_option" in
                        '-n')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$p_string")
                            else
                                echo -ne "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            fi
                            ;;
                        '')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$p_string")
                            else
                                echo -e "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            fi
                            ;;
                    esac

                # Else, if no argument is passed in "$p_extraArgs" parameter array.
                elif [ "$val" = '' ]; then
                    case "$p_option" in
                    '-n')
                        if CheckInitialization; then
                            __INIT_STR_ARRAY+=("$__BU_TIME_DATE_DISPLAY $p_string")
                        else
                            echo -ne "$p_string"
                            echo -ne "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                        fi
                        ;;
                    '')
                        if CheckInitialization; then
                            __INIT_STR_ARRAY+=("$__BU_TIME_DATE_DISPLAY $p_string")
                        else
                            echo -e "$p_string"
                            echo -e "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                        fi
                        ;;
                    esac

                # Else, if an unsupported option is passed (note for myself : the extra args checking
                # "for" loop (for val in "${p_extraArgs[@]}"; do) is still running (for the "tee" option)).
                else
                    case "$p_option" in
                        '-n')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$__BU_TIME_DATE_DISPLAY $p_string")
                                CheckProjectLogStatus "$v_warning_array_value" '-n' '' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            else
                                echo -ne "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                CheckProjectLogStatus "$v_warning_array_value" '-n' '' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            fi
                            ;;
                        '')
                            if CheckInitialization; then
                                __INIT_STR_ARRAY+=("$__BU_TIME_DATE_DISPLAY $p_string")
                                CheckProjectLogStatus "$v_warning_array_value" '-n' '' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            else
                                echo -e "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                                CheckProjectLogStatus "$v_warning_array_value" '-n' '' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { echo >&2; echo -e "$v_errorEcho" >&2; echo >&2; ExitSourced; }
                            fi
                            ;;
                    esac
                fi
            done
            
            sleep "$__STAT_TIME_TXT"
        fi

    # Else, if no log file exists OR if "$__STAT_LOG" value is "false" OR if "$__STAT_LOG_REDIRECT" has no redirection value. 
    else
        case "$p_option" in
			'-n')
				echo -ne "$p_string"
				;;
			'')
				echo -e "$p_string"
				;;
		esac

        sleep "$__STAT_TIME_TXT"
	fi
}

# Check project related file presence, or create this file.
function CheckProjectRelatedFile()
{
	#***** Parameters *****
	p_path=$1

	#***** Code *****
	if [ -f "$p_path" ]; then
        if [ -s "$p_path" ]; then
            true > "$p_path"
        fi
    else
        if [ ! -d "$(GetParentDirectoryPath "$p_path")" ]; then
            EchoNewstep "Creating the $(DechoHighlight "$(GetParentDirectoryPath "$p_path")") temporary folder."

            mkdir -p "$(GetParentDirectoryPath "$p_path")" || HandleErrors "$?" "UNABLE TO CREATE THE $(DechoHighlight "$(GetParentDirectoryPath "$p_path")") FOLDER !" "" "$(GetParentDirectoryPath "$p_path")" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"

            EchoSuccess "Successfully created the $(DechoHighlight "$(GetParentDirectoryPath "$p_path")") parent folder."
        fi

        EchoNewstep "Creating the $(DechoHighlight "$p_path") project's file."

        touch "$p_path"

        HandleErrors "$?" "UNABLE TO CREATE THE $(DechoHighlight "$p_path") PROJECT'S FILE !" "" "$p_path" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"
            
        EchoSuccess "Successfully created the $(DechoHighlight "$p_path") project's file."
    fi
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### TEXT CHECKINGS

## FORMATTING CHECKINGS

# Checking if the project's color code file exists or not.
function CheckDecho()
{
    #***** Code *****
    if [ -z "${__BU_PROJECT_COLOR_CODE+x}" ] || [ "$__STAT_TXT_FMT" = "false" ]; then
        return 1

    elif [ -n "${__BU_PROJECT_COLOR_CODE+x}" ] && [ "$__BU_PROJECT_COLOR_CODE" = '' ]; then
        __BU_PROJECT_COLOR_CODE="$__BU_COLOR_RESET"
    else
        return 0
	fi
}

# Checking if the "$__STAT_TXT_FMT" status variable's value is "true".
function CheckFmt()
{
    if [ "$__STAT_TXT_FMT" = "true" ]; then
        # Formatting text with the tput command or directly with the backslash escapes.
        tput $1 || echo -e "$2"
        
        return 0
    else
        return 1
    fi
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### ERRORS HANDLING FUNCTIONS

## EXIT HANDLING

# Handling exit command from sourced files, as it's impossible to properly exit the script from these.
function ExitError()
{
    # In case the "exit" command didn't worked, the program has to be killed.
    CheckSTAT_EXIT_CODE "$(basename "${BASH_SOURCE[0]}")" "$LINENO"; exit "$__STAT_EXIT_CODE"; kill "$$"
}

# -----------------------------------------------

## SCRIPT'S ERRORS HANDLING

# Handling command outputs.
# Featured functions and files from the "basis" category :
#   - 
function HandleErrors()
{
	#***** Paramètres *****
	local p_returnCode=$1     # Return code of the last command executed. If you didn't launched any command before calling this function, you can pass any number different of '0' as first argument.
	local p_errorString=$2    # Chaîne de caractères du type d'erreur à afficher.
	local p_adviceString=$3   # Chaîne de caractères affichants un conseil pour orienter l'utilisateur vers la meilleure solution en cas de problème.
    local p_badValue=$4       # Incorrect value which caused the error.
	local p_file=$5           # The name of the file where the error occured.
	local p_function=$6       # The name of the function where the error occured.
	local p_lineno=$7         # Ligne à laquelle le message d'erreur s'est produite.

    #***** Variables *****
    local v_hdrString
	
	if [ -n "$p_function" ]; then
		v_hdrString="$(echo -e "IN $(DechoHighlight "$p_file"), FUNCTION $(DechoHighlight "$p_function"), LINE $(DechoHighlight "$p_lineno") -->")"
	else
		v_hdrString="$(echo -e "IN $(DechoHighlight "$p_file"), LINE $(DechoHighlight "$p_lineno") -->")"
	fi

	# ***** Code *****
	CheckSTAT_ERROR "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

	if [ "$p_returnCode" -eq 0 ]; then
        return
    else
        if [ "$__STAT_LOG_REDIRECT" = "log" ]; then
            __STAT_LOG_REDIRECT="tee"; CheckSTAT_LOG_REDIRECT "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
        fi

        if [ -n "$__STAT_ERROR" ] && [ "$__STAT_ERROR" = "fatal" ]; then
            HeaderRed "$v_hdrString FATAL ERROR : ${p_errorString^^}" >&2
        else
            HeaderRed "$v_hdrString ERROR : ${p_errorString^^}" >&2
        fi

        if [ -z "$p_adviceString" ]; then
            EchoError "No advice to give."; Newline >&2
        else
            EchoError "$(DechoHighlight "Advice") : $p_adviceString" >&2; Newline >&2
        fi
            
        if [ -z "$p_badValue" ]; then
            EchoError "Value(s) that caused this error : $(DechoOrange 'no value') OR $(DechoOrange 'an unknown error')"; Newline >&2
        else
            EchoError "Value(s) that caused this error : $(DechoHighlight "$p_badValue")"; Newline >&2
        fi

        if [ "$__STAT_ERROR" = "fatal" ]; then
            EchoError "Stopping the execution of $(DechoHighlight "$(basename "$0")")."; Newline >&2
            ExitError "$__STAT_EXIT_CODE"
        else
			# Calling the function that processes the given answer.
			CaseRead_HandleErrors
        fi
    fi
}

# -----------------------------------------------

