#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : Checkings.lib
# Description   : 
# Author(s)     : Dimitri Obeid
# Version       : 

# DO NOT EXECUTE IT DIRECTLY, instead, just source it by calling the "__BASH_UTILS_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### VARIABLES VALUES CHECKING

## NUMBER VALUES

# Checking floating value.
function IsFloat()
{
    if [[ "$1" =~ ^[+-]?[0-9]+\.?[0-9]*$ ]]; then
        return 0
    else
        return 1
    fi
}

# Checking floating and integer value.
function IsFloatInt()
{
    if [[ "$1" =~ ^([0-9]+\.?|[0-9]*\.[0-9]+)$ ]]; then
        return 0
    else
        return 1
    fi
}

# Checking integer value.
function IsInt()
{
    if [[ "$1" =~ [0-9] ]]; then
        return 0
    else
        return 1
    fi
}

# Checking integer value.
function IsInt2()
{
    if [[ "$1" =~ ^[+-]?[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# -----------------------------------------------

## STRING VALUES

# Checking if value is an alphabetic string (not any number allowed)
function IsAlpha()
{
    if [[ "$1" =~ [A-Z] ]]; then
        return 0
    else
        return 1
    fi
}

# Checking if value is an aplhanumeric string.
function IsAlphaNum()
{
    if [[ "$1" =~ [^a-zA-Z0-9\ ] ]]; then
        return 0
    else
        return 1
    fi
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### DIFFERENT CHECKINGS

## CHECKING FOR IDENTIFIANTS

# Checking if the current effective UID (EUID) is not equal to 0 (root user's EUID).

# Required functions and files :
#   - HandleErrors      --> From this file.
function CheckRootEUID()
{
    if [ "$EUID" -ne 0 ]; then
        HandleErrors "1" "YOU NEED ROOT USER'S PRIVILEGES TO PERFORM THIS ACTION !" "Please launch your script with super-user privileges." \
            "EUID = 0" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"

        return 1
    fi
}

# -----------------------------------------------

## INITIALIZATION CHECKINGS

# Checking if the library is into its initialization process.
function CheckIsInitializing()
{
    if [ "$__INIT_IS_INITIALIZING" = "true" ]; then
        return 0
    else
        return 1
    fi
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### PATHS CHECKING

## DIRECTORIES PATHS CHECKING

# Checking for an existent directory path (for the "HandleErrors()" function mainly).
function CheckDirPathExists()
{
    #***** Parameters *****
    p_path=$1               # Path of the (in)existent directory.

    #***** Code *****
    if [ ! -f "$p_path" ]; then
        DechoHighlight "<missing directory path>"   # Since this function should be called into a string, it's better to use a formatting function.
    fi
}

# -----------------------------------------------

## FILES PATHS CHECKING

# Checking for an existent file path (for the "HandleErrors()" function mainly).
function CheckFilePathExists()
{
    #***** Parameters *****
    p_path=$1               # Path of the (in)existent file.

    #***** Code *****
    if [ ! -f "$p_path" ]; then
        DechoHighlight "<missing file path>"        # Since this function should be called into a string, it's better to use a formatting function.
    fi
}

# Checking for "$__BU_PROJECT_LOG_FILE_PATH"

# Required functions and files :
function CheckProjectLogPath()
{
    if [ -z "$__BU_PROJECT_LOG_FILE_PATH" ]; then
        echo -ne "${__BU_COLOR_ERROR}IN $(DechoHighlight "$(basename "${BASH_SOURCE[0]}")"), function $(DechoHighlight "${FUNCNAME[0]}"), LINE $(DechoHighlight "$(( LINENO-1 ))") --> ${__BU_COLOR_RESET}" >&2
        echo -e "${__BU_COLOR_ERROR}FATAL ERROR : NO PATH PROVIDED INTO THE $(DechoHighlight "__BU_PROJECT_LOG_FILE_PATH") VARIABLE${__BU_COLOR_RESET}" >&2
        echo -e "${__BU_COLOR_ERROR}Please add the path as argument.${__BU_COLOR_RESET}" >&2; echo >&2

        ExitError

    elif [ ! -f "$__BU_PROJECT_LOG_FILE_PATH" ]; then
        echo -ne "${__BU_COLOR_ERROR}IN $(DechoHighlight "$(basename "${BASH_SOURCE[0]}")"), FUNCTION $(DechoHighlight "${FUNCNAME[0]}"), LINE $(DechoHighlight "$(( LINENO-1 ))") --> ${__BU_COLOR_RESET}" >&2
        echo -e "${__BU_COLOR_ERROR}FATAL ERROR : BAD PATH PROVIDED INTO THE $(DechoHighlight "__BU_PROJECT_LOG_FILE_PATH") VARIABLE${__BU_COLOR_RESET}" >&2
        echo -e "${__BU_COLOR_ERROR}Please correct the path passed as argument, or check if the file was created before.${__BU_COLOR_RESET}" >&2; echo >&2
        echo -e "${__BU_COLOR_ERROR}Incorrect value : $(DechoHighlight "$__BU_PROJECT_LOG_FILE_PATH")" >&2; echo >&2

        ExitError

    fi
}

# Checking for project's log file's status, then write the wanted text with 'echo' command's parameters.

# Accepted arguments : 'nodate', '<an empty string>'
function CheckProjectLogStatus()
{
    #***** Parameters *****
    local p_string=$1       # String to display.
    local p_option=$2       # "echo" command options.
    shift 2

    local pa_extraArgs=("$@")    # More processing arguments (like the processing of a whole line-long string).

    #***** Variables *****
	# WARNING : DO NOT call any "Echo<...>()" function from the "main/Echo.lib" file, as they all call the "CheckProjectLogStatus()" function.

	# Also, DO NOT call any "Decho<...>()" function, as they call the "HandleErrors()" function in case of a bad value passed as array of argument,
	# which also calls this same ""CheckProjectLogStatus() function.

    # If you need to call a function here, please verify if it doesn't calls the "CheckProjectLogStatus()" function,
    # nor any function called by the function you want to add, or else set the "$__BU_STAT_ECHO" status CheckTxtFmt value to "true" BEFORE calling the wanted function.

    local v_bu_stat_decho_old="$__BU_STAT_DECHO"; ChangeSTAT_DECHO "restrict" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

    local v_redirectionError
		v_redirectionError="$(DechoHighlight "${FUNCNAME[0]}()") --> Error : unable to write into the $(DechoHighlight "$__BU_PROJECT_LOG_FILE_PATH") file.\nRedirection option --> "

	local v_warning_array_value
		v_warning_array_value="$(DechoHighlight "${FUNCNAME[0]}()") --> Warning : incorrect argument given as extra argument array in $(DechoHighlight "${BASH_SOURCE[0]}"), function $(DechoHighlight "${FUNCNAME[0]}()").\nValue --> $(DechoHighlight "$val")\nLine -->"
    
    #**** Code *****
    if [ "$__BU_STAT_LOG" = "true" ]; then
        CheckProjectLogPath
    fi

    # Setting the "$__BU_STAT_ECHO" status CheckTxtFmt's value to "true", in case an error occurs during a function call, where the "CheckProjectLogStatus()" function or any other function that calls it might be called.
    ChangeSTAT_ECHO "true"  "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

    CheckSTAT_LOG           "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckSTAT_LOG_REDIRECT  "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckSTAT_TIME_TXT      "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

    # If a log file exists AND if "$__BU_STAT_LOG" value is "false" AND if "$__BU_STAT_LOG_REDIRECT" has a redirection value.
    if [ -f "$__BU_PROJECT_LOG_FILE_PATH" ] && [ "$__BU_STAT_LOG" = "true" ]; then

        # If messages must be redirected in the log file only ("$__BU_STAT_LOG_REDIRECT" value is equal to "log").
        if [ "$__BU_STAT_LOG_REDIRECT" = "log" ]; then

            for val in "${pa_extraArgs[@]}"; do

                # If the 'nodate' value is passed as argument.
                if [ "$val" = 'nodate' ]; then
                    case "$p_option" in
                        '-n' | 'n')
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$p_string" "$(CutDashFromOption "$p_option")"
                            else
                                echo -ne "$p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }                            
                            fi
                            ;;
                        '' | *)
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$p_string"
                            else
                                echo -e "$p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }                            
                            fi
                            ;;
                    esac

                # Else, if no argument is passed in "$pa_extraArgs" parameter array.
                elif [ -z "$val" ]; then
                    case "$p_option" in
                        '-n' | 'n')
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string" "$(CutDashFromOption "$p_option")"
                            else
                                echo -ne "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                            fi
                            ;;
                        '' | *)
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string"
                            else
                                echo -e "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                            fi
                            ;;
                    esac
                # Else, if an unsupported option is passed (note for myself : the extra args checking.
                # "for" loop (for val in "${pa_extraArgs[@]}"; do) is still running (for the "log" option)).
                else
                    case "$p_option" in
                        '-n' | 'n')
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string" "$(CutDashFromOption "$p_option")"
                                EchoWarning "$v_warning_array_value $(DechoHighlight "$LINENO")" "$p_option" 'nodate'; Newline
							else
                                echo -ne "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                                EchoWarning "$v_warning_array_value $(DechoHighlight "$LINENO")" "$p_option" 'nodate' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
							fi; Newline
                            ;;
                        '' | *)
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string"
                                EchoWarning "$v_warning_array_value $(DechoHighlight "$LINENO")" "$p_option" 'nodate' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
							else
                                echo -e "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                                EchoWarning "$v_warning_array_value $(DechoHighlight "$LINENO")" "$p_option" 'nodate' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "log")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
							fi
                            ;;
                    esac
                fi

            done

            #
            ChangeSTAT_DECHO "$v_bu_stat_decho_old" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

			# Resetting the "$__BU_STAT_ECHO" status CheckTxtFmt's value to false, since the "CheckProjectLogStatus()" function's execution is over.
			ChangeSTAT_ECHO "false" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
		
			return 0

        # Else, if messages must be redirected in the log file AND to the terminal ("$__BU_STAT_LOG_REDIRECT" value is equal to "tee").
        elif [ "$__BU_STAT_LOG_REDIRECT" = "tee" ]; then

            for val in "${pa_extraArgs[@]}"; do

                # If the 'nodate' value is passed as argument.
                if [ "$val" = 'nodate' ]; then
                    case "$p_option" in
                        '-n' | 'n')
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$p_string" "$(CutDashFromOption "$p_option")"
                            else
                                echo -ne "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                            fi
                            ;;
                        '' | *)
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string"
                            else
                                echo -e "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                            fi
                            ;;
                    esac

                # Else, if no argument is passed in "$pa_extraArgs" parameter array.
                elif [ -z "$val" ]; then
                    case "$p_option" in
                    '-n' | 'n')
                        if CheckIsInitializing; then
                            InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string" "$(CutDashFromOption "$p_option")"
                        else
                            echo -ne "$p_string"
                            echo -ne "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                        fi
                        ;;
                    '' | *)
                        if CheckIsInitializing; then
                            InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string"
                        else
                            echo -e "$p_string"
                            echo -e "$__BU_TIME_DATE_DISPLAY $p_string" >> "$__BU_PROJECT_LOG_FILE_PATH" || { EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                        fi
                        ;;
                    esac

                # Else, if an unsupported option is passed (note for myself : the extra args checking.
                # "for" loop (for val in "${pa_extraArgs[@]}"; do) is still running (for the "tee" option)).
                else
                    case "$p_option" in
                        '-n' | 'n')
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string" "$(CutDashFromOption "$p_option")"
                                EchoWarning "$v_warning_array_value $(DechoHighlight "$LINENO")" "$p_option" 'nodate' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
							else
                                echo -ne "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                                EchoWarning "$v_warning_array_value $(DechoHighlight "$LINENO")" "$p_option" 'nodate' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
							fi; Newline
                            ;;
                        '' | *)
                            if CheckIsInitializing; then
                                InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string"
                                EchoWarning "$v_warning_array_value $(DechoHighlight "$LINENO")" "$p_option" 'nodate' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
							else
                                echo -e "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
                                EchoWarning "$v_warning_array_value $(DechoHighlight "$LINENO")" "$p_option" 'nodate' 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH" || { EchoMsg '' "$p_option" '' >&2; EchoError "$v_redirectionError $(DechoHighlight "tee")\nLine --> $(DechoHighlight "$LINENO")" "$p_option" ''; EchoMsg '' "$p_option" '' >&2; ExitError "1"; }
							fi
                            ;;
                    esac
                fi
            done
            
            sleep "$__BU_STAT_TIME_TXT"
			
			#
			ChangeSTAT_DECHO "$v_bu_stat_decho_old" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

			# Resetting the "$__BU_STAT_ECHO" status CheckTxtFmt's value to false, since the "CheckProjectLogStatus()" function's execution is over.
			ChangeSTAT_ECHO "false" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
		
			return 0
        else
            case "$p_option" in
                '-n' | 'n')
                    if CheckIsInitializing; then
                        InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string" "$(CutDashFromOption "$p_option")"
                    else
                        echo -ne "$p_string"
                    fi
                    ;;
                '' | *)
                    if CheckIsInitializing; then
                        InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string"
                    else
                        echo -e "$p_string"
                    fi
                    ;;
            esac

        sleep "$__BU_STAT_TIME_TXT"

        #
        ChangeSTAT_DECHO "$v_bu_stat_decho_old" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

		# Resetting the "$__BU_STAT_ECHO" status CheckTxtFmt's value to false, since the "CheckProjectLogStatus()" function's execution is over.
		ChangeSTAT_ECHO "false" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
		
		return 0

        fi

    # Else, if no log file exists OR if "$__BU_STAT_LOG" value is "false" OR if "$__BU_STAT_LOG_REDIRECT" has no redirection value. 
    else
        case "$p_option" in
            '-n' | 'n')
                if CheckIsInitializing; then
                    InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string" "$(CutDashFromOption "$p_option")"
                else
                    echo -ne "$p_string"
                fi
                ;;
            '' | *)
                if CheckIsInitializing; then
                    InitializerAddInitStrArrayVal "$__BU_TIME_DATE_DISPLAY $p_string"
                else
                    echo -e "$p_string"
                fi
                ;;
        esac

        sleep "$__BU_STAT_TIME_TXT"

        #
        ChangeSTAT_DECHO "$v_bu_stat_decho_old" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

		# Resetting the "$__BU_STAT_ECHO" status CheckTxtFmt's value to false, since the "CheckProjectLogStatus()" function's execution is over.
		ChangeSTAT_ECHO "false" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
		
		return 0
	fi

	# Resetting the "$__BU_STAT_ECHO" status CheckTxtFmt's value to false, since the "CheckProjectLogStatus()" function's execution is over.
	ChangeSTAT_ECHO "false" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

	return 0
}

# Check project related file presence, or create this file.
function CheckProjectRelatedFile()
{
	#***** Parameters *****
	local p_parent=$1   # Name of the folder to process (into its parent directory).
	local p_child=$2  	# Name of the file or folder to process (into its parent directory).
	local p_type=$3		# Type of data to create (d = directory, f = file).

	#***** Variables *****
    local v_path="$p_parent/$p_child"

	#***** Code *****
	if ! CheckArgsMain_CheckProjectRelatedFile "$p_parent" "$p_child" "$p_type"; then return 1; fi

	if [ "$p_type" = 'f' ]; then
		if [ -f "$v_path" ]; then
			if [ -s "$v_path" ]; then
				true > "$v_path" || { HandleSmallErrors 'E' "$(DechoHighlight "${FUNCNAME[0]}()") --> Error : unable to overwrite this $(DechoHighlight "$__BU_PROJECT_NAME") project's file --> $(DechoHighlight "$(CheckFilePathExists "$v_path")")" 'E'; return 1; }
			fi

			return 0
		else
			if [ ! -d "$p_parent" ]; then
                mkdir -p "$p_parent" || { HandleSmallErrors 'E' "$(DechoHighlight "${FUNCNAME[0]}()") --> Error : unable to create this $(DechoHighlight "$__BU_PROJECT_NAME") project's file's parent folder --> $(DechoHighlight "$(CheckDirPathExists "$p_parent")")" 'E'; return 1; }
			fi

			touch "$v_path" || { HandleSmallErrors 'E' "$(DechoHighlight "${FUNCNAME[0]}()") --> Error : unable to create this $(DechoHighlight "$__BU_PROJECT_NAME") project's file --> $(DechoHighlight "$(CheckFilePathExists "$v_path")")" 'E'; return 1; }

			return 0
		fi

    elif [ "$p_type" = 'd' ]; then
		if [ -d "$v_path" ]; then
			return 0
		else
			mkdir -p "$v_path" || { HandleSmallErrors 'E' "$(DechoHighlight "${FUNCNAME[0]}()") --> Error : unable to create this $(DechoHighlight "$__BU_PROJECT_NAME") project's folder --> $(DechoHighlight "$(CheckDirPathExists "$v_path")")" 'E'; return 1; }

			return 0
		fi
    fi
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### TEXT CHECKINGS

## FORMATTING CHECKINGS

# Checking if the project's color code file exists or not.

# WARNING ! DO NOT CALL ANY "Decho<...>()" FUNCTION HERE, OR THE SCRIPT WILL LOOP FOREVER !!!
function CheckDecho()
{
    #***** Code *****
    if [ "$__BU_STAT_TXT_FMT" = "false" ] || [ ! -f "$__BU_PROJECT_COLOR_CODE_FILE_PATH" ] || [ "$__BU_STAT_DECHO" ]; then
        return 1
	fi
	
    if [ -f "$__BU_PROJECT_COLOR_CODE_FILE_PATH" ] && [ "$(cat "$__BU_PROJECT_COLOR_CODE_FILE_PATH")" = '' ]; then
        echo "$__BU_COLOR_RESET" > "$__BU_PROJECT_COLOR_CODE_FILE_PATH" || \
        {
            HandleSmallErrors "${__BU_COLOR_HIGHLIGHT}${FUNCNAME[0]}()${__BU_COLOR_WARNING}--> Warning : Unable to write any color code into the ${__BU_COLOR_HIGHLIGHT}$__BU_PROJECT_COLOR_CODE_FILE_PATH${__BU_COLOR_WARNING} file." 'R' ''

            return 1
        }

        return 0
    else
        return 0
	fi
}

# Check if the "$__BU_STAT_ECHO" status variable's value is set to "true".
function CheckEcho()
{
    if [ "$__BU_STAT_ECHO" = "true" ] || [ "$__BU_STAT_ECHO" = "true" ]; then
        return 0
    else
        return 1
    fi
}

# Checking if the "$__BU_STAT_TXT_FMT" status value is set to "true".
function CheckTextFormat()
{
    #***** Parameters *****
    #   $1  -> "tput" command's text formatting option.
    #   $2  -> Corresponding ANSI escape sequence (useful if the "tput" command is not detected or unavailable).

    #***** Code *****
    if [ "$__BU_STAT_TXT_FMT" = "true" ]; then
        if [ -n "$1" ]; then
			if command -v "tput" &> /dev/null; then
				# Formatting text with the tput command or directly with the backslash escapes.
				tput "$1" || echo -ne "\e[$2m"

				return 0
			else
				echo -ne "\e[$2m"; return 0
			fi

        # In case there's no value passed as first argument (like if the wanted tput option is unknown), the script only echoes its ANSI escape sequence.
        else
            echo -ne "\e[$2m"

            return 0
        fi

    else
        return 1
    fi
}

# -----------------------------------------------
