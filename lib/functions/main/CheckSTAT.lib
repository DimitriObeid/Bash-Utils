#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : CheckSTAT.lib
# Description   : 
# Author(s)     : Dimitri Obeid
# Version       : 

# DO NOT EXECUTE IT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### VARIABLES VALUES FUNCTIONS

## CHECKING VALUES

# Easy writing text function.
function ConfEcho()
{
    #***** Parameters *****
    local p_file=$1;
    local p_lineno=$2;
    local p_badVal=$3;
    local p_varVal=$4

    # Shifting the same number of time as the former arguments number
    # to avoid including these arguments values in the allowed values array.
    shift 4
    local pa_correctValues=("$@")

    #***** Variables *****
    local i=0

    #***** Code *****
    __BU_MAIN_STAT_ECHO="true"; __BU_MAIN_STAT_LOG="false"; __BU_MAIN_STAT_LOG_REDIRECT="";

    if [ "$__BU_MAIN_STAT_TRANSLATED" = 'false' ]; then
        if [ -f "$__BU_MAIN_PROJECT_LOG_FILE_PATH" ]; then { DrawLine "$__BU_MAIN_COLOR_ERROR" "$__BU_MAIN_TXT_CHAR_HEADER_LINE"; echo "AN ERROR OCCURED DURING A STATUS VARIABLE CHECKING !!!"; DrawLine "$__BU_MAIN_COLOR_ERROR" "$__BU_MAIN_TXT_CHAR_HEADER_LINE" } 2>&1 | tee -a "$__BU_MAIN_PROJECT_LOG_FILE_PATH"
        else DrawLine "$__BU_MAIN_COLOR_ERROR" "$__BU_MAIN_TXT_CHAR_HEADER_LINE"; echo "AN ERROR OCCURED DURING A STATUS VARIABLE CHECKING !!!"; DrawLine "$__BU_MAIN_COLOR_ERROR" "$__BU_MAIN_TXT_CHAR_HEADER_LINE"; fi

        echo -ne "${__BU_MAIN_COLOR_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}In ${__BU_MAIN_COLOR_HIGHLIGHT}$p_file${__BU_MAIN_COLOR_ERROR}, line ${__BU_MAIN_COLOR_HIGHLIGHT}$p_lineno${__BU_MAIN_COLOR_ERROR} --> " >&2
        echo -e "Error : the ${__BU_MAIN_COLOR_HIGHLIGHT}$p_varVal${__BU_MAIN_COLOR_ERROR} variable's value is incorrect.${__BU_MAIN_COLOR_RESET}" >&2

        if [ -z "$p_badVal" ]; then
            echo >&2; echo -e "${__BU_MAIN_COLOR_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}Bad value :${__BU_MAIN_COLOR_YELLOW} An empty string.${__BU_MAIN_COLOR_RESET}" >&2
        else
            echo >&2; echo -e "${__BU_MAIN_COLOR_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}Bad value : ${__BU_MAIN_COLOR_HIGHLIGHT}$p_badVal.${__BU_MAIN_COLOR_RESET}" >&2
        fi

        echo >&2; echo -e "${__BU_MAIN_COLOR_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}The allowed values are :${__BU_MAIN_COLOR_RESET}" >&2

        # Displaying the list of every allowed arguments.
        for val in "${pa_correctValues[@]}"; do
            i=$(( i+1 ))

            # If an empty argument is allowed.
            if [ -z "$val" ]; then
                echo -e "${__BU_MAIN_COLOR_ERROR}$i/${#pa_correctValues[@]}  --> ${__BU_MAIN_COLOR_ORANGE}An empty argument.${__BU_MAIN_COLOR_RESET}" >&2
            else
                echo -e "${__BU_MAIN_COLOR_ERROR}$i/${#pa_correctValues[@]}  --> ${__BU_MAIN_COLOR_HIGHLIGHT}$val${__BU_MAIN_COLOR_RESET}" >&2
            fi
        done
    else
        if [ -f "$__BU_MAIN_PROJECT_LOG_FILE_PATH" ]; then
            DrawLine "$__BU_MAIN_COLOR_ERROR" "$__BU_MAIN_TXT_CHAR_HEADER_LINE"; echo "$__BU_MAIN_MSG_CHECKSTAT_ConfEcho_HEADER_ERROR" 2>&1 | tee -a "$__BU_MAIN_PROJECT_LOG_FILE_PATH"
        else
            DrawLine "$__BU_MAIN_COLOR_ERROR" "$__BU_MAIN_TXT_CHAR_HEADER_LINE"; echo "$__BU_MAIN_MSG_CHECKSTAT_ConfEcho_HEADER_ERROR"
        fi

        echo -ne "" >&2
        echo -e "Error : the ${__BU_MAIN_COLOR_HIGHLIGHT}$p_varVal${__BU_MAIN_COLOR_ERROR} variable's value is incorrect.${__BU_MAIN_COLOR_RESET}" >&2

        if [ -z "$p_badVal" ]; then
            echo >&2; echo -e "${__BU_MAIN_COLOR_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}Bad value :${__BU_MAIN_COLOR_YELLOW} An empty string.${__BU_MAIN_COLOR_RESET}" >&2
        else
            echo >&2; echo -e "${__BU_MAIN_COLOR_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}Bad value : ${__BU_MAIN_COLOR_HIGHLIGHT}$p_badVal.${__BU_MAIN_COLOR_RESET}" >&2
        fi

        echo >&2; echo -e "${__BU_MAIN_COLOR_ERROR}${__BU_MAIN_TXT_TAB}${__BU_MAIN_TXT_TAB}The allowed values are :${__BU_MAIN_COLOR_RESET}" >&2

        # Displaying the list of every allowed arguments.
        for val in "${pa_correctValues[@]}"; do
            i=$(( i+1 ))

            # If an empty argument is allowed.
            if [ -z "$val" ]; then
                echo -e "${__BU_MAIN_COLOR_ERROR}$i/${#pa_correctValues[@]}  --> ${__BU_MAIN_COLOR_ORANGE}An empty argument.${__BU_MAIN_COLOR_RESET}" >&2
            else
                echo -e "${__BU_MAIN_COLOR_ERROR}$i/${#pa_correctValues[@]}  --> ${__BU_MAIN_COLOR_HIGHLIGHT}$val${__BU_MAIN_COLOR_RESET}" >&2
            fi
        done
    fi

    echo >&2; ExitError 1
}

# -----------------------------------------------

## CHECKINGS

# Checking the "$__BU_MAIN_STAT_DEBUG" status variable's value.
function CheckSTAT_DEBUG()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_MAIN_STAT_DEBUG" != "true" ] && [ "$__BU_MAIN_STAT_DEBUG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_DEBUG" "__BU_MAIN_STAT_DEBUG" "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Check the "$__BU_MAIN_STAT_DECHO" status variable's value.
function CheckSTAT_DECHO()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("authorize" "forbid" "restrict")

    #***** Code *****
    if [ "$__BU_MAIN_STAT_DECHO" != "authorize" ] && [ "$__BU_MAIN_STAT_DECHO" != "forbid" ] && [ "$__BU_MAIN_STAT_DECHO" != "restrict" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_DECHO" "__BU_MAIN_STAT_DECHO" "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Check the "$__BU_MAIN_STAT_ECHO" status variable's value.
function CheckSTAT_ECHO()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_MAIN_STAT_ECHO" != "true" ] && [ "$__BU_MAIN_STAT_ECHO" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_ECHO" "__BU_MAIN_STAT_ECHO" "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_ERROR" status variable's value.
function CheckSTAT_ERROR()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("" "fatal")

    #***** Code *****
    if [ -n "$__BU_MAIN_STAT_ERROR" ] && [ "$__BU_MAIN_STAT_ERROR" != "fatal" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_ERROR" "__BU_MAIN_STAT_ERROR" "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_INITIALIZING" status variable's value.
function CheckSTAT_INITIALIZING()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_MAIN_STAT_INITIALIZING" != "true" ] && [ "$__BU_MAIN_STAT_INITIALIZING" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_INITIALIZING" "__BU_MAIN_STAT_INITIALIZING" "${pa_correctValues[@]}"; return 1
	fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_LOG" status variable's value.
function CheckSTAT_LOG()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_MAIN_STAT_LOG" != "true" ] && [ "$__BU_MAIN_STAT_LOG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_LOG" "__BU_MAIN_STAT_LOG" "${pa_correctValues[@]}"; return 1

    elif [ "$__BU_MAIN_STAT_LOG" = "true" ] && [ "$__BU_MAIN_STAT_INITIALIZING" = 'false' ] && [ ! -f "$__BU_MAIN_PROJECT_LOG_FILE_PATH" ]; then
        CreateProjectLogFile || return 1
	fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_LOG_REDIRECT" status variable's value.
function CheckSTAT_LOG_REDIRECT()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("" "true" "false")

    #***** Code *****
    if [ -n "$__BU_MAIN_STAT_LOG_REDIRECT" ] && [ "$__BU_MAIN_STAT_LOG_REDIRECT" != 'log' ] && [ "$__BU_MAIN_STAT_LOG_REDIRECT" != 'tee' ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_LOG_REDIRECT" "__BU_MAIN_STAT_LOG_REDIRECT" "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_OPERATE_ROOT" status variable's value.
function CheckSTAT_OPERATE_ROOT()
{
	#***** Parameters *****
	local p_file=$1
	local p_lineno=$2

	#***** Variables *****
	local pa_correctValues=("authorized" "forbidden" "restricted")

	#***** Code *****
	if [ "$__BU_MAIN_STAT_OPERATE_ROOT" != "authorized" ] && [ "$__BU_MAIN_STAT_OPERATE_ROOT" != "forbidden" ] && [ "$__BU_MAIN_STAT_OPERATE_ROOT" != "restricted" ]; then
		ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_OPERATE_ROOT" "__BU_MAIN_STAT_OPERATE_ROOT" "${pa_correctValues[@]}"; return 1
	fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_PRINT_INIT_LOG" status variable's value.
function CheckSTAT_PRINT_INIT_LOG()
{
    #***** Parameters *****
    p_file=$1
    p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_MAIN_STAT_PRINT_INIT_LOG" != "true" ] && [ "$__BU_MAIN_STAT_PRINT_INIT_LOG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_PRINT_INIT_LOG" '__BU_MAIN_STAT_PRINT_INIT_LOG' "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_TIME_TXT" status variable's value.
function CheckSTAT_TIME_TXT()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("${__BU_MAIN_COLOR_ORANGE}An integer or a floating number")

    #***** Code *****
    # If the status variable's value is not a float or an integer.
    if ! IsFloat "$__BU_MAIN_STAT_TIME_TXT"; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_TIME_TXT" "__BU_MAIN_STAT_TIME_TXT" "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_TRANSLATED" status variable's value.
function CheckSTAT_TRANSLATED()
{
    #***** Parameters *****
    p_file=$1
    p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_MAIN_STAT_TRANSLATED" != "true" ] && [ "$__BU_MAIN_STAT_TRANSLATED" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_TRANSLATED" '__BU_MAIN_STAT_TRANSLATED' "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_TXT_FMT" status variable's value.
function CheckSTAT_TXT_FMT()
{
    #***** Parameters *****
    p_file=$1
    p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_MAIN_STAT_TXT_FMT" != "true" ] && [ "$__BU_MAIN_STAT_TXT_FMT" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_MAIN_STAT_TXT_FMT" '__BU_MAIN_STAT_TXT_FMT' "${pa_correctValues[@]}"; return 1
    fi

    return 0
}

# Checking the "$__BU_MAIN_STAT_USER_OS" status variable's value.
# This function is empty now, as the OS handling is still in work.
function CheckSTAT_USER_OS()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2
    shift 2

    # local pa_supported_os=("$@")    # Array storing the list of the operating systems which support a feature to be deployed.

    #***** Variables *****
    
    #***** Code *****
    return 0
}


# Checking all the project's status variables values if multiple values had been modified.
function CheckProjectStatusVars()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Code *****
    # Processing first the "__BU_MAIN_STAT_LOG_REDIRECT" variable, to make sure the following error messages will be correctly displayed if another error happened.
    CheckSTAT_LOG_REDIRECT  "$p_file" "$p_lineno" || return 1
    CheckSTAT_DECHO         "$p_file" "$p_lineno" || return 1
    CheckSTAT_ECHO          "$p_file" "$p_lineno" || return 1
    CheckSTAT_DEBUG         "$p_file" "$p_lineno" || return 1
    CheckSTAT_ERROR         "$p_file" "$p_lineno" || return 1
	ChangeSTAT_INITIALIZING	"$p_file" "$p_lineno" || return 1
    CheckSTAT_LOG           "$p_file" "$p_lineno" || return 1
	CheckSTAT_OPERATE_ROOT  "$p_file" "$p_lineno" || return 1
    CheckSTAT_TIME_TXT      "$p_file" "$p_lineno" || return 1
    CheckSTAT_TRANSLATED    "$p_file" "$p_lineno" || return 1
    CheckSTAT_TXT_FMT       "$p_file" "$p_lineno" || return 1
    CheckSTAT_USER_OS       "$p_file" "$p_lineno" || return 1

	return 0
}

# -----------------------------------------------

## CHANGING VALUES 

# Parameters :
#   $1  --> new value.
#   $2  --> file where the change was made.
#   $3  --> line where the change was made.

# Changing the "$__BU_MAIN_STAT_DEBUG" status variable's value.
function ChangeSTAT_DEBUG           { __BU_MAIN_STAT_DEBUG="$1";            CheckSTAT_DEBUG             "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_DECHO" status variable's value.
function ChangeSTAT_DECHO           { __BU_MAIN_STAT_DECHO="$1";            CheckSTAT_DECHO             "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_ECHO" status variable's value.
function ChangeSTAT_ECHO            { __BU_MAIN_STAT_ECHO="$1";             CheckSTAT_ECHO              "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_ERROR" status variable's value.
function ChangeSTAT_ERROR           { __BU_MAIN_STAT_ERROR="$1";            CheckSTAT_ERROR             "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_INITIALIZING" status variable's value.
function ChangeSTAT_INITIALIZING    { __BU_MAIN_STAT_INITIALIZING="$1";     CheckSTAT_INITIALIZING      "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_LOG" status variable's value.
function ChangeSTAT_LOG             { __BU_MAIN_STAT_LOG="$1";              CheckSTAT_LOG               "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_LOG_REDIRECT" status variable's value.
function ChangeSTAT_LOG_REDIRECT    { __BU_MAIN_STAT_LOG_REDIRECT="$1";     CheckSTAT_LOG_REDIRECT      "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_OPERATE_ROOT" status variable's value.
function ChangeSTAT_OPERATE_ROOT    { __BU_MAIN_STAT_OPERATE_ROOT="$1";     CheckSTAT_OPERATE_ROOT      "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_TIME_TXT" status variable's value.
function ChangeSTAT_TIME_TXT        { __BU_MAIN_STAT_TIME_TXT="$1";         CheckSTAT_TIME_TXT          "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_TRANSLATED" status variable's value.
function ChangeSTAT_TRANSLATED      { __BU_MAIN_STAT_TRANSLATED="$1";       CheckSTAT_TRANSLATED        "$2" "$3" || return 1; return 0; }

# Changing the "$__BU_MAIN_STAT_TXT_FMT" status variable's value.
function ChangeSTAT_TXT_FMT         { __BU_MAIN_STAT_TXT_FMT="$1";          CheckSTAT_TXT_FMT           "$2" "$3" || return 1; return 0; }
