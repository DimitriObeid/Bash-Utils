#!/usr/bin/env bash

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo "WARNING !"; echo
    echo "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !"
    echo "Use this script only by sourcing it in your project script."; echo

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### VARIABLES VALUES CHECKING

## HANDLINGS

# Easy writing text function.
function ConfEcho
{
    #***** Parameters *****
    local p_file=$1;
    local p_lineno=$2;
    local p_badVal=$3;
    local p_varVal=$4

    # Shifting the same number of time as the former arguments number
    # to avoid including these arguments values in the allowed values array.
    shift 4
    local p_array=("$@")

    #***** Variables *****
    local i=0

    #***** Code *****
    echo >&2; echo -n "${__COLOR_CODE_ERROR}$__TXT_TAB$__TXT_TAB In ${__COLOR_CODE_HIGHLIGHT}$p_file${__COLOR_CODE_ERROR}, line ${__COLOR_CODE_HIGHLIGHT}$p_lineno${__COLOR_CODE_ERROR} --> " >&2
    echo "Error : the ${__COLOR_CODE_HIGHLIGHT}$p_varVal${__COLOR_CODE_ERROR} variable's value is incorrect.${__COLOR_CODE_RESET}" >&2

    if [ -z "$p_badVal" ]; then
        echo >&2; echo "${__COLOR_CODE_ERROR}$__TXT_TAB$__TXT_TAB Bad value :$__COL_YELLOW An empty string.${__COLOR_CODE_RESET}" >&2
    else
        echo >&2; echo "${__COLOR_CODE_ERROR}$__TXT_TAB$__TXT_TAB Bad value : ${__COLOR_CODE_HIGHLIGHT}$p_badVal.${__COLOR_CODE_RESET}" >&2
    fi

    echo >&2; echo "${__COLOR_CODE_ERROR}$__TXT_TAB$__TXT_TAB The allowed values are :${__COLOR_CODE_RESET}" >&2

    # Displaying the list of every allowed arguments.
    for val in "${p_array[@]}"; do
        i=$(( i+1 ))

        # If an empty argument is allowed.
        if [ -z "$val" ]; then
            echo -e "${__COLOR_CODE_ERROR}$i/${#p_array[@]}  --> ${__COL_ORANGE}An empty argument.${__COLOR_CODE_RESET}" >&2
        else
            echo -e "${__COLOR_CODE_ERROR}$i/${#p_array[@]}  --> ${__COLOR_CODE_HIGHLIGHT}$val${__COLOR_CODE_RESET}" >&2
        fi
    done

    echo >&2; ExitError 1
}

# -----------------------------------------------

## CHECKINGS

# Checking the "$__STAT_DEBUG" status variable's value.
function CheckSTAT_DEBUG
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local a_array=("true" "false")

    #***** Code *****
    if [ "$__STAT_DEBUG" != "true" ] && [ "$__STAT_DEBUG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_DEBUG" "__STAT_DEBUG" "${a_array[@]}"
    fi
}

# Checking the "$__STAT_ERROR" status variable's value.
function CheckSTAT_ERROR
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local a_array=("" "fatal")

    #***** Code *****
    if [ -n "$__STAT_ERROR" ] && [ "$__STAT_ERROR" != "fatal" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_ERROR" "__STAT_ERROR" "${a_array[@]}"
    fi
}

# Checking the "$__STAT_EXIT_CODE" status variable's value.
function CheckSTAT_EXIT_CODE
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local a_array=("")

    #***** Code *****
    if ! IsInt "$__STAT_EXIT_CODE"; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_EXIT" "__STAT_EXIT" "${a_array[@]}"
    fi
}

# Checking the "$__STAT_LOG" status variable's value.
function CheckSTAT_LOG
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local a_array=("true" "false")

    #***** Code *****
    if [ "$__STAT_LOG" != "true" ] && [ "$__STAT_LOG" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_LOG" "__STAT_LOG" "${a_array[@]}"
    elif [ "$__STAT_LOG" = "true" ] && [ ! -f "$__PROJECT_LOG_FILE_PATH" ]; then
		if [ ! -d "$__PROJECT_LOG_DIR_PATH" ]; then
			echo "${__BU_COLOR_NEWSTEP}Creating the ${__BU_COLOR_HIGHLIGHT}$__PROJECT_LOG_DIR_PATH${__BU_COLOR_NEWSTEP} folder.${BU_COLOR_RESET}"
			mkdir -pv "$__PROJECT_LOG_DIR_PATH" || { echo "${__BU_COLOR_ERROR}THE PROJECT'S TEMPORARY LOGS FOLDER CREATION FAILED" "" "$__PROJECT_LOG_DIR_PATH" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"; }
		fi

		echo "${__BU_COLOR_NEWSTEP}Creating the ${__BU_COLOR_HIGHLIGHT}$__PROJECT_LOG_FILE_PATH${__BU_COLOR_NEWSTEP} file.${BU_COLOR_RESET}"
		touch "$__PROJECT_LOG_FILE_PATH" || { echo "${__BU_COLOR_ERROR}THE PROJECT'S LOG FILE CREATION FAILED" "" "$__PROJECT_LOG_FILE_PATH" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-2 ))"; }

		# Redirecting the initializer's log file content into the log file.
		HeaderBlue "INITIALIZATION PROCESS LOG OUTPUT"

		EchoNewstep "Sourced configuration files :"; for val in "${a_config_files_path[@]}"; do EchoMsg "$val"; done; Newline
		EchoNewstep "Sourced library files : "; for val in "${a_lib_files_path[@]}"; do EchoMsg "$val"; done; Newline
		
		EchoMsg "$(cat "$__INIT_LIST_FILE_PATH")" "" "nodate"

		# Gathering informations about the user's operating system, allowing me to correct any bug that could occur on a precise Linux distribution.
		HeaderBlue "GETTING INFORMATIONS ABOUT USER'S SYSTEM"

		# Getting operating system family.
		EchoNewstep "Operating system family : $(DechoN "$OSTYPE")"
		Newline

		# Gathering OS informations from the "/etc/os-release" file.
		EchoNewstep "Operating system general informations :"
		EchoMsg "$(cat "/etc/os-release")" "" "nodate"
		Newline

		EchoNewstep "Bash version : $(DechoN "$BASH_VERSION")"
		Newline

		EchoSuccess "Successfully got the user's system's informations."

	fi
}

# Checking the "$__STAT_LOG_REDIRECT" status variable's value.
function CheckSTAT_LOG_REDIRECT
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local a_array=("" "true" "false")

    #***** Code *****
    if [ -n "$__STAT_LOG_REDIRECT" ] && [ "$__STAT_LOG_REDIRECT" != 'log' ] && [ "$__STAT_LOG_REDIRECT" != 'tee' ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_LOG_REDIRECT" "__STAT_LOG_REDIRECT" "${a_array[@]}"
    fi
}

# Checking the "$__STAT_OPERATE_ROOT" status variable's value.
function CheckSTAT_OPERATE_ROOT
{
	#***** Parameters *****
	local p_file=$1
	local p_lineno=$2

	#***** Variables *****
	local a_array=("authorized" "forbidden" "restricted")

	#***** Code *****
	if [ "$__STAT_OPERATE_ROOT" != "authorized" ] && [ "$__STAT_OPERATE_ROOT" != "forbidden" ] && [ "$__STAT_OPERATE_ROOT" != "restricted" ]; then
		ConfEcho "$p_file" "$p_lineno" "$__STAT_OPERATE_ROOT" "__STAT_OPERATE_ROOT" "${a_array[@]}"
	fi
}

# Checking the "$__STAT_TIME_TXT" status variable's value.
function CheckSTAT_TIME_TXT
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local a_array=("${__COL_ORANGE}An integer or a floating number")

    #***** Code *****
    # If the status variable's value is not a float or an integer.
    if ! IsFloatInt "$__STAT_TIME_TXT"; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_TIME_TXT" "__STAT_TIME_TXT" "${a_array[@]}" >&2
    fi
}

# Checking the "$__STAT_TXT_FMT" status variable's value.
function CheckSTAT_TXT_FMT
{
    #***** Parameters *****
    p_file=$1
    p_lineno=$2

    #***** Variables *****
    local a_array=("true" "false")

    #***** Code *****
    if [ "$__STAT_TXT_FMT" != "true" ] && [ "$__STAT_TXT_FMT" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__STAT_TXT_FMT" '__STAT_TXT_FMT' "${a_array[@]}"
    fi
}
# Checking the "$__STAT_USER_OS" status variable's value.
# This function is empty now, as the OS handling is still in work.
function CheckSTAT_USER_OS
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Code *****
    return
}


# Checking all the project's status variables values if multiple values had been modified.
function CheckProjectStatusVars
{
    #***** Parameters *****
    local p_file=$1error
    local p_lineno=$2

    #***** Code *****
    # Processing first the "STAT_LOG_REDIRECT" variable, to make sure the following error messages will be correctly displayed if another error happened.
    CheckSTAT_LOG_REDIRECT  "$p_file" "$p_lineno"
    CheckSTAT_DEBUG         "$p_file" "$p_lineno"
    CheckSTAT_ERROR         "$p_file" "$p_lineno"
    CheckSTAT_TXT_FMT       "$p_file" "$p_lineno"
    CheckSTAT_EXIT_CODE     "$p_file" "$p_lineno"
	CheckSTAT_OPERATE_ROOT  "$p_file" "$p_lineno"
    CheckSTAT_LOG           "$p_file" "$p_lineno"
	CheckSTAT_OPERATE_ROOT  "$p_file" "$p_lineno"
    CheckSTAT_TIME_TXT      "$p_file" "$p_lineno"
}

# Checking the project's status variables before switching back to the project's script.
# This function will be executed during the sourcing of this file in the initializer script.
# There's no need to call it in the forementionned script.
# CheckProjectStatusVars "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
