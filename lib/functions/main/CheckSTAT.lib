#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : CheckSTAT.lib
# Description   : 
# Author(s)     : Dimitri Obeid
# Version       : 

# DO NOT EXECUTE IT DIRECTLY, instead, just source it by calling the "__BASH_UTILS_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### VARIABLES VALUES FUNCTIONS

## CHECKING VALUES

# Easy writing text function.
function ConfEcho()
{
    #***** Parameters *****
    local p_file=$1;
    local p_lineno=$2;
    local p_badVal=$3;
    local p_varVal=$4

    # Shifting the same number of time as the former arguments number
    # to avoid including these arguments values in the allowed values array.
    shift 4
    local pa_correctValues=("$@")

    #***** Variables *****
    local i=0

    #***** Code *****
    __BU_STAT_CPLS="true"; __BU_STAT_ECHO=""; __BU_STAT_LOG="false"; __BU_STAT_LOG_REDIRECT="";

    HeaderError "AN ERROR OCCURED DURING A STATUS VARIABLES CHECKING !!!"

    echo >&2; echo -n "${__BU_COLOR_ERROR}$__BU_TXT_TAB$__BU_TXT_TAB In ${__BU_COLOR_HIGHLIGHT}$p_file${__BU_COLOR_ERROR}, line ${__BU_COLOR_HIGHLIGHT}$p_lineno${__BU_COLOR_ERROR} --> " >&2
    echo -e "Error : the ${__BU_COLOR_HIGHLIGHT}$p_varVal${__BU_COLOR_ERROR} variable's value is incorrect.${__BU_COLOR_RESET}" >&2

    if [ -z "$p_badVal" ]; then
        echo >&2; echo -e "${__BU_COLOR_ERROR}$__BU_TXT_TAB$__BU_TXT_TAB Bad value :${__BU_COLOR_YELLOW} An empty string.${__BU_COLOR_RESET}" >&2
    else
        echo >&2; echo -e "${__BU_COLOR_ERROR}$__BU_TXT_TAB$__BU_TXT_TAB Bad value : ${__BU_COLOR_HIGHLIGHT}$p_badVal.${__BU_COLOR_RESET}" >&2
    fi

    echo >&2; echo -e "${__BU_COLOR_ERROR}$__BU_TXT_TAB$__BU_TXT_TAB The allowed values are :${__BU_COLOR_RESET}" >&2

    # Displaying the list of every allowed arguments.
    for val in "${pa_correctValues[@]}"; do
        i=$(( i+1 ))

        # If an empty argument is allowed.
        if [ -z "$val" ]; then
            echo -e "${__BU_COLOR_ERROR}$i/${#pa_correctValues[@]}  --> ${__BU_COLOR_ORANGE}An empty argument.${__BU_COLOR_RESET}" >&2
        else
            echo -e "${__BU_COLOR_ERROR}$i/${#pa_correctValues[@]}  --> ${__BU_COLOR_HIGHLIGHT}$val${__BU_COLOR_RESET}" >&2
        fi
    done

    echo >&2; ExitError 1
}

# -----------------------------------------------

## CHECKINGS

# Check the "$__BU_STAT_CPLS" status variable's value.
function CheckSTAT_CPLS()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_STAT_CPLS" != "true" ] && [ "$__BU_STAT_CPLS" != "false" ]; then
        ConfEcho "$p_file" "$p_lineno" "$__BU_STAT_CPLS" "__BU_STAT_CPLS" "${pa_correctValues[@]}"
    fi
}

# Checking the "$__BU_STAT_DEBUG" status variable's value.
function CheckSTAT_DEBUG()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_STAT_DEBUG" != "true" ] && [ "$__BU_STAT_DEBUG" != "false" ]; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_DEBUG" "__BU_STAT_DEBUG" "${pa_correctValues[@]}"
    fi
}

# Checking the "$__BU_STAT_ECHO" status variable's value.
function CheckSTAT_ECHO()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_STAT_ECHO" != "true" ] && [ "$__BU_STAT_ECHO" != "false" ]; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_ECHO" "__BU_STAT_ECHO" "${pa_correctValues[@]}"
    fi
}

# Checking the "$__BU_STAT_ERROR" status variable's value.
function CheckSTAT_ERROR()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("" "fatal")

    #***** Code *****
    if [ -n "$__BU_STAT_ERROR" ] && [ "$__BU_STAT_ERROR" != "fatal" ]; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_ERROR" "__BU_STAT_ERROR" "${pa_correctValues[@]}"
    fi
}

# Checking the "$__BU_STAT_LOG" status variable's value.
function CheckSTAT_LOG()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_STAT_LOG" != "true" ] && [ "$__BU_STAT_LOG" != "false" ]; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_LOG" "__BU_STAT_LOG" "${pa_correctValues[@]}"

    elif [ "$__BU_STAT_LOG" = "true" ] && [ ! -f "$__BU_PROJECT_LOG_FILE_PATH" ]; then

		if ! CheckProjectRelatedFile "$__BU_PROJECT_LOG_FILE_PARENT" "$__BU_PROJECT_LOG_FILE_NAME" 'f'; then ExitError '1'; fi

		EchoSuccess "Successfully created the $(DechoHighlight "$__BU_PROJECT_LOG_FILE_PATH") file."

		ChangeSTAT_TXT_FMT 'true' "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

		if CheckIsInitializing; then
            # shellcheck disable=SC2034
            __INIT_IS_INITALIZING="false"
        fi

        if [ "$__STAT_CPLS" = "true" ]; then
            ChangeSTAT_CPLS "false" "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
        fi
		
		# Redirecting the initializer's log file content into the log file.
		HeaderBlue "INITIALIZATION PROCESS LOG OUTPUT"

		EchoNewstep "Sourced configuration files :"; for val in "${__INIT_CONFIG_FILES_PATH_ARRAY[@]}"; do EchoMsg "$val"; done; Newline
		EchoNewstep "Sourced library files : "; for val in "${__INIT_LIB_FILES_PATH_ARRAY[@]}"; do EchoMsg "$val"; done; Newline

		if (( ${#__INIT_STR_ARRAY[@]} > 0 )); then
            EchoNewstep "Initialization log output :"; Newline

            for val in "${__INIT_STR_ARRAY[@]}"; do
                CheckProjectLogStatus "$val"
            done
		fi

		# Gathering informations about the user's operating system, allowing me to correct any bug that could occur on a precise Unix-like operating system.
		HeaderBlue "GETTING INFORMATIONS ABOUT USER'S SYSTEM"

		# Getting operating system family.
		EchoNewstep "Operating system family : $(DechoHighlight "$OSTYPE")"
		Newline

		# Gathering OS informations from the "/etc/os-release" file.
		EchoNewstep "Operating system general informations :"
		EchoMsg "$(cat "/etc/os-release")" "" "nodate"
		Newline

		EchoNewstep "Bash version : $(DechoHighlight "$BASH_VERSION")"
		Newline

		local v_terminfo_v; v_terminfo_v="$($(ps -p "$(ps -p "$$" -o ppid=)" o args=) -v)"

		EchoNewstep "Terminal (emulator) version : $(DechoHighlight "$v_terminfo_v")"
		Newline

		EchoSuccess "Successfully got the user's system's informations."

	fi
}

# Checking the "$__BU_STAT_LOG_REDIRECT" status variable's value.
function CheckSTAT_LOG_REDIRECT()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("" "true" "false")

    #***** Code *****
    if [ -n "$__BU_STAT_LOG_REDIRECT" ] && [ "$__BU_STAT_LOG_REDIRECT" != 'log' ] && [ "$__BU_STAT_LOG_REDIRECT" != 'tee' ]; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_LOG_REDIRECT" "__BU_STAT_LOG_REDIRECT" "${pa_correctValues[@]}"
    fi
}

# Checking the "$__BU_STAT_OPERATE_ROOT" status variable's value.
function CheckSTAT_OPERATE_ROOT()
{
	#***** Parameters *****
	local p_file=$1
	local p_lineno=$2

	#***** Variables *****
	local pa_correctValues=("authorized" "forbidden" "restricted")

	#***** Code *****
	if [ "$__BU_STAT_OPERATE_ROOT" != "authorized" ] && [ "$__BU_STAT_OPERATE_ROOT" != "forbidden" ] && [ "$__BU_STAT_OPERATE_ROOT" != "restricted" ]; then
		Confecho "$p_file" "$p_lineno" "$__BU_STAT_OPERATE_ROOT" "__BU_STAT_OPERATE_ROOT" "${pa_correctValues[@]}"
	fi
}

# Checking the "$__BU_STAT_PRINT_INIT_LOG" status variable's value.
function CheckSTAT_PRINT_INIT_LOG()
{
    #***** Parameters *****
    p_file=$1
    p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_STAT_PRINT_INIT_LOG" != "true" ] && [ "$__BU_STAT_PRINT_INIT_LOG" != "false" ]; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_PRINT_INIT_LOG" '__BU_STAT_PRINT_INIT_LOG' "${pa_correctValues[@]}"
    fi
}

# Checking the "$__BU_STAT_TIME_TXT" status variable's value.
function CheckSTAT_TIME_TXT()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("${__BU_COLOR_ORANGE}An integer or a floating number")

    #***** Code *****
    # If the status variable's value is not a float or an integer.
    if ! IsFloatInt "$__BU_STAT_TIME_TXT"; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_TIME_TXT" "__BU_STAT_TIME_TXT" "${pa_correctValues[@]}" >&2
    fi
}

# Checking the "$__BU_STAT_TRANSLATED" status variable's value.
function CheckSTAT_TRANSLATED()
{
    #***** Parameters *****
    p_file=$1
    p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_STAT_TRANSLATED" != "true" ] && [ "$__BU_STAT_TRANSLATED" != "false" ]; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_TRANSLATED" '__BU_STAT_TRANSLATED' "${pa_correctValues[@]}"
    fi
}

# Checking the "$__BU_STAT_TXT_FMT" status variable's value.
function CheckSTAT_TXT_FMT()
{
    #***** Parameters *****
    p_file=$1
    p_lineno=$2

    #***** Variables *****
    local pa_correctValues=("true" "false")

    #***** Code *****
    if [ "$__BU_STAT_TXT_FMT" != "true" ] && [ "$__BU_STAT_TXT_FMT" != "false" ]; then
        Confecho "$p_file" "$p_lineno" "$__BU_STAT_TXT_FMT" '__BU_STAT_TXT_FMT' "${pa_correctValues[@]}"
    fi
}

# Checking the "$__BU_STAT_USER_OS" status variable's value.
# This function is empty now, as the OS handling is still in work.
function CheckSTAT_USER_OS()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2
    shift 2

    # local pa_supported_os=("$@")    # Array storing the list of the operating systems which support a feature to be deployed.

    #***** Variables *****
    
    #***** Code *****
    return
}


# Checking all the project's status CheckTxtFmts values if multiple values had been modified.
function CheckProjectStatusVars()
{
    #***** Parameters *****
    local p_file=$1
    local p_lineno=$2

    #***** Code *****
    # Processing first the "__BU_STAT_LOG_REDIRECT" CheckTxtFmt, to make sure the following error messages will be correctly displayed if another error happened.
    CheckSTAT_LOG_REDIRECT  "$p_file" "$p_lineno"
    CheckSTAT_CPLS          "$p_file" "$p_lineno"
    CheckSTAT_DEBUG         "$p_file" "$p_lineno"
    CheckSTAT_ERROR         "$p_file" "$p_lineno"
    CheckSTAT_LOG           "$p_file" "$p_lineno"
	CheckSTAT_OPERATE_ROOT  "$p_file" "$p_lineno"
    CheckSTAT_TIME_TXT      "$p_file" "$p_lineno"
    CheckSTAT_TRANSLATED    "$p_file" "$p_lineno"
    CheckSTAT_TXT_FMT       "$p_file" "$p_lineno"
    CheckSTAT_USER_OS       "$p_file" "$p_lineno"
}

# -----------------------------------------------

## CHANGING VALUES 

# Parameters :
#   $1  --> new value.
#   $2  --> file where the change was made.
#   $3  --> line where the change was made.

# Changing the "$__BU_STAT_CPLS" status variable's value.
function ChangeSTAT_CPLS()  { __BU_STAT_CPLS="$1";      CheckSTAT_CPLS  "$2" "$3"; }

# Changing the "$__BU_STAT_DEBUG" status variable's value.
function ChangeSTAT_DEBUG() { __BU_STAT_DEBUG="$1";     CheckSTAT_DEBUG "$2" "$3"; }

# Changing the "$__BU_STAT_ECHO" status variable's value.
function ChangeSTAT_ECHO    { __BU_STAT_ECHO="$1";      CheckSTAT_ECHO  "$2" "$3"; }

# Changing the "$__BU_STAT_ERROR" status variable's value.
function ChangeSTAT_ERROR   { __BU_STAT_ERROR="$1";     CheckSTAT_ERROR "$2" "$3"; }

# Changing the "$__BU_STAT_LOG" status variable's value.
function ChangeSTAT_LOG     { __BU_STAT_LOG="$1";       CheckSTAT_LOG   "$2" "$3"; }

# Changing the "$__BU_STAT_LOG_REDIRECT" status variable's value.
function ChangeSTAT_LOG_REDIRECT    { __BU_STAT_LOG_REDIRECT="$1";  CheckSTAT_LOG_REDIRECT  "$2" "$3"; }

# Changing the "$__BU_STAT_OPERATE_ROOT" status variable's value.
function ChangeSTAT_OPERATE_ROOT    { __BU_STAT_OPERATE_ROOT="$1";  CheckSTAT_OPERATE_ROOT  "$2" "$3"; }

# Changing the "$__BU_STAT_TIME_TXT" status variable's value.
function ChangeSTAT_TIME_TXT        { __BU_STAT_TIME_TXT="$1";      CheckSTAT_TIME_TXT      "$2" "$3"; }

# Changing the "$__BU_STAT_TRANSLATED" status variable's value.
function ChangeSTAT_TRANSLATED      { __BU_STAT_TRANSLATED="$1";    CheckSTAT_TRANSLATED    "$2" "$3"; }

# Changing the "$__BU_STAT_TXT_FMT" status variable's value.
function ChangeSTAT_TXT_FMT { __BU_STAT_TXT_FMT="$1"; CheckSTAT_TXT_FMT "$2" "$3"; }
