#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : Terminal.lib
# Module        : Main
# Description   : Functions specially made for terminal interaction.
# Author(s)     : Dimitri Obeid
# Version       : 

# ----------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# shellcheck disable=SC2154

# ----------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

    exit 1;
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### TERMINAL INTERACTION FUNCTIONS

## DISPLAYING TEXT AND MORE WHILE A TASK IS ONGOING

# Display a countdown while a task is ongoing.
function BU::Main::PosixTerm::DisplayCountdown()
{
    return 0;
}

# Display a progress bar while a task is ongoing.
function BU::Main::PosixTerm::DisplayProgressBar()
{
    return 0;
}

# Display a spinner while a task is ongoing.
function BU::Main::PosixTerm::DisplaySpinner()
{
    #**** Parameters ****
    p_string=$1
#    p_countdown=$2
    p_pid=$3

    #**** Variables ****
    i=1
    sp="/-\|"

    #**** Code ****
    echo -n ' '

    BU::EchoMsg "$__BU_MAIN_TXT_TAB $p_string"

    while [ -d "/proc/$p_pid" ]; do
        printf "%s" "\b${sp:i++%${#sp}:1}"
    done

    return 0;
}
