#!/usr/bin/env bash

# ---------------------
# SCRIPT'S INFORMATIONS

# Name          : Echo.lib
# Module        : Main
# Description   : (Colored) text display functions.
# Author(s)     : Dimitri Obeid
# Version       :

# ----------------------------
# SHELLCHECK GLOBAL DISABLER :

# Add a coma after each warning code to disable multiple warnings at one go.

# Do not uncomment the "shellcheck disable" line, or else the shellcheck command will be executed during the script's execution, and will not detect any coding mistake during a debugging process.

# DO NOT PUT A COMA AFTER A SHELLCHECK CODE IF THERE'S NO OTHER SHELLCHECK CODE FOLLOWING IT, OR ELSE SHELLCHECK WILL RETURN ERRORS DURING THE DEBUGGING PROCESS !!!

# IF YOU WANT TO ADD ANOTHER SHELLCHECK CODE, WRITE THIS CODE DIRECTLY AFTER THE COMMA, WITHOUT ADDING A BLANK SPACE AFTER IT !!!

# shellcheck disable=SC2154

# --------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT EXECUTE THIS SCRIPT DIRECTLY, instead, just source it by calling the "$__BU_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2;
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2;
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2;

    exit 1;
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### PRINTING FORMATTED STRINGS

## DEBUGGING

# Printing the name of the processed function if the main script is launched with the "bash -x" command.
function BU::Main::Echo::Debug()
{
    #**** Parameters ****
    local p_funcname=$1;    # String    - Default : NULL    - Print the name of the function currently processed, during the debug procedure.

    #**** Code ****
    BU::Main::Status::CheckStatIsDebugging && {
        BU::Main::Echo::__EchoVoid;

        echo "----------------------------------------";
        echo "DEBUGGING THE FUNCTION $p_funcname";

        BU::Main::Echo::__EchoVoid;
    } > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH";

    return 0;
}

# Print void lines before and after calling a header.
function BU::Main::Echo::__EchoVoid()
{
printf "


" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" ||
    {
        echo >&2; echo "IN « ${BASH_SOURCE[0]} », LINE « $LINENO » --> WARNING --> UNABLE TO WRITE THE « ${FUNCNAME[0]} » IN THE « $__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH »" >&2; echo >&2; exit 1;
    }
}

# "BU::Echo<...>()" functions debug output for a better view during a debug process.
# It's better to also execute the project's script with the "bash - x $project_name" command, instead of the "./$project_name" way.
function BU::Main::Echo::__EchoOutput()
{
    BU::Main::Echo::Debug "${FUNCNAME[0]}";

	#**** Parameters ****
	local p_string=$1;     # String    - String to display.
	local p_context=$2;    # String    - Begin or end of the debug process.
	local p_type=$3;       # Char      - Type of message (error 'E', Msg 'm', newstep 'N', success 'S' or warning 'W').

	#**** Variables ****
	local v_strlen="${#p_string}";

	#**** Code ****
	# If the "$p_type" argument is a string, then the first character is extracted.
	if ! BU::IsAlphaChar "$p_type"; then
        local v_type=${p_type::1};

        p_type="$v_type";
	fi

	if [ "${__BU_MAIN_STAT_DEBUG,,}" = 'false' ]; then return 0;

	elif [ "${__BU_MAIN_STAT_DEBUG,,}" = "true" ]; then
	    # Passing the "$__BU_MAIN_STAT_ECHO" global status variable's value from "false" to "true".
        if ! BU::Main::Status::CheckStatIsBackupEchoing; then
            local v_BU_MAIN_STAT_ECHO_val="$__BU_MAIN_STAT_ECHO"; BU::Main::Status::ChangeSTAT_ECHO "true" "${BASH_SOURCE[0]}" "$LINENO";
        fi

		BU::Main::Checkings::CheckProjectRelatedFile "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PARENT" "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_NAME" "f" || { BU::Main::Echo::__EchoCPLS "$(BU::DechoHighlightFunction "${FUNCNAME[0]}") --> Unable to create the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_NAME") debug log file" 'E' "CPLS"; exit 1; }

		BU::Main::Header::DrawLine "$__BU_MAIN_TXT_CHAR_HEADER_LINE" '' "$(( 24 + v_strlen ))";

        if [ "${p_context,,}" = "begin" ]; then
            BU::Main::Echo::__EchoVoid;

            if [ "${p_type^^}" = "E" ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}BEGIN DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "BEGIN DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            elif [ "${p_type,,}" = 'm' ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}BEGIN DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "BEGIN DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            elif [ "${p_type^^}" = 'N' ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}BEGIN DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "BEGIN DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            elif [ "${p_type^^}" = 'S' ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}BEGIN DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "BEGIN DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            elif [ "${p_type^^}" = 'W' ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}BEGIN DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "BEGIN DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            fi

            BU::Main::Header::DrawLine "$__BU_MAIN_TXT_CHAR_HEADER_LINE" '' "$(( 24 + v_strlen ))";

            # Reassigning the "$__BU_MAIN_STAT_ECHO" global status variable's former value.
            if [ -n "$v_BU_MAIN_STAT_ECHO_val" ]; then
                __BU_MAIN_STAT_ECHO="$v_BU_MAIN_STAT_ECHO_val"; v_BU_MAIN_STAT_ECHO_val=''
            fi

            return 0;

        elif [ "${p_context,,}" = "end" ]; then
            if [ "${p_type^^}" = "E" ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}END DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "END DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            elif [ "${p_type,,}" = 'm' ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}END DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "END DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            elif [ "${p_type^^}" = 'N' ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}END DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "END DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            elif [ "${p_type^^}" = 'S' ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}END DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "END DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            elif [ "${p_type^^}" = 'W' ]; then
                BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_}END DEBUGGING TEXT : $p_string${__BU_MAIN_COLOR_TXT_RESET}" > "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "In $(BU::Main::Args::PrintFFL "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$LINENO") --> Unable to write the $(BU::Decho "END DEBUGGING TEXT") debug test in the $(BU::DechoHighlightPath "$__BU_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH") file"; return 1; }
            fi

            BU::Main::Header::DrawLine "$__BU_MAIN_TXT_CHAR_HEADER_LINE" '' "$(( 24 + v_strlen ))";

            # Reassigning the "$__BU_MAIN_STAT_ECHO" global status variable's former value.
            if [ -n "$v_BU_MAIN_STAT_ECHO_val" ]; then
                __BU_MAIN_STAT_ECHO="$v_BU_MAIN_STAT_ECHO_val"; v_BU_MAIN_STAT_ECHO_val='';
            fi

            BU::Main::Echo::__EchoVoid; return 0;
        fi
    fi
}

# Failsafe if any "BU::Echo<...>()" function has to be called in the "BU::CheckProjectLogStatus()" function.
function BU::Main::Echo::__EchoCPLS()
{
    BU::Main::Echo::Debug "${FUNCNAME[0]}";

    #**** Parameters ****
    local p_string=$1;  # Any       - Text to display.
    local p_option=$2;  # String    - "echo" command options.

    shift 2; pa_extraArgs=("$@");   # Array - More processing arguments (like the processing of a whole line-long string).

    #**** Code ****
    BU::Main::Args::GetFuncArgsArrayValues "${FUNCNAME[0]}" "${pa_extraArgs[@]}";

    for val in "${pa_extraArgs[@]}"; do
        if [ "$val" = 'nodate' ]; then
            case "$p_option" in
                '-n' | 'n')
                    if BU::Main::Status::CheckStatIsInitializing; then
                        BU::ModuleInit::Msg "$p_string" 'n' || return 1;
                    else
                        echo -ne "$p_string";
                    fi
                    ;;
                '' | *)
                    if BU::Main::Status::CheckStatIsInitializing; then
                        BU::ModuleInit::Msg "$p_string" || return 1;
                    else
                        echo -e "$p_string";
                    fi
                    ;;
            esac
        elif [ -z "$val" ]; then
            case "$p_option" in
                '-n' | 'n')
                    if BU::Main::Status::CheckStatIsInitializing; then
                        BU::ModuleInit::Msg "$p_string" 'n' || return 1;
                    else
                        echo -ne "$__BU_MAIN_TIME_DATE_DISPLAY $p_string";
                    fi
                    ;;
                '' | *)
                    if BU::Main::Status::CheckStatIsInitializing; then
                        BU::ModuleInit::Msg "$p_string" || return 1;
                    else
                        echo -e "$__BU_MAIN_TIME_DATE_DISPLAY $p_string";
                    fi
                    ;;
            esac
        else
            case "$p_option" in
                '-n' | 'n')
                    if BU::Main::Status::CheckStatIsInitializing; then
                        BU::ModuleInit::Msg "$p_string" 'n' || return 1;
                    else
                        echo -ne "$__BU_MAIN_TIME_DATE_DISPLAY $p_string";
                    fi
                    ;;
                '' | *)
                    if BU::Main::Status::CheckStatIsInitializing; then
                        BU::ModuleInit::Msg "$p_string" || return 1;
                    else
                        echo -e "$__BU_MAIN_TIME_DATE_DISPLAY $p_string";
                    fi
                    ;;
            esac
        fi

		if (( $(echo "$__BU_MAIN_STAT_TIME_HEADER > 0"    | bc -l ) )); then sleep "0"; fi
		if (( $(echo "$__BU_MAIN_STAT_TIME_NEWLINE > 0"   | bc -l ) )); then sleep "0"; fi
		if (( $(echo "$__BU_MAIN_STAT_TIME_TXT > 0"       | bc -l ) )); then sleep "0"; fi
    done
   # if (( $(echo "$num1 > $num2" |bc -l) ));

    return 0;
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### TEXT DISPLAYING

## DISPLAYING A CONTEXT MESSAGE

# --> DISPLAYING A COLORED CONTEXT MESSAGE WITH A PAUSE TIME DEPENDING ON THE "$__BU_MAIN_STAT_TIME_TXT" STATUS VARIABLE.

# Error message

# Usage :
#	BU::EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the BU::CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - BU::CheckProjectLogStatus     --> Checkings.lib
function BU::EchoError()
{
    BU::Main::Echo::Debug "${FUNCNAME[0]}";

    #**** Parameters ****
    local p_string=$1;
    local p_option=$2;

    shift 2;

    local pa_extraArgs=("$@");  # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::Main::Args::GetFuncArgsArrayValues "${FUNCNAME[0]}" "${pa_extraArgs[@]}";

    if ! BU::Main::Status::CheckStatIsBackupEchoing; then
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'E' || return 1;
        BU::CheckProjectLogStatus "${__BU_MAIN_COLOR_TXT_ERROR}$__BU_MAIN_TXT_PRINT_TAB$__BU_MAIN_TXT_PRINT_TAB $p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'E' || return 1;

    # Failsafe if any "BU::Echo<...>()" function has to be called in the "BU::CheckProjectLogStatus()" function.
    else
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'E' || return 1;
        BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_ERROR}$__BU_MAIN_TXT_PRINT_TAB$__BU_MAIN_TXT_PRINT_TAB $p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'E' || return 1;
    fi

    return 0;
}

# Normal message (without any extra color), with redirection checking.

# Usage :
#	BU::EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the BU::CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - BU::CheckProjectLogStatus     --> Checkings.lib
function BU::EchoMsg()
{
    BU::Main::Echo::Debug "${FUNCNAME[0]}";

    #**** Parameters ****
    local p_string=$1;
    local p_option=$2;
    shift 2;

    local pa_extraArgs=("$@");  # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::Main::Args::GetFuncArgsArrayValues "${FUNCNAME[0]}" "${pa_extraArgs[@]}";

    if ! BU::Main::Status::CheckStatIsBackupEchoing; then
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'm' || return 1;
        BU::CheckProjectLogStatus "$p_string" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'm' || return 1;

    # Failsafe if any "BU::Echo<...>()" function has to be called in the "BU::CheckProjectLogStatus()" function.
    else
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'm' || return 1;
        BU::Main::Echo::__EchoCPLS "$p_string" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'm' || return 1;
    fi

    return 0;
}

# New sub-step message

# Usage :
#	BU::EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the BU::CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - BU::CheckProjectLogStatus     --> Checkings.lib
function BU::EchoNewstep()
{
    BU::Main::Echo::Debug "${FUNCNAME[0]}";

    #**** Parameters ****
    local p_string=$1;
    local p_option=$2;
    shift 2;

    local pa_extraArgs=("$@");  # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::Main::Args::GetFuncArgsArrayValues "${FUNCNAME[0]}" "${pa_extraArgs[@]}";

    if ! BU::Main::Status::CheckStatIsBackupEchoing; then
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'N' || return 1;
        BU::CheckProjectLogStatus "${__BU_MAIN_COLOR_TXT_NEWSTEP}$__BU_MAIN_TXT_PRINT_TAB$__BU_MAIN_TXT_PRINT_TAB $p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'N' || return 1;

    # Failsafe if any "BU::Echo<...>()" function has to be called in the "BU::CheckProjectLogStatus()" function.
    else
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'N' || return 1;
        BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_NEWSTEP}$__BU_MAIN_TXT_PRINT_TAB$__BU_MAIN_TXT_PRINT_TAB $p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'N' || return 1;
    fi

    return 0;
}

# Read input values

# Usage :
#	BU::EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the BU::CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#	- BU::CheckProjectLogStatus		--> Checkings.lib
function BU::EchoRead()
{
	#**** Parameters ****
	local p_string=$1;     # User's keyboard input.

	#**** Code ****
	if [ -f "$__BU_MAIN_PROJECT_LOG_FILE_PATH" ] && [ "$__BU_MAIN_STAT_LOG" = "true" ] && [ -n "$__BU_MAIN_STAT_LOG_REDIRECT" ]; then
		echo -e "Keyboard input value : $(BU::DechoHighlightVar "$p_string")" >> "$__BU_MAIN_PROJECT_LOG_FILE_PATH" || { BU::Main::Echo::__EchoCPLS "" 'R' "CPLS"; return 1; }
	fi; return 0;
}

# Success message

# Usage :
#	BU::EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the BU::CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - BU::CheckProjectLogStatus     --> Checkings.lib
function BU::EchoSuccess()
{
    BU::Main::Echo::Debug "${FUNCNAME[0]}";

    #**** Parameters ****
    local p_string=$1;
    local p_option=$2;
    shift 2;

    local pa_extraArgs=("$@");  # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::Main::Args::GetFuncArgsArrayValues "${FUNCNAME[0]}" "${pa_extraArgs[@]}";

    if ! BU::Main::Status::CheckStatIsBackupEchoing; then
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'S' || return 1;
        BU::CheckProjectLogStatus "${__BU_MAIN_COLOR_TXT_SUCCESS}$__BU_MAIN_TXT_PRINT_TAB$__BU_MAIN_TXT_PRINT_TAB $p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'S' || return 1;

    # Failsafe if any "BU::Echo<...>()" function has to be called in the "BU::CheckProjectLogStatus()" function.
    else
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'S' || return 1;
        BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_SUCCESS}$__BU_MAIN_TXT_PRINT_TAB$__BU_MAIN_TXT_PRINT_TAB $p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'S' || return 1;
    fi

    return 0;
}

# Warning message

# Usage :
#	BU::EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the BU::CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - BU::CheckProjectLogStatus     --> Checkings.lib
function BU::EchoWarning()
{
    BU::Main::Echo::Debug "${FUNCNAME[0]}";

    #**** Parameters ****
    local p_string=$1;
    local p_option=$2;
    shift 2;

    local pa_extraArgs=("$@");  # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::Main::Args::GetFuncArgsArrayValues "${FUNCNAME[0]}" "${pa_extraArgs[@]}";

    if ! BU::Main::Status::CheckStatIsBackupEchoing; then
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'W' || return 1;
        BU::CheckProjectLogStatus "${__BU_MAIN_COLOR_TXT_WARNING}$__BU_MAIN_TXT_PRINT_TAB$__BU_MAIN_TXT_PRINT_TAB $p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'W' || return 1;

    # Failsafe if any "BU::Echo<...>()" function has to be called in the "BU::CheckProjectLogStatus()" function.
    else
        BU::Main::Echo::__EchoOutput "$p_string" 'begin' 'W' || return 1;
        BU::Main::Echo::__EchoCPLS "${__BU_MAIN_COLOR_TXT_WARNING}$__BU_MAIN_TXT_PRINT_TAB$__BU_MAIN_TXT_PRINT_TAB $p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

        BU::Main::Echo::__EchoOutput "$p_string" 'end' 'W' || return 1;
    fi

    return 0;
}

# -----------------------------------------------

## DISPLAYING A COLORED MESSAGE

# --> DISPLAYING A COLORED MESSAGE WITH A PAUSE TIME DEPENDING ON THE "$__BU_MAIN_STAT_TIME_TXT" STATUS VARIABLE.

# Note : These function call the "BU::EchoMsg()" function in order to avoid rewriting tons of lines that would do the same thing.

# Aqua blue colored message.
function BU::EchoAqua()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_AQUA}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Black colored message.
function BU::EchoBlack()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_BLACK}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Blue colored message.
function BU::EchoBlue()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_BLUE}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Cyan colored message.
function BU::EchoCyan()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_CYAN}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Fuchsia colored message.
function BU::EchoFuchsia()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_FUCHSIA}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Gray colored message.
function BU::EchoGray()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_GRAY}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Green colored message.
function BU::EchoGreen()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_GREEN}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Lime green colored message.
function BU::EchoLime()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_LIME}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Maroon colored message.
function BU::EchoMaroon()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_MAROON}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Navy blue colored message.
function BU::EchoNavy()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_NAVY}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Olive green colored message.
function BU::EchoOlive()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_OLIVE}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Orange colored message.
function BU::EchoOrange()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_ORANGE}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Pink colored message.
function BU::EchoPink()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_PINK}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Purple colored message.
function BU::EchoPurple()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_PURPLE}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Red colored message.
function BU::EchoRed()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_RED}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Salmon colored message.
function BU::EchoSalmon()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_SALMON}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Silver colored message.
function BU::EchoSilver()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_SILVER}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Tan colored message.
function BU::EchoTan()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_TAN}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Teal colored message.
function BU::EchoTeal()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_TEAL}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Turquoise colored message.
function BU::EchoTurquoise()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_TURQUOISE}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Violet colored message.
function BU::EchoViolet()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_VIOLET}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# White colored message.
function BU::EchoWhite()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_WHITE}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# Yellow colored message.
function BU::EchoYellow()
{
    #**** Parameters ****
    p_string=$1;        # Any       - String to display.
    p_option=$2;        # String    - "echo" command options.
    shift 2;

    local pa_extraArgs=("$@");      # Array - More processing arguments (like the processing of a whole line-long string) for the "BU::Main::Checkings::CheckProjectLogStatus" or the "BU::Main::Echo::__EchoCPLS" functions.

    #**** Code ****
    BU::EchoMsg "${__BU_MAIN_COLOR_TXT_YELLOW}$p_string${__BU_MAIN_COLOR_TXT_RESET}" "$p_option" "${pa_extraArgs[@]}" || return 1;

    return 0;
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### LINE BREAKS

## LINE BREAKS ACCORDING TO THE "$MAIN_SCRIPT_LOG" VARIABLE VALUE

# Redirecting the output of the "echo" command

# Featured functions and files from the "functions" folder :
#   - BU::CheckProjectLogStatus     --> Checkings.lib
#	- BU::Main::Errors::HandleErrors				--> Checkings.lib
function BU::Newline()
{
    #**** Parameters ****
    local p_number=$1;

    #**** Code ****
    if [ -n "$p_number" ]; then
        if ! BU::IsPositiveInt "$p_number"; then
            BU::EchoMsg "" "" "nodate";
            BU::Main::Echo::__EchoCPLS "$(BU::DechoHighlightFunction "${FUNCNAME[0]}()") --> Warning : the number of line breaks must be an integer" 'R';
            BU::EchoMsg "" "" "nodate";
        else
            # Doing X line breaks according to the number passed as argument.
            for ((i=0; i<p_number; i++)); do
                BU::EchoMsg "" "" "nodate";
            done
        fi
    else
        BU::EchoMsg "" "" "nodate";
    fi

    return 0;
}
