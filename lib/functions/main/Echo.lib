#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : Echo.lib
# Description   : (Colored) text display functions.
# Author(s)     : Dimitri Obeid
# Version       : 

# DO NOT EXECUTE IT DIRECTLY, instead, just source it by calling the "__BASH_UTILS_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### PRINTING FORMATTED STRINGS

## DEBUGGING AND HANDLING TEXT DISPLAY ERRORS

# Print void lines before and after calling a header.
function __EchoVoid()
{
    printf "
    
    
    
    
    
    
    
    
    
    " > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
}

# "Echo<...>()" functions debug output for a better view during a "bash - x" debug process.
function __EchoOutput()
{
	#***** Parameters *****
	local p_string=$1		# String to display.
	local p_context=$2		# Begin or end of the debug process.
	local p_type=$3			# Type of message (error 'E', newstep 'N', success 'S' or warning 'W').

	#***** Code *****
	if [ "$__BU_STAT_DEBUG" = "true" ]; then
		CheckProjectRelatedFile "$__BU_PROJECT_ECHO_OUTPUT_FILE_PARENT" "$__BU_PROJECT_ECHO_OUTPUT_FILE_NAME" "f"

        if [ "$p_context" = "begin" ]; then
            __EchoVoid

            if [ "${p_type^^}" = "E" ]; then
                echo -e "$(HeaderError "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'm' ]; then
                echo -e "$(Header "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'N' ]; then
                echo -e "$(HeaderNewstep "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'S' ]; then
                echo -e "$(HeaderSuccess "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'W' ]; then
                echo -e "$(HeaderWarning "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            fi

            return 0
        fi

        if [ "$p_context" = "end" ]; then
            if [ "${p_type^^}" = "E" ]; then
                echo -e "$(HeaderError "END DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'm' ]; then
                echo -e "$(Header "END DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'N' ]; then
                echo -e "$(HeaderNewstep "END DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'S' ]; then
                echo -e "$(HeaderSuccess "END DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'W' ]; then
                echo -e "$(HeaderWarning "END DEBUGGING TEXT : $p_string")" > "$__BU_PROJECT_ECHO_OUTPUT_FILE_PATH"
            fi

            __EchoVoid
        fi
    fi
}

# Failsafe if any "Echo<...>()" function has to be called in the "CheckProjectLogStatus()" function.
function __EchoCPLS()
{
    #***** Parameters *****
    p_string=$1
    p_option=$2

    shift 2; pa_extraArgs=("$@")

    #***** Code *****$
    if [ "$__BU_STAT_LOG" = "true" ]; then
        CheckProjectLogPath
    fi

    CheckSTAT_LOG           "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckSTAT_LOG_REDIRECT  "$(basename "${BASH_SOURCE[0]}")" "$LINENO"
    CheckSTAT_TIME_TXT      "$(basename "${BASH_SOURCE[0]}")" "$LINENO"

    if [ "$__BU_STAT_LOG" = "true" ] && [ -f "$__BU_PROJECT_LOG_FILE_PATH" ]; then
        if [ "$__BU_STAT_LOG_REDIRECT" = "log" ]; then
            for val in "${pa_extraArgs[@]}"; do
                case "$p_option" in
                    '-n' | 'n')
                        if [ "$val" = "nodate" ]; then
                            echo -ne "$p_string" > "$__BU_PROJECT_LOG_FILE_PATH"
                        else
                            echo -ne "$__BU_TIME_DATE_DISPLAY $p_string" > "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e >&2; echo -e "${__BU_COLOR_HIGHLIGHT}${FUNCNAME[0]}() : ${__BU_COLOR_ERROR}Unable to write into the ${__BU_COLOR_HIGHLIGHT}$__BU_PROJECT_LOG_FILE_PATH${__BU_COLOR_ERROR} file.${__BU_COLOR_RESET}" >&2; echo -e >&2; return 1; }
                        fi
                        ;;
                    '' | *)
                        if [ "$val" = "nodate" ]; then
                            echo -e "$p_string" > "$__BU_PROJECT_LOG_FILE_PATH"
                        else
                            echo -e "$__BU_TIME_DATE_DISPLAY $p_string" > "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e >&2; echo -e "${__BU_COLOR_HIGHLIGHT}${FUNCNAME[0]}() : ${__BU_COLOR_ERROR}Unable to write into the ${__BU_COLOR_HIGHLIGHT}$__BU_PROJECT_LOG_FILE_PATH${__BU_COLOR_ERROR} file.${__BU_COLOR_RESET}" >&2; echo -e >&2; return 1; }
                        fi
                        ;;
                esac
            done

        elif [ "$__BU_STAT_LOG_REDIRECT" = "tee" ]; then
            for val in "${pa_extraArgs[@]}"; do
                case "$p_option" in
                    '-n' | 'n')
                        if [ "$val" = "nodate" ]; then
                            echo -ne "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH"
                        else
                            echo -ne "$p_string"
                            echo -ne "$__BU_TIME_DATE_DISPLAY $p_string" > "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e >&2; echo -e "${__BU_COLOR_HIGHLIGHT}${FUNCNAME[0]}() : ${__BU_COLOR_ERROR}Unable to write into the ${__BU_COLOR_HIGHLIGHT}$__BU_PROJECT_LOG_FILE_PATH${__BU_COLOR_ERROR} file.${__BU_COLOR_RESET}" >&2; echo -e >&2; return 1; }
                        fi
                        ;;
                    '' | *)
                        if [ "$val" = "nodate" ]; then
                            echo -e "$p_string" 2>&1 | tee -a "$__BU_PROJECT_LOG_FILE_PATH"
                        else
                            echo -e "$p_string"
                            echo -e "$__BU_TIME_DATE_DISPLAY $p_string" > "$__BU_PROJECT_LOG_FILE_PATH" || { echo -e >&2; echo -e "${__BU_COLOR_HIGHLIGHT}${FUNCNAME[0]}() : ${__BU_COLOR_ERROR}Unable to write into the ${__BU_COLOR_HIGHLIGHT}$__BU_PROJECT_LOG_FILE_PATH${__BU_COLOR_ERROR} file.${__BU_COLOR_RESET}" >&2; echo -e >&2; return 1; }
                        fi
                        ;;
                esac
            done

            sleep "$__BU_STAT_TIME_TXT"

        else
            case "$p_option" in
                '-n' | 'n')
                    echo -ne "$p_string";;
                '' | *)
                    echo -e "$p_string";;
            esac

            sleep "$__BU_STAT_TIME_TXT"
        fi

    else
        case "$p_option" in
            '-n' | 'n')
                echo -ne "$p_string";;
            '' | *)
                echo -e "$p_string";;
        esac

        sleep "$__BU_STAT_TIME_TXT"
    fi
}

# --------------------------------------------

## DISPLAYING A COLORED MESSAGE WITH A PAUSE TIME DEPENDING ON THE "$__BU_STAT_TIME_TXT" status CheckTxtFmt.

# Error message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoError()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'E'
        CheckProjectLogStatus "${__BU_COLOR_ERROR}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'E'
    else
        __EchoOutput "$p_string" 'begin' 'E'
        __EchoCPLS "${__BU_COLOR_ERROR}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'E'
    fi

    sleep "$__BU_STAT_TIME_TXT"
}

# Normal message (without any extra color), with redirection checking.

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoMsg()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'm'
        CheckProjectLogStatus "$p_string" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'm'
    else
        __EchoOutput "$p_string" 'begin' 'm'
        __EchoCPLS "$p_string" "" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'm'
    fi

    sleep "$__BU_STAT_TIME_TXT"
}

# New sub-step message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoNewstep()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'N'
        CheckProjectLogStatus "${__BU_COLOR_NEWSTEP}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'N'
    else
        __EchoOutput "$p_string" 'begin' 'N'
        __EchoCPLS "${__BU_COLOR_NEWSTEP}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'N'
    fi

    sleep "$__BU_STAT_TIME_TXT"
}

# Read input values

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#	- CheckProjectLogStatus		--> Checkings.lib
function EchoRead()
{
	#***** Parameters *****
	local p_string=$1      # User's keyboard input.
	
	#***** Code *****
	if [ -f "$__BU_PROJECT_LOG_FILE_PATH" ] && [ "$__BU_STAT_LOG" = "true" ] && [ -n "$__BU_STAT_LOG_REDIRECT" ]; then
		echo -e "Keyboard input value : $(DechoHighlight "$p_string")" >> "$__BU_PROJECT_LOG_FILE_PATH"
	fi
}

# Success message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoSuccess()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'S'
        CheckProjectLogStatus "${__BU_COLOR_SUCCESS}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'S'
    else
        __EchoOutput "$p_string" 'begin' 'S'
        __EchoCPLS "${__BU_COLOR_SUCCESS}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'S'
    fi

    sleep "$__BU_STAT_TIME_TXT"
}

# Warning message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoWarning()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'W'
        CheckProjectLogStatus "${__BU_COLOR_WARNING}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'W'
    else
        __EchoOutput "$p_string" 'begin' 'W'
        __EchoCPLS "${__BU_COLOR_WARNING}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'W'
    fi

    sleep "$__BU_STAT_TIME_TXT"
}

# -----------------------------------------------

## TEXT FORMATTING

# Keep the same text format between lowercased or uppercased text printed by a formatting text function ("ToLowercase()" OR "ToUppercase()") or a parameter expansion.
function KeepFormatting()
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	# echo -e "$p_string" | tr '[upper]' '[upper]'
	return
}

# Print a lowercased text.

# Usage :
#	ToLowercase "<Text to write>"
function ToLowercase()
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo -e "$p_string" | tr '[:upper:]' '[:lower:]'
}

# Print an uppercased text.

# Usage :
#	ToUppercase "<Text to write>"
function ToUppercase()
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo -e "$p_string" | tr '[:lower:]' '[:upper:]'
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### LINE BREAKS

## LINE BREAKS ACCORDING TO THE "$MAIN_SCRIPT_LOG" VARIABLE VALUE.

# Redirecting the output of the "echo" command

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
#	- HandleErrors				--> Checkings.lib
function Newline()
{
    #***** Parameters *****
    local number=$1

    #***** Code *****
    if [ -n "$number" ]; then
        if ! IsInt "$number"; then
            EchoWarning "$(DechoHighlight "${FUNCNAME[0]}()") --> Warning : the number of line breaks must be an integer"
        else
            # Doing X line breaks according to the number passed as argument.
            for ((i=0; i<number; i++)); do
                CheckProjectLogStatus "" "" "nodate"
            done
        fi
    else
        CheckProjectLogStatus "" "" "nodate"
    fi
}
