#!/usr/bin/env bash

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo "WARNING !"; echo
    echo "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !"
    echo "Use this script only by sourcing it in your project script."; echo

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### TEXT WRITING AND DECORATION (FORMATTING)

## WRITING DIFFERENTLY COLORED/FORMATTED TEXT BETWEEN TEXT

# Quick multi commands execution for the below "Decho()" function.
function __Decho { local v_oldColor=$1; tput setaf "$v_oldColor" && IsInt "$v_oldColor" && echo "$v_oldColor" > "$__BASH_UTILS_FILE_COLOR_CODE_PATH" }

# Text's inside decoration/formatting procssing.

# Usage :
#	Decho "${__BU_COLOR_<TO_DISPLAY>}" "$1" '<format code>'

# Featured functions and files from the "functions" folder : none
function Decho
{
    #***** Parameters *****
    local p_string=$1
    local p_newColor=$2
    local p_formatting=$3

    #***** Variables *****
    local v_oldColor
        v_oldColor="$(CheckDecho && cat "$__PROJECT_COLOR_CODE_FILE_PATH")"
        
    local v_commands
        v_commands="$()"

    #***** Code *****
    if [ -n "$p_newColor" ] && [ "$p_newColor" = "$v_oldColor" ]; then
        
        # TODO : Développer un meilleur système de changement de couleur (P-Ê en appelant une fonction à créer, ou en utilisant une formule mathématique). Se renseigner sur la commande "tput setaf".
		p_newColor="$(( p_newColor+2 ))"
		tput setaf "$p_newColor"
	fi

	case "${p_formatting^^}" in
        'B')
            # Formatting : bold.
            echo -e "${__BU_TXT_BOLD}$p_string${__BU_TXT_RESET}"
            ;;
        'BC')
            # Formatting : bold + color.
            echo -e "${__BU_TXT_BOLD}$(tput setaf "$p_newColor")$p_string${__BU_TXT_RESET}" && __Decho "$v_oldColor"
            ;;
        'BCI')
            # Formatting : bold + color + italic.
            echo -e "${__BU_TXT_BOLD}${p_newColor}${__BU_TXT_ITALIC}$p_string${__BU_TXT_RESET}" && __Decho "$v_oldColor"
            ;;
        'BCIU')
            # Formatting : bold + color + italic + underline
            echo -e "${__BU_TXT_BOLD}${p_newColor}${__BU_TXT_ITALIC}${__BU_TXT_UNDERLINE}$p_string${__BU_TXT_RESET}" && __Decho "$v_oldColor"
            ;;
        'C')
            # Formatting : color.
            echo -e "$(tput setaf "$p_newColor")$p_string${__BU_TXT_RESET}" && __Decho "$v_oldColor"
            ;;

        'CI')
            # Formatting : color + italic.
            echo -e "$(tput setaf "$p_newColor")${__BU_TXT_ITALIC}$p_string${__BU_TXT_RESET}" && __Decho "$v_oldColor"
            ;;
        'CIU')
            # Formatting : color + italic + underline.
            echo -e "$(tput setaf "$p_newColor")${__BU_TXT_ITALIC}${__BU_TXT_UNDERLINE}$p_string${__BU_TXT_RESET}" && __Decho "$v_oldColor"
            ;;
        'CU')
            # Formatting : color + underline.
            echo -e "$(tput setaf "$p_newColor")${__BU_TXT_UNDERLINE}$p_string${__BU_TXT_RESET}" && __Decho "$v_oldColor"
            ;;
        'I')
            # Formatting : italic.
            echo -e "${__BU_TXT_ITALIC}$p_string${__BU_TXT_RESET}"
            ;;
        'IU')
            # Formatting : italic + underline.
            echo -e "${__BU_TXT_ITALIC}${__BU_TXT_UNDERLINE}$p_string${__BU_TXT_RESET}"
            ;;
        'U')
            # Formatting : underline.
            echo -e "${__BU_TXT_UNDERLINE}$p_string${__BU_TXT_RESET}"
            ;;
        *)
            HandleErrors "1" "THE $(DechoHighlight "case condition") TEXT FORMATTING VALUE IS INCORRECT" \
                "Please specify a valid text formatting. The list and the descriptions are available into the aforementionned condition." \
                "$p_formatting" "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
            ;;
    esac
}

# Bold formatting.
function DechoBold                  { Decho "$1" "" 'B';    }
function DechoBoldItalic            { Decho "$1" "" 'BI';   }
function DechoBoldItalicUnderline   { Decho "$1" "" 'BIU';  }
function DechoBoldUnderline         { Decho "$1" "" 'BU';   }

# Italic formatting.
function DechoItalic                { Decho "$1" "" 'I';    }
function DechoItalicUnderline       { Decho "$1" "" 'IU';   }

# Underline formatting.
function DechoUnderline             { Decho "$1" "" 'U';    }

# Easy "Decho()" function calls.
function DechoHighlight { Decho "$1" "$__BU_COLOR_HIGHLIGHT"    'C'; }
function DechoBlue      { Decho "$1" "$__BU_COLOR_BLUE"         'C'; }
function DechoCyan      { Decho "$1" "$__BU_COLOR_CYAN"         'C'; }
function DechoGray      { Decho "$1" "$__BU_COLOR_GRAY"         'C'; }
function DechoGreen     { Decho "$1" "$__BU_COLOR_GREEN"        'C'; }
function DechoOrange    { Decho "$1" "$__BU_COLOR_ORANGE"       'C'; }
function DechoPink      { Decho "$1" "$__BU_COLOR_PINK"         'C'; }
function DechoPurple    { Decho "$1" "$__BU_COLOR_PURPLE"       'C'; }
function DechoRed       { Decho "$1" "$__BU_COLOR_RED"          'C'; }
function DechoTurquoise { Decho "$1" "$__BU_COLOR_TURQUOISE"    'C'; }
function DechoYellow    { Decho "$1" "$__BU_COLOR_YELLOW"       'C'; }

# Easy "DechoBold()" function calls with colors.
function DechoBoldHighlight     { Decho "$1" "$__BU_COLOR_HIGHLIGHT"    'BC'; }
function DechoBoldBlue          { Decho "$1" "$__BU_COLOR_BLUE"         'BC'; }
function DechoBoldCyan          { Decho "$1" "$__BU_COLOR_CYAN"         'BC'; }
function DechoBoldGray          { Decho "$1" "$__BU_COLOR_GRAY"         'BC'; }
function DechoBoldGreen         { Decho "$1" "$__BU_COLOR_GREEN"        'BC'; }
function DechoBoldOrange        { Decho "$1" "$__BU_COLOR_ORANGE"       'BC'; }
function DechoBoldPink          { Decho "$1" "$__BU_COLOR_PINK"         'BC'; }
function DechoBoldPurple        { Decho "$1" "$__BU_COLOR_PURPLE"       'BC'; }
function DechoBoldRed           { Decho "$1" "$__BU_COLOR_RED"          'BC'; }
function DechoBoldTurquoise     { Decho "$1" "$__BU_COLOR_TURQUOISE"    'BC'; }
function DechoBoldYellow        { Decho "$1" "$__BU_COLOR_YELLOW"       'BC'; }

# Easy "DechoBoldItalic()" function calls with colors.
function DechoBoldItalicHighlight   { Decho "$1" "$__BU_COLOR_HIGHLIGHT"    'BCI'; }
function DechoBoldItalicBlue        { Decho "$1" "$__BU_COLOR_BLUE"         'BCI'; }
function DechoBoldItalicCyan        { Decho "$1" "$__BU_COLOR_CYAN"         'BCI'; }
function DechoBoldItalicGray        { Decho "$1" "$__BU_COLOR_GRAY"         'BCI'; }
function DechoBoldItalicGreen       { Decho "$1" "$__BU_COLOR_GREEN"        'BCI'; }
function DechoBoldItalicOrange      { Decho "$1" "$__BU_COLOR_ORANGE"       'BCI'; }
function DechoBoldItalicPink        { Decho "$1" "$__BU_COLOR_PINK"         'BCI'; }
function DechoBoldItalicPurple      { Decho "$1" "$__BU_COLOR_PURPLE"       'BCI'; }
function DechoBoldItalicRed         { Decho "$1" "$__BU_COLOR_RED"          'BCI'; }
function DechoBoldItalicTurquoise   { Decho "$1" "$__BU_COLOR_TURQUOISE"    'BCI'; }
function DechoBoldItalicYellow      { Decho "$1" "$__BU_COLOR_YELLOW"       'BCI'; }

# Easy "DechoBoldItalicUnderline()" function calls with color.
function DechoBoldItalicUnderlineHighlight   { Decho "$1" "$__BU_COLOR_HIGHLIGHT"    'BCIU'; }
function DechoBoldItalicUnderlineBlue        { Decho "$1" "$__BU_COLOR_BLUE"         'BCIU'; }
function DechoBoldItalicUnderlineCyan        { Decho "$1" "$__BU_COLOR_CYAN"         'BCIU'; }
function DechoBoldItalicUnderlineGray        { Decho "$1" "$__BU_COLOR_GRAY"         'BCIU'; }
function DechoBoldItalicUnderlineGreen       { Decho "$1" "$__BU_COLOR_GREEN"        'BCIU'; }
function DechoBoldItalicUnderlineOrange      { Decho "$1" "$__BU_COLOR_ORANGE"       'BCIU'; }
function DechoBoldItalicUnderlinePink        { Decho "$1" "$__BU_COLOR_PINK"         'BCIU'; }
function DechoBoldItalicUnderlinePurple      { Decho "$1" "$__BU_COLOR_PURPLE"       'BCIU'; }
function DechoBoldItalicUnderlineRed         { Decho "$1" "$__BU_COLOR_RED"          'BCIU'; }
function DechoBoldItalicUnderlineTurquoise   { Decho "$1" "$__BU_COLOR_TURQUOISE"    'BCIU'; }
function DechoBoldItalicUnderlineYellow      { Decho "$1" "$__BU_COLOR_YELLOW"       'BCIU'; }

# Easy "DechoItalic()" function calls with colors.
function DechoItalicHighlight     { Decho "$1" "$__BU_COLOR_HIGHLIGHT"    'CI'; }
function DechoItalicBlue          { Decho "$1" "$__BU_COLOR_BLUE"         'CI'; }
function DechoItalicCyan          { Decho "$1" "$__BU_COLOR_CYAN"         'CI'; }
function DechoItalicGray          { Decho "$1" "$__BU_COLOR_GRAY"         'CI'; }
function DechoItalicGreen         { Decho "$1" "$__BU_COLOR_GREEN"        'CI'; }
function DechoItalicOrange        { Decho "$1" "$__BU_COLOR_ORANGE"       'CI'; }
function DechoItalicPink          { Decho "$1" "$__BU_COLOR_PINK"         'CI'; }
function DechoItalicPurple        { Decho "$1" "$__BU_COLOR_PURPLE"       'CI'; }
function DechoItalicRed           { Decho "$1" "$__BU_COLOR_RED"          'CI'; }
function DechoItalicTurquoise     { Decho "$1" "$__BU_COLOR_TURQUOISE"    'CI'; }
function DechoItalicYellow        { Decho "$1" "$__BU_COLOR_YELLOW"       'CI'; }

# Easy "DechoItalicUnderline()" function calls with colors.
function DechoItalicUnderlineHighlight     { Decho "$1" "$__BU_COLOR_HIGHLIGHT"    'CIU'; }
function DechoItalicUnderlineBlue          { Decho "$1" "$__BU_COLOR_BLUE"         'CIU'; }
function DechoItalicUnderlineCyan          { Decho "$1" "$__BU_COLOR_CYAN"         'CIU'; }
function DechoItalicUnderlineGray          { Decho "$1" "$__BU_COLOR_GRAY"         'CIU'; }
function DechoItalicUnderlineGreen         { Decho "$1" "$__BU_COLOR_GREEN"        'CIU'; }
function DechoItalicUnderlineOrange        { Decho "$1" "$__BU_COLOR_ORANGE"       'CIU'; }
function DechoItalicUnderlinePink          { Decho "$1" "$__BU_COLOR_PINK"         'CIU'; }
function DechoItalicUnderlinePurple        { Decho "$1" "$__BU_COLOR_PURPLE"       'CIU'; }
function DechoItalicUnderlineRed           { Decho "$1" "$__BU_COLOR_RED"          'CIU'; }
function DechoItalicUnderlineTurquoise     { Decho "$1" "$__BU_COLOR_TURQUOISE"    'CIU'; }
function DechoItalicUnderlineYellow        { Decho "$1" "$__BU_COLOR_YELLOW"       'CIU'; }

# Easy "DechoUnderline()" function calls with colors.
function DechoUnderlineHighlight     { Decho "$1" "$__BU_COLOR_HIGHLIGHT"    'CU'; }
function DechoUnderlineBlue          { Decho "$1" "$__BU_COLOR_BLUE"         'CU'; }
function DechoUnderlineCyan          { Decho "$1" "$__BU_COLOR_CYAN"         'CU'; }
function DechoUnderlineGray          { Decho "$1" "$__BU_COLOR_GRAY"         'CU'; }
function DechoUnderlineGreen         { Decho "$1" "$__BU_COLOR_GREEN"        'CU'; }
function DechoUnderlineOrange        { Decho "$1" "$__BU_COLOR_ORANGE"       'CU'; }
function DechoUnderlinePink          { Decho "$1" "$__BU_COLOR_PINK"         'CU'; }
function DechoUnderlinePurple        { Decho "$1" "$__BU_COLOR_PURPLE"       'CU'; }
function DechoUnderlineRed           { Decho "$1" "$__BU_COLOR_RED"          'CU'; }
function DechoUnderlineTurquoise     { Decho "$1" "$__BU_COLOR_TURQUOISE"    'CU'; }
function DechoUnderlineYellow        { Decho "$1" "$__BU_COLOR_YELLOW"       'CU'; }

# -----------------------------------------------

## DISPLAYING A COLORED MESSAGE WITH A PAUSE TIME DEPENDING ON THE "$__STAT_TIME_TXT" status variable.

# Error message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoError
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "${__BU_COLOR_ERROR}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${p_arrExtraArgs[@]}" >&2

    sleep "$__STAT_TIME_TXT"
}

# Normal message (without any extra color), with redirection checking.

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoMsg
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "$p_string" "$p_option" "${p_arrExtraArgs[@]}"

    sleep "$__STAT_TIME_TXT"
}

# New sub-step message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoNewstep
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "${__BU_COLOR_ORANGE}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${p_arrExtraArgs[@]}"

    sleep "$__STAT_TIME_TXT"
}

# Read input values

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#	- CheckProjectLogStatus		--> Checkings.lib
function EchoRead
{
	#***** Parameters *****
	local p_string=$1
	
	#***** Code *****
	if [ -f "$__PROJECT_LOG_FILE_PATH" ] && [ "$__STAT_LOG" = "true" ] && [ -n "$__STAT_LOG_REDIRECT" ]; then
		echo "$p_string" >> "$__PROJECT_LOG_FILE_PATH"
	fi
}

# Success message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoSuccess
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "${__BU_COLOR_SUCCESS}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${p_arrExtraArgs[@]}" >&1

    sleep "$__STAT_TIME_TXT"
}

# Warning message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoWarning
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2; shift 2
    local p_arrExtraArgs=("$@")

    #***** Code *****
    CheckProjectLogStatus "${__BU_COLOR_WARNING}$__BU_TXT_PRINT_TAB$__BU_TXT_PRINT_TAB $p_string${__BU_COLOR_RESET}" "$p_option" "${p_arrExtraArgs[@]}" 1>&2

    sleep "$__STAT_TIME_TXT"
}

# -----------------------------------------------

## TEXT FORMATTING

# Keep the same text format between lowercased or uppercased text printed by a formatting text function ("ToLowercase()" OR "ToUppercase()") or a parameter expansion.
function KeepFormatting
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo "$p_string" | tr '[upper]' '[upper]'
}

# Print a lowercased text.

# Usage :
#	ToLowercase "<Text to write>"
function ToLowercase
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo "$p_string" | tr '[:upper:]' '[:lower:]'
}

# Print an uppercased text.

# Usage :
#	ToUppercase "<Text to write>"
function ToUppercase
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo "$p_string" | tr '[:lower:]' '[:upper:]'
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### LINE BREAKS

## LINE BREAKS ACCORDING TO THE "$MAIN_SCRIPT_LOG" VARIABLE VALUE.

# Redirecting the output of the "echo" command

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
#	- HandleErrors				--> Checkings.lib
function Newline
{
    #***** Parameters *****
    local number=$1

    #***** Code *****
    if [ -n "$number" ]; then
        if ! IsInt "$number"; then
            HandleErrors "1" "THE NUMBER OF LINE BREAKS MUST BE AN INTEGER" \
                "Check at the mentionned file in the 4th $(DechoE "HandleErrors") function's argument" "$number" \
                "$(basename "${BASH_SOURCE[0]}")" "${FUNCNAME[0]}" "$(( LINENO-1 ))"
        else
            # Doing X line breaks according to the number passed as argument.
            for ((i=0; i<number; i++)); do
                CheckProjectLogStatus "" "" "nodate"
            done
        fi
    else
        CheckProjectLogStatus "" "" "nodate"
    fi
}
