#!/usr/bin/env bash

# ----------------------
# SCRIPT'S INFORMATIONS

# Name          : Echo.lib
# Description   : (Colored) text display functions.
# Author(s)     : Dimitri Obeid
# Version       : 

# DO NOT EXECUTE IT DIRECTLY, instead, just source it by calling the "__BASH_UTILS_MOD_MAIN_FUNCTIONS_FILES_PATH" array in the initializer file.

# /////////////////////////////////////////////////////////////////////////////////////////////// #

# Preventing the direct execution of this file, as this script is not meant to be directly executed, but sourced.
if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    echo -e "WARNING !" >&2; echo >&2
    echo -e "This shell script (${BASH_SOURCE[0]}) is not meant to be executed directly !" >&2
    echo -e "Use this script only by sourcing it in your project script." >&2; echo >&2

    exit 1
fi

# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; #

#################################### DEFINING LIBRARY FUNCTIONS ###################################

#### PRINTING FORMATTED STRINGS

## DEBUGGING AND HANDLING TEXT DISPLAY ERRORS

# Print void lines before and after calling a header.
function __EchoVoid()
{
    printf "
    
    
    
    
    
    
    
    
    
    " > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
}

# "Echo<...>()" functions debug output for a better view during a "bash - x" debug process.
function __EchoOutput()
{
	#***** Parameters *****
	local p_string=$1		# String to display.
	local p_context=$2		# Begin or end of the debug process.
	local p_type=$3			# Type of message (error 'E', newstep 'N', success 'S' or warning 'W').

	#***** Code *****
	if [ "$__BU_MOD_MAIN_STAT_DEBUG" = "true" ]; then
		CheckProjectRelatedFile "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PARENT" "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_NAME" "f"

        if [ "$p_context" = "begin" ]; then
            __EchoVoid

            if [ "${p_type^^}" = "E" ]; then
                echo -e "$(HeaderError "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'm' ]; then
                echo -e "$(Header "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'N' ]; then
                echo -e "$(HeaderNewstep "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'S' ]; then
                echo -e "$(HeaderSuccess "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'W' ]; then
                echo -e "$(HeaderWarning "BEGIN DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            fi

            return 0

        elif [ "$p_context" = "end" ]; then
            if [ "${p_type^^}" = "E" ]; then
                echo -e "$(HeaderError "END DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'm' ]; then
                echo -e "$(Header "END DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'N' ]; then
                echo -e "$(HeaderNewstep "END DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'S' ]; then
                echo -e "$(HeaderSuccess "END DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            elif [ "${p_type^^}" = 'W' ]; then
                echo -e "$(HeaderWarning "END DEBUGGING TEXT : $p_string")" > "$__BU_MOD_MAIN_PROJECT_ECHO_OUTPUT_FILE_PATH"
            fi

            __EchoVoid; return 0
        fi
    fi
}

# Failsafe if any "Echo<...>()" function has to be called in the "CheckProjectLogStatus()" function.
function __EchoCPLS()
{
    #***** Parameters *****
    p_string=$1
    p_option=$2

    shift 2; pa_extraArgs=("$@")

    #***** Code *****
    for val in "${pa_extraArgs[@]}"; do
        if [ "$val" = 'nodate' ]; then 
            case "$p_option" in
                '-n' | 'n')
                    if CheckIsInitializing; then
                        InitializerAddInitStrArrayVal "$p_string" "$(CutDashFromOption "-n")"
                    else
                        echo -ne "$p_string"
                    fi
                    ;;
                '' | *)
                    if CheckIsInitializing; then
                        InitializerAddInitStrArrayVal "$p_string" ""
                    else
                        echo -e "$p_string"
                    fi
                    ;;
            esac
        elif [ -z "$val" ]; then
            case "$p_option" in
                '-n' | 'n')
                    if CheckIsInitializing; then
                        InitializerAddInitStrArrayVal "$p_string" "$(CutDashFromOption "-n")"
                    else
                        echo -ne "$__BU_MOD_MAIN_TIME_DATE_DISPLAY $p_string"
                    fi
                    ;;
                '' | *)
                    if CheckIsInitializing; then
                        InitializerAddInitStrArrayVal "$p_string" ""
                    else
                        echo -e "$__BU_MOD_MAIN_TIME_DATE_DISPLAY $p_string"
                    fi
                    ;;
            esac
        else
            case "$p_option" in
                '-n' | 'n')
                    if CheckIsInitializing; then
                        InitializerAddInitStrArrayVal "$p_string" "$(CutDashFromOption "-n")"
                    else
                        echo -ne "$__BU_MOD_MAIN_TIME_DATE_DISPLAY $p_string"
                    fi
                    ;;
                '' | *)
                    if CheckIsInitializing; then
                        InitializerAddInitStrArrayVal "$p_string" ""
                    else
                        echo -e "$__BU_MOD_MAIN_TIME_DATE_DISPLAY $p_string"
                    fi
                    ;;
            esac
        fi

        sleep "$__BU_MOD_MAIN_STAT_TIME_TXT"
    done
}

# --------------------------------------------

## DISPLAYING A COLORED MESSAGE WITH A PAUSE TIME DEPENDING ON THE "$__BU_MOD_MAIN_STAT_TIME_TXT" status CheckTxtFmt.

# Error message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoError()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2;
shift 2

    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'E'
        CheckProjectLogStatus "${__BU_MOD_MAIN_COLOR_ERROR}$__BU_MOD_MAIN_TXT_PRINT_TAB$__BU_MOD_MAIN_TXT_PRINT_TAB $p_string${__BU_MOD_MAIN_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'E'

    # Failsafe if any "Echo<...>()" function has to be called in the "CheckProjectLogStatus()" function.
    else
        __EchoOutput "$p_string" 'begin' 'E'
        __EchoCPLS "${__BU_MOD_MAIN_COLOR_ERROR}$__BU_MOD_MAIN_TXT_PRINT_TAB$__BU_MOD_MAIN_TXT_PRINT_TAB $p_string${__BU_MOD_MAIN_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'E'
    fi

    sleep "$__BU_MOD_MAIN_STAT_TIME_TXT"
}

# Normal message (without any extra color), with redirection checking.

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoMsg()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2;
    shift 2

    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'm'
        CheckProjectLogStatus "$p_string" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'm'

    # Failsafe if any "Echo<...>()" function has to be called in the "CheckProjectLogStatus()" function.
    else
        __EchoOutput "$p_string" 'begin' 'm'
        __EchoCPLS "$p_string" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'm'
    fi

    sleep "$__BU_MOD_MAIN_STAT_TIME_TXT"
}

# New sub-step message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoNewstep()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2;
    shift 2

    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'N'
        CheckProjectLogStatus "${__BU_MOD_MAIN_COLOR_NEWSTEP}$__BU_MOD_MAIN_TXT_PRINT_TAB$__BU_MOD_MAIN_TXT_PRINT_TAB $p_string${__BU_MOD_MAIN_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'N'

    # Failsafe if any "Echo<...>()" function has to be called in the "CheckProjectLogStatus()" function.
    else
        __EchoOutput "$p_string" 'begin' 'N'
        __EchoCPLS "${__BU_MOD_MAIN_COLOR_NEWSTEP}$__BU_MOD_MAIN_TXT_PRINT_TAB$__BU_MOD_MAIN_TXT_PRINT_TAB $p_string${__BU_MOD_MAIN_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'N'
    fi

    sleep "$__BU_MOD_MAIN_STAT_TIME_TXT"
}

# Read input values

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#	- CheckProjectLogStatus		--> Checkings.lib
function EchoRead()
{
	#***** Parameters *****
	local p_string=$1      # User's keyboard input.
	
	#***** Code *****
	if [ -f "$__BU_MOD_MAIN_PROJECT_LOG_FILE_PATH" ] && [ "$__BU_MOD_MAIN_STAT_LOG" = "true" ] && [ -n "$__BU_MOD_MAIN_STAT_LOG_REDIRECT" ]; then
		echo -e "Keyboard input value : $(DechoHighlight "$p_string")" >> "$__BU_MOD_MAIN_PROJECT_LOG_FILE_PATH"
	fi
}

# Success message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoSuccess()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2;
    shift 2

    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'S'
        CheckProjectLogStatus "${__BU_MOD_MAIN_COLOR_SUCCESS}$__BU_MOD_MAIN_TXT_PRINT_TAB$__BU_MOD_MAIN_TXT_PRINT_TAB $p_string${__BU_MOD_MAIN_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'S'

    # Failsafe if any "Echo<...>()" function has to be called in the "CheckProjectLogStatus()" function.
    else
        __EchoOutput "$p_string" 'begin' 'S'
        __EchoCPLS "${__BU_MOD_MAIN_COLOR_SUCCESS}$__BU_MOD_MAIN_TXT_PRINT_TAB$__BU_MOD_MAIN_TXT_PRINT_TAB $p_string${__BU_MOD_MAIN_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'S'
    fi

    sleep "$__BU_MOD_MAIN_STAT_TIME_TXT"
}

# Warning message

# Usage :
#	EchoError "<Text to write>" "<optional echo argument>" "<Any extra argument supported by the CheckProjectLogStatus() function>"

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
function EchoWarning()
{
    #***** Parameters *****
    local p_string=$1
    local p_option=$2;
    shift 2

    local pa_extraArgs=("$@")

    #***** Code *****
    if ! CheckEcho; then
        __EchoOutput "$p_string" 'begin' 'W'
        CheckProjectLogStatus "${__BU_MOD_MAIN_COLOR_WARNING}$__BU_MOD_MAIN_TXT_PRINT_TAB$__BU_MOD_MAIN_TXT_PRINT_TAB $p_string${__BU_MOD_MAIN_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'W'

    # Failsafe if any "Echo<...>()" function has to be called in the "CheckProjectLogStatus()" function.
    else
        __EchoOutput "$p_string" 'begin' 'W'
        __EchoCPLS "${__BU_MOD_MAIN_COLOR_WARNING}$__BU_MOD_MAIN_TXT_PRINT_TAB$__BU_MOD_MAIN_TXT_PRINT_TAB $p_string${__BU_MOD_MAIN_COLOR_RESET}" "$p_option" "${pa_extraArgs[@]}"

        __EchoOutput "$p_string" 'end' 'W'
    fi

    sleep "$__BU_MOD_MAIN_STAT_TIME_TXT"
}

# -----------------------------------------------

## TEXT FORMATTING

# Keep the same text format between lowercased or uppercased text printed by a formatting text function ("ToLowercase()" OR "ToUppercase()") or a parameter expansion.
function KeepFormatting()
{
	#***** Parameters *****
	p_string=$1            # String to display.
	p_old_formatting=$2    # Former tectxt formatting.

	#***** Code *****
	echo -ne &>/dev/null; echo -ne "$p_string"

	if [ "${p_old_formatting,,}" = 'l' ]; then
        echo -ne "$(ToLowercase "")"
	elif [ "${p_old_formatting^^}" = 'U' ]; then
        echo -ne "$(ToUppercase "")"
	else
        echo -ne "<<|| No reformatting precised in the ${FUNCNAME[0]}() function ||>>"
	fi

	return 0
}

# Print a lowercased text.

# Usage :
#	ToLowercase "<Text to write>"
function ToLowercase()
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo -e "$p_string" | tr '[:upper:]' '[:lower:]'; return 0
}

# Print an uppercased text.

# Usage :
#	ToUppercase "<Text to write>"
function ToUppercase()
{
	#***** Parameters *****
	p_string=$1

	#***** Code *****
	echo -e "$p_string" | tr '[:lower:]' '[:upper:]'; return 0
}

# -----------------------------------------------



# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### LINE BREAKS

## LINE BREAKS ACCORDING TO THE "$MAIN_SCRIPT_LOG" VARIABLE VALUE

# Redirecting the output of the "echo" command

# Featured functions and files from the "functions" folder :
#   - CheckProjectLogStatus     --> Checkings.lib
#	- HandleErrors				--> Checkings.lib
function Newline()
{
    #***** Parameters *****
    local number=$1

    #***** Code *****

    if [ -n "$number" ]; then
        if ! IsInt "$number"; then
            EchoMsg "" "" "nodate"
            HandleSmallErrors 'W' "$(DechoHighlight "${FUNCNAME[0]}()") --> Warning : the number of line breaks must be an integer" 'R'
            EchoMsg "" "" "nodate"
        else
            # Doing X line breaks according to the number passed as argument.
            for ((i=0; i<number; i++)); do
                EchoMsg "" "" "nodate"
            done
        fi
    else
        EchoMsg "" "" "nodate"
    fi

    return 0
}
